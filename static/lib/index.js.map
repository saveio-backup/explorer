{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"babel-runtime/helpers/createClass\"","webpack:///external \"babel-runtime/helpers/classCallCheck\"","webpack:///external \"babel-runtime/core-js/json/stringify\"","webpack:///external \"babel-runtime/regenerator\"","webpack:///external \"babel-runtime/core-js/get-iterator\"","webpack:///external \"babel-runtime/helpers/asyncToGenerator\"","webpack:///external \"axios\"","webpack:///external \"crypto-js\"","webpack:///external \"bignumber.js\"","webpack:///external \"babel-runtime/core-js/object/get-prototype-of\"","webpack:///external \"babel-runtime/helpers/possibleConstructorReturn\"","webpack:///external \"babel-runtime/helpers/inherits\"","webpack:///external \"babel-runtime/core-js/map\"","webpack:///external \"elliptic\"","webpack:///external \"bip39\"","webpack:///external \"base64-url\"","webpack:///external \"sm.js\"","webpack:///external \"crypto\"","webpack:///external \"babel-runtime/helpers/extends\"","webpack:///external \"base-58\"","webpack:///external \"long\"","webpack:///external \"babel-runtime/helpers/get\"","webpack:///external \"babel-runtime/core-js/promise\"","webpack:///external \"js-sha3\"","webpack:///external \"secure-random\"","webpack:///external \"babel-runtime/core-js/object/keys\"","webpack:///external \"babel-runtime/core-js/object/assign\"","webpack:///external \"babel-runtime/helpers/typeof\"","webpack:///external \"babel-runtime/helpers/defineProperty\"","webpack:///external \"@ont-community/hdkey-secp256r1\"","webpack:///external \"wif\"","webpack:///external \"pkcs7\"","webpack:///external \"babel-runtime/core-js/array/from\"","webpack:///external \"babel-runtime/core-js/number/is-safe-integer\"","webpack:///external \"scrypt-async\"","webpack:///external \"milagro-crypto-js\"","webpack:///external \"babel-runtime/helpers/toConsumableArray\"","webpack:///external \"@ont-community/html5-websocket\"","webpack:///external \"websocket-as-promised\"","webpack:///external \"babel-runtime/helpers/objectWithoutProperties\"","webpack:///external \"uuid\"","webpack:///./src/error.ts","webpack:///./src/transaction/opcode.ts","webpack:///./src/consts.ts","webpack:///./src/utils.ts","webpack:///./src/common/bigInt.ts","webpack:///./src/crypto/SignatureScheme.ts","webpack:///./src/crypto/KeyType.ts","webpack:///./src/crypto/CurveLabel.ts","webpack:///./src/crypto/Key.ts","webpack:///./src/crypto/PublicKey.ts","webpack:///./src/transaction/program.ts","webpack:///./src/crypto/address.ts","webpack:///./src/scrypt.ts","webpack:///./src/crypto/Signature.ts","webpack:///./src/crypto/PrivateKey.ts","webpack:///./src/crypto/PrivateKeyFactory.ts","webpack:///./src/smartcontract/abi/parameter.ts","webpack:///./src/crypto/AnonymousCredential.ts","webpack:///./src/crypto/Ecies.ts","webpack:///./src/common/fixed64.ts","webpack:///./src/smartcontract/abi/abiFunction.ts","webpack:///./src/transaction/payload/deployCode.ts","webpack:///./src/transaction/payload/invokeCode.ts","webpack:///./src/common/int128.ts","webpack:///./src/smartcontract/abi/struct.ts","webpack:///./src/transaction/scriptBuilder.ts","webpack:///./src/transaction/txAttribute.ts","webpack:///./src/transaction/transaction.ts","webpack:///./src/transaction/txSignature.ts","webpack:///./src/transaction/transfer.ts","webpack:///./src/transaction/transactionUtils.ts","webpack:///./src/smartcontract/abi/nativeVmParamsBuilder.ts","webpack:///./src/smartcontract/nativevm/ontAssetTxBuilder.ts","webpack:///./src/smartcontract/nativevm/ontidContractTxBuilder.ts","webpack:///./src/transaction/transactionBuilder.ts","webpack:///./src/account.ts","webpack:///./src/network/rest/urlConsts.ts","webpack:///./src/network/rest/restClient.ts","webpack:///./src/network/websocket/deferred.ts","webpack:///./src/network/websocket/websocketBuilder.ts","webpack:///./src/network/websocket/websocketSender.ts","webpack:///./src/network/websocket/websocketClient.ts","webpack:///./src/smartcontract/abi/abiInfo.ts","webpack:///./src/smartcontract/neovm/attestClaimTxBuilder.ts","webpack:///./src/smartcontract/data/attestClaim.ts","webpack:///./src/claim/attestNotifyEvent.ts","webpack:///./src/claim/claim.ts","webpack:///./src/transaction/ddo.ts","webpack:///./src/claim/message.ts","webpack:///./src/identity.ts","webpack:///./src/neocore/TransactionNeo.ts","webpack:///./src/neocore/InvocationTransaction.ts","webpack:///./src/neocore/NeoRpc.ts","webpack:///./src/neocore/Program.ts","webpack:///./src/neocore/SmartContract.ts","webpack:///./src/neocore/TransactionInput.ts","webpack:///./src/neocore/TransactionOutput.ts","webpack:///./src/network/rpc/rpcClient.ts","webpack:///./src/smartcontract/neovm/oep8TxBuilder.ts","webpack:///./src/wallet.ts","webpack:///./src/smartcontract/neovm/oep4TxBuilder.ts","webpack:///./src/sdk/index.ts","webpack:///./src/smartcontract/nativevm/governanceContractTxBuilder.ts","webpack:///./src/smartcontract/nativevm/token.ts","webpack:///./src/smartcontract/neovm/oep5TxBuilder.ts","webpack:///./src/index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","ERROR_CODE","OPCODE","ADDR_VERSION","DEFAULT_SCRYPT","cost","blockSize","parallel","size","OEP_HEADER","OEP_FLAG","WEBVIEW_SCHEME","DEFAULT_ALGORITHM","algorithm","parameters","curve","DEFAULT_SM2_ID","TEST_NODE","MAIN_NODE","HTTP_REST_PORT","HTTP_WS_PORT","HTTP_JSON_PORT","REST_API","getBalance","sendRawTx","getMerkleProof","ONT_NETWORK","MAIN","TEST","TEST_ONT_URL","SOCKET_URL","RPC_URL","REST_URL","sendRawTxByRestful","MAIN_ONT_URL","TOKEN_TYPE","ONT","ONG","DEFAULT_GAS_LIMIT","NATIVE_INVOKE_NAME","TX_MAX_SIG_SIZE","ONT_BIP44_PATH","UNBOUND_GENERATION_AMOUNT","UNBOUND_TIME_INTERVAL","ONT_TOTAL_SUPPLY","GENESIS_BLOCK_TIMESTAMP","opcode","hexstring2ab","str","result","length","push","parseInt","substring","ab2hexstring","arr","uint8Arr","Uint8Array","byteLength","toString","ab2str","buf","String","fromCharCode","apply","str2ab","ArrayBuffer","bufView","strLen","charCodeAt","str2hexstr","hexstr2str","hex2VarBytes","hex","num2VarInt","str2VarBytes","bool2VarByte","v","hexXor","str1","str2","Error","result8","substr","utils_num2hexstring","num","arguments","undefined","littleEndian","RangeError","is_safe_integer_default","hexstring","repeat","reverseHex","out","bigIntFromBytes","bytes","buff","Buffer","from","data","from_default","subarray","concat","Array","fill","external_long_","bigIntToBytes","toBytesLE","negData","neg","stop","b","isNegative","pos","slice","utils_StringReader","StringReader","classCallCheck_default","this","createClass_default","isEmpty","index","indexOf","read","bytesToRead","readNextLen","len","utils_EventEmitter","EventEmitter","handlers","type","handler","event","utils_sendBackResult2Native","callback","window","prompt","utils_axiosPost","url","params","external_axios_default","a","post","then","res","console","log","catch","err","stringify_default","now","Math","floor","Date","sha256","external_crypto_js_","Hex","parse","ripemd160","hash160","SignatureScript","generateRandomArray","external_secure_random_","randomBytes","generateMnemonic","random","external_bip39_","parseMnemonic","varifyPositiveInt","test","INVALID_PARAMS","isBase64","isHexString","unboundDeadline","count","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","get_iterator_default","next","done","return","numInterval","calcUnboundOng","balance","startOffset","endOffset","amount","UNBOUND_DEADLINE","ustart","istart","uend","iend","BigInt","ledgerCompatible","external_bignumber_js_","isInteger","SIZE","SignatureScheme_SignatureScheme","SignatureScheme","label","labelJWS","values","item","find","ECDSAwithSHA224","ECDSAwithSHA256","ECDSAwithSHA384","ECDSAwithSHA512","ECDSAwithSHA3_224","ECDSAwithSHA3_256","ECDSAwithSHA3_384","ECDSAwithSHA3_512","ECDSAwithRIPEMD160","SM2withSM3","EDDSAwithSHA512","KeyType_KeyType","KeyType","defaultSchema","ECDSA","SM2","EDDSA","CurveLabel_CurveLabel","CurveLabel","preset","SECP224R1","SECP256R1","SECP384R1","SECP521R1","SM2P256V1","ED25519","Key_KeyParameters","KeyParameters","json","fromLabel","Key_Key","Key","deserializeJson","msg","scheme","external_js_sha3_","external_sm_js_","sum","schema","serializeJson","PublicKey_PublicKey","_Key","PublicKey","possibleConstructorReturn_default","__proto__","get_prototype_of_default","inherits_default","signature","isSchemaSupported","getSignContent","hash","computeHash","verifySignature","verifyEcDSASignature","verifyEdDSASignature","verifySM2Signature","external_elliptic_","verify","reader","id","readNullTerminated","SM2KeyPair","sr","algorithmHex","curveHex","fromHex","PublicKey_PublicKeyStatus","PublicKeyStatus","hexLabel","comparePublicKeys","ec","paKey","keyFromPublic","pbKey","pa","getPublic","pb","getX","getY","pka","pkb","_pubFromString","Number","pushOpCode","op","pushBigInt","PUSHM1","PUSH0","PUSH1","pushNum","pushBytes","bigInt","toHexstr","hexstr","PUSHBYTES75","PUSHBYTES1","PUSHDATA1","PUSHDATA2","PUSHDATA4","program_programFromPubKey","pk","serializeHex","pushPubKey","CHECKSIG","program_programFromMultiPubKey","pubkeys","sort","CHECKMULTISIG","program_programFromParams","sigs","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","readOpcode","readBytes","code","keylen","readUint32","readUint16","readUint8","readPubKey","pkStr","readNextBytes","deserializeHex","IN_USE","REVOKED","program_ProgramInfo","ProgramInfo","program_pushHexString","param","address_Address","Address","publicKey","ontid","vmCode","publicKeys","fromPubKey","toBase58","hexToBase58","val","base58ToHex","address","hexEncoded","datas","external_base_58_","base58Encoded","scrypt","keyphrase","addressHash","derived","external_scrypt_async_","normalize","N","dkLen","encryptWithCtr","privateKey","publicKeyEncoded","scryptParams","getB58Checksum","derived1","derived2","iv","assembled","encrypt","CTR","padding","NoPadding","ciphertext","decryptWithCtr","encryptedKey","saltOrAddress","encrypted","salt","ciphertexts","decrypt","checkCtrDecrypted","Decrypto_ERROR","encryptWithEcb","addresshash","xor","ECB","decryptWithEcb","checkEcbDecrypted","decryptedKey","encryptWithGcm","aad","cipher","external_crypto_","setAAD","plainText","update","final","authTag","getAuthTag","decryptWithGcm","decipher","setAuthTag","decrypted","Signature_Signature","Signature","publicKeyId","encoded","external_base64_url_","pgpSignature","Value","deserialzedValue","Algorithm","keyId","PublicKeyId","Format","HDKey","PrivateKey_PrivateKey","PrivateKey","signed","computeSignature","_ref","asyncToGenerator_default","regenerator_default","mark","_callee","wrap","_context","prev","abrupt","sign","_x","_x2","_x3","getEcDSAPublicKey","getEdDSAPublicKey","getSM2PublicKey","getPublicKey","INVALID_ADDR","keyFromPrivate","keyFromSecret","pubToString","computeEcDSASignature","computeEdDSASignature","computeSM2Signature","canonical","toArrayLike","toHex","toLowerCase","external_wif_","keyType","wifkey","mnemonic","derivePath","split","seed","pri","fromMasterSeed","derive","keyDeserializers","defaultKeyDeserializer","DefaultKeyDeserializer","registerKeyDeserializer","deserializer","deserializeFromJson","external","deserialize","getType","ParameterType","ParameterTypeVal","AnonymousCredential_Issuer","Issuer","AnonymousCredential_CryptoSuite","sk","AnonymousCredential_SecretKey","Rand","GenerateSk","GenerateIssuerPublicKey","AttributeName","GenerateAttr","Nym","attrs","e","getRandBN","B","ECP","copy","g1","add","PAIR","G1mul","h0","attr","h","A","tmp","BIG","invmodp","order","cred","AnonymousCredential_Credential","Set","AnonymousCredential_IssuerPublicKey","COPY","CR","VerifyCredentialRequest","AnonymousCredential_User","User","ipk","nonce","h_sk","t1","C","hashToBN","S","modmul","mod","pi","genAttrBN","Cred","wg2e","ECP2","w","G2mul","g2","sig","affine","left","ate","fexp","right","equals","Copy","D","r1","A_","r3","_e","modneg","_A","r2","_r2","B_","s_","r_a","r_e","r_r2","r_r3","r_s_","r_sk","E","t2","_i","c_","s_sk","s_a","_i2","sub","s_e","s_r2","s_r3","s_s_","proof","O","g2Dup","_t1","_t2","c1","c2","comp","CryptoSuite","ctx","external_milagro_crypto_js_","rng","RAND","getG1Generator","getG2Generator","getOrder","x","y","rcopy","ROM_CURVE","CURVE_Gx","CURVE_Gy","setxy","qx","FP2","qy","CURVE_Pxa","CURVE_Pxb","bset","CURVE_Pya","CURVE_Pyb","CURVE_Order","clean","randomnum","all","_len","points","_key","forEach","isArray","pp","toBytes","H","HASH256","process_array","R","fromBytes","HAttr","getRandG1","AnonymousCredential_CryptoBase","CryptoBase","_CryptoBase","SecretKey","_this","setValue","_g1","_g2","SetBasicValue","_CryptoBase2","IssuerPublicKey","_this2","target","SetAttrValue","_i3","genAttrElement","_C","_CryptoBase3","Credential","_this3","Ecies_Ecies","Ecies","Curve","encAlg","hashAlg","digestSize","keyFormat","compact","keyPair","genKeyPair","alloc","priv","getPrivate","pub","privHex","pubkey","_iv","publicB","tmpKP","gTilde","hTilde","mul","encode","PEH","derivedKeyArray","kdf2","derivedKey","setAutoPadding","msgCipher","external_pkcs7_","iv2","plain","unpad","hashFunc","byteLen","ceil","offset","counter","I2OSP","digest","hEnd","allocUnsafe","writeUIntBE","Fixed64","f","Fixed64Size","AbiFunction","returntype","getName","args","j","VmType","parameter_Parameter","Parameter","vmType","version","author","email","description","codeVersion","payload_payload","InvokeCode","I128_SIZE","int128_I128","I128","U128","fromHexstr","bigPow","pow","pow128","maxI128","minus","minI128","negated","I128FromInt","i128","oneBits128","putUint64","I128FromBigInt","valBN","isGreaterThan","isLessThan","plus","bufRArray","Struct","list","scriptBuilder_pushBool","PUSHT","PUSHF","scriptBuilder_pushInt","biHex","scriptBuilder_pushBigNum","isEqualTo","toNumber","scriptBuilder_getStructBytes","ByteArray","scriptBuilder_getMapBytes","Map","keys","k","getValue","Integer","Long","scriptBuilder_pushMap","NEWMAP","TOALTSTACK","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","DUPFROMALTSTACK","scriptBuilder_pushParam","SETITEM","FROMALTSTACK","pushParam","serialize","Boolean","BOOLOR","convertMap","map_default","PACK","ADD","scriptBuilder_serializeAbiFunction","abiFunction","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","scriptBuilder_createCodeParamsScript","convertArray","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","map","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","keys_default","pVal","set","deserializeItem","readBoolean","ele","_length","TransactionAttributeUsage","createCodeParamsScript","abi_struct","structBytes","scriptBuilder_buildSmartContractParam","functionName","mapBytes","buildWasmContractParam","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","writeString","Int","writeVarBytes","writeAddress","writeBool","writeVarUint","writeUint16","writeUint32","writeUint64","writeI128","putLittleEndianUint","start","TxType","txAttribute_TransactionAttribute","TransactionAttribute","usage","Script","DescriptionUrl","Description","Nonce","ss","dataLen","txSignature_TxSignature","TxSignature","invocationScript","sigData","verificationScript","pubKeys","M","getParamsFromProgram","info","end","_sr","getProgramInfo","signAsync","t0","sent","Fee","payer","fee","fixed64","transaction_Transaction","Transaction","txAttributes","gasPrice","gasLimit","serializeUnsignedData","serializeSignedData","payload","ProgramHexString","ProgramSha256","tx","Invoke","invokeCode","Deploy","deployCode","attributeLength","txAttribute","sigLength","transfer_Transfer","_Transaction","Transfer","makeNativeContractTx","funcName","contractAddr","SYSCALL","createCodeParamScript","obj","SWAP","APPEND","buildNativeCodeScript","NEWSTRUCT","ONT_CONTRACT","ONG_CONTRACT","getTokenContract","tokenType","verifyAmount","lte","ontAssetTxBuilder_makeTransferTx","to","struct","contract","method","makeTransferStateTx","states","structs","state","makeTransferToMany","amounts","makeWithdrawOngTx","ontAssetTxBuilder_makeQueryAllowanceTx","asset","makeQueryBalanceTx","deserializeTransferTx","contractIndex1","lastIndexOf","contractIndex2","contractIndex","max","paramsEnd","methodStr","_methodStr","numTmp","_from","_to","_numTmp","_amount","ONTID_CONTRACT","ONTID_METHOD","regIDWithPublicKey","regIDWithAttributes","addAttributes","removeAttribute","getAttributes","getDDO","addKey","removeKey","getPublicKeys","addRecovery","changeRecovery","getKeyState","buildRegisterOntidTx","buildRegIdWithAttributes","attributes","attrLen","buildAddAttributeTx","buildRemoveAttributeTx","buildGetAttributesTx","buildGetDDOTx","buildAddControlKeyTx","newPk","userKey","p1","p2","p3","buildRemoveControlKeyTx","pk2Remove","sender","buildGetPublicKeysTx","buildAddRecoveryTx","recovery","buildChangeRecoveryTx","newrecovery","oldrecovery","buildGetPublicKeyStateTx","pkId","Default_params","Action","Version","Type","Op","transactionBuilder_signTransaction","signTransactionAsync","createAsync","transactionBuilder_addSign","transactionBuilder_equalPks","pks1","pks2","transactionBuilder_signTx","signData","transactionBuilder_makeInvokeTransaction","abiFunc","abi_abiFunction","APPCALL","buildWasmVmInvokeCode","contractaddress","makeWasmVmInvokeTransaction","contractAddress","InvokeWasm","toConsumableArray_default","makeDeployCodeTransaction","desp","dc","NEOVM_TYPE","buildTxParam","PreExec","serialized","assign_default","Data","buildRpcParam","jsonrpc","buildRestfulParam","sendRawTxRestfulUrl","preExec","charAt","restUrl","transferStringParameter","pType","transformMapParameter","transformArrayParameter","typeof_default","transformParameter","arg","buildParamsByJson","paramsList","functions","operation","temp","makeTransactionsByJson","action","invokeConfig","contractHash","txList","buildNativeTxFromJson","_tx","funcArgs","_payer","account_HDKey","account_Account","Account","toJsonObj","extends_default","lock","enc-alg","isDefault","signatureScheme","password","exportPrivateKey","encryptedPrivateKey","saltBase64","account","trim","parseJsonObj","JSON","extra","urlConsts","RestClient","encodeURIComponent","hexData","userId","concatParams","body","txHash","codeHash","height","deferred_Deferred","Deferred","resolve","_resolve","reject","reason","_reject","_promise","promise_default","websocketBuilder_sendSubscribe","SubscribeEvent","SubscribeJsonBlock","SubscribeRawBlock","SubscribeBlockTxHashs","websocketBuilder_sendRawTransaction","websocketBuilder_getRawTransaction","Hash","Raw","websocketBuilder_getRawTransactionJson","websocketBuilder_getBlock","Height","websocketBuilder_getBlockJson","websocketBuilder_getBalance","Addr","websocketBuilder_getUnboundOng","websocketBuilder_getContract","websocketBuilder_getContractJson","websocketBuilder_getSmartCodeEvent","websocketBuilder_getBlockHeightByTxHash","websocketBuilder_getStorage","websocketBuilder_getMerkleProof","websocketBuilder_getAllowance","Asset","From","To","websocketBuilder_getBlockHash","websocketBuilder_getBlockTxsByHeight","websocketBuilder_getGrantOng","websocketBuilder_getMempoolTxState","websocketSender_WebsocketSender","WebsocketSender","debug","wsp","external_websocket_as_promised_","createWebSocket","socketUrl","html5_websocket_","attachRequestId","Id","extractRequestId","packMessage","unpackMessage","message","onOpen","addListener","onClose","onSend","onMessage","onError","response","close","open","sendRequest","requestId","generateReqId","finish","_x4","listener","onUnpackedMessage","websocketClient_WebsocketClient","WebsocketClient","autoClose","promises","notifyListener","raw","send","_ref2","_callee2","subscribeEvent","subscribeJsonBlock","subscribeRawBlock","subscribeBlockTxHashes","_context2","_ref3","_callee3","sendResult","deferred","waitNotify","_context3","Result","promise","_x10","_ref4","_callee4","_context4","_x11","_ref5","_callee5","_context5","_x12","_ref6","_callee6","_context6","_ref7","_callee7","_context7","_ref8","_callee8","_context8","_x13","_ref9","_callee9","_context9","_x14","_ref10","_callee10","_context10","_x15","_ref11","_callee11","_context11","_x16","_ref12","_callee12","_context12","_x17","_ref13","_callee13","_context13","_x18","_ref14","_callee14","_context14","_x19","_ref15","_callee15","_context15","_x20","_ref16","_callee16","_context16","_x21","_x22","_ref17","_callee17","_context17","_x23","_ref18","_callee18","_context18","_x24","_x25","_x26","_ref19","_callee19","_context19","_x27","_ref20","_callee20","_context20","_x28","_ref21","_callee21","_context21","_ref22","_callee22","_context22","_x29","_ref23","_callee23","_context23","_ref24","_callee24","_context24","_x30","_ref25","_callee25","_context25","_ref26","_callee26","_context26","_ref27","_callee27","_context27","_x32","TxHash","delete","warn","AbiInfo","entrypoint","attestClaimTxBuilder_abiInfo","abi_abiInfo","parseJson","events","attestClaimTxBuilder_contractHash","getHash","replace","attestClaimTxBuilder_contractAddress","buildCommitRecordTx","claimId","issuer","subject","getFunction","buildRevokeRecordTx","revokerOntid","name1","type1","buildGetRecordStatusTx","RevocationType","attestNotifyEvent_AttestNotifyEvent","AttestNotifyEvent","Desc","attestNotifyEvent_Result","State","GasConsumed","Notify","ContractAddress","States","ddo_PublicKeyWithId","PublicKeyWithId","ddo_DDOAttribute","DDOAttribute","ddo_DDO","DDO","ddo","pkLen","recoveryLen","message_Message","Message","metadata","messageId","external_uuid_","jwt","creator","parts","header","deserializeHeader","deserializePayload","deserializeJWT","payloadFromJSON","rest","stringified","_JSON$parse","jti","iss","issuedAt","iat","expireAt","exp","objectWithoutProperties_default","alg","fromLabelJWS","kid","retrievePublicKey","serializeUnsigned","verifyKeyOwnership","verifyExpiration","retrievePublicKeyState","_x5","serializeHeader","serializePayload","signatureEncoded","serializeJWT","typ","extractOntId","payloadToJSON","ontId","client","extractKeyId","rest_restClient","sendRawTransaction","_x6","_x7","fromHexLabel","_x8","_x9","Status","claim_Claim","_Message","Claim","useProof","get_default","checkAttest","getStatus","serializeProof","attesterId","subjectId","claim_GetStatusResponse","status","ATTESTED","issuerId","ver","@context","context","clm","content","clm-rev","revocation","GetStatusResponse","NOTFOUND","identity_ControlData","ControlData","_extends2","defineProperty_default","cd","identity_Identity","Identity","controls","control","toJson","identity","generateOntid","fromOntid","fromJson","TransactionNeo_TransactionNeo","TransactionNeo","scripts","serializeExclusiveData","inputs","outputs","getHashData","InvocationTransaction_InvocationTransaction","_TransactionNeo","InvocationTransaction","script","gas","NeoRpc_NeoRpc","NeoRpc","req","makeRequest","toHexString","Program_Program","Program","parameter","program","pks","SmartContract_SmartContract","SmartContract","addr","makeInvocationTransaction","attr1","attr2","TransactionInput_TransactionInput","TransactionInput","prevHash","prevIndex","input","TransactionOutput_TransactionOutput","TransactionOutput","assetId","scriptHash","output","readLong","RpcClient","oep8TxBuilder_Oep8State","Oep8State","tokenId","oep8TxBuilder_TransferFrom","TransferFrom","spender","FunctionNames","oep8TxBuilder_Oep8TxBuilder","Oep8TxBuilder","sendAddr","recvAddr","func","owner","compoundNum","wallet_Wallet","Wallet","defaultOntid","defaultAccountAddress","identities","accounts","createTime","wallet","toISOString","functionNames","oep4TxBuilder_formatBigNumParameter","valHex","oep4TxBuilder_Oep4State","Oep4State","oep4TxBuilder_Oep4TxBuilder","Oep4TxBuilder","sdk_HDKey","CONTRACT_HASH","NEO_NODE","sdk_SDK","SDK","node","SERVER_NODE","port","REST_PORT","restClient","SOCKET_PORT","socketClient","error","transformPassword","addIdentity","errResult","PreExec_ERROR","NETWORK_ERROR","_obj","SUCCESS","UNKNOWN_ONTID","wif","deserializeWIF","_obj2","_obj3","encryptedPrivateKeyObj","importIdentity","getDecryptError","walletStr","mnemonicHex","generateFromMnemonic","mnemonicEnc","decMne","importAccount","claimData","saltHex","claim","path","valueObj","Context","_obj4","serializePgp","addressObj","request","_obj5","token","fromAddress","toAddress","_result","_result2","_result3","_result4","identityDataStr","accountDataStr","_obj6","serializeWIF","keystore","keyStoreObj","_obj7","_obj8","getAllowance","getSmartCodeEvent","requiredSignatureNum","allRelatedPks","pubs","fromMultiPubKeys","_result5","txData","txDada","_result6","signedHash","recv","abiInfo","setParamsValue","makeInvokeTransaction","programFromParams","programFromPubKey","oep8","makeQueryBalanceOfTx","makeQueryBalancesTx","vals","makeQueryTotalBalanceTx","payerAddress","makeTransferTx","makeCompoundTx","oep4","queryBalanceOf","ins","cipherContent","setKeyPair","dec","governanceContractTxBuilder_contractAddress","makeRegisterCandidateTx","peerPubKey","keyNo","userAddr","initPos","makeUnregisterCandidateTx","makeApproveCandidateTx","makeRejectCandidateTx","makeVoteForPeerTx","peerPubKeys","posList","makeUnvoteForPeerTx","makeWithdrawTx","withdrawList","makeQuitNodeTx","makeChangeAuthorizationTx","maxAuthorize","makeSetPeerCostTx","peerCost","makeWithdrawFeeTx","makeAuthorizeForPeerTx","peerPubKeyList","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","makeUnauthorizeForPeerTx","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","makeAddInitPosTx","peerPubkey","makeReduceInitPosTx","makeWithdrawPeerUnboundOngTx","getStorage","governanceContractTxBuilder_PeerAttributes","getSplitFeeAddress","governanceContractTxBuilder_SplitFeeAddress","getAuthorizeInfo","governanceContractTxBuilder_AuthorizeInfo","getGovernanceView","viewRes","view","governanceView","governanceContractTxBuilder_GovernanceView","getPeerPoolMap","key1","key2","keyP","readInt","governanceContractTxBuilder_PeerPoolItem","getGlobalParam","governanceContractTxBuilder_GlobalParam","getTotalStake","governanceContractTxBuilder_TotalStake","getPeerUnboundOng","totalStake","blockHeight","block","timeStamp","getBlockHeight","getBlockJson","Header","Timestamp","stake","timeOffset","getConfiguration","governanceContractTxBuilder_Configuration","GovernanceView","txhash","g","PeerPoolItem","totalPos","PeerAttributes","t2PeerCost","t1PeerCost","tPeerCost","field1","field2","field3","field4","pr","SplitFeeAddress","sfa","AuthorizeInfo","consensusPos","freezePos","newPos","withdrawPos","withdrawFreezePos","withdrawUnfreezePos","ai","GlobalParam","gp","feeHexStr","candidateFeeStr","candidateFee","minStr","minInitState","candidateNumStr","candidateNum","posLimitStr","posLimit","aStr","bStr","yStr","yita","pStr","penalty","TotalStake","ts","Configuration","config","toInt","K","L","BlockMsgDelay","HashMsgDelay","PeerHandShakeTimeout","MaxBlockChangeView","token_Transfers","Transfers","stateLen","token_State","token_TokenTransfer","TokenTransfer","tf","bi","token_Contract","Contract","token_TransferFrom","oep5TxBuilder_Oep5Param","Oep5Param","toAcct","oep5TxBuilder_FunctionNames","oep5TxBuilder_Oep5TxBuilder","Oep5TxBuilder","oep5Param","oep5Params","src_ONT","TransactionBuilder","transactionBuilder_namespaceObject","OntAssetTxBuilder","ontAssetTxBuilder_namespaceObject","GovernanceTxBuilder","governanceContractTxBuilder_namespaceObject","utils","utils_namespaceObject","scrypt_namespaceObject","CONST","consts_namespaceObject","Token","token_namespaceObject","OntidContract","ontidContractTxBuilder_namespaceObject","rpcClient","Crypto","crypto_namespaceObject","ScriptBuilder","scriptBuilder_namespaceObject","NeoCore","neocore_namespaceObject","Oep4","oep4TxBuilder_namespaceObject","Oep8","oep8TxBuilder_namespaceObject","Oep5","oep5TxBuilder_namespaceObject"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 41);\n","module.exports = require(\"babel-runtime/helpers/createClass\");","module.exports = require(\"babel-runtime/helpers/classCallCheck\");","module.exports = require(\"babel-runtime/core-js/json/stringify\");","module.exports = require(\"babel-runtime/regenerator\");","module.exports = require(\"babel-runtime/core-js/get-iterator\");","module.exports = require(\"babel-runtime/helpers/asyncToGenerator\");","module.exports = require(\"axios\");","module.exports = require(\"crypto-js\");","module.exports = require(\"bignumber.js\");","module.exports = require(\"babel-runtime/core-js/object/get-prototype-of\");","module.exports = require(\"babel-runtime/helpers/possibleConstructorReturn\");","module.exports = require(\"babel-runtime/helpers/inherits\");","module.exports = require(\"babel-runtime/core-js/map\");","module.exports = require(\"elliptic\");","module.exports = require(\"bip39\");","module.exports = require(\"base64-url\");","module.exports = require(\"sm.js\");","module.exports = require(\"crypto\");","module.exports = require(\"babel-runtime/helpers/extends\");","module.exports = require(\"base-58\");","module.exports = require(\"long\");","module.exports = require(\"babel-runtime/helpers/get\");","module.exports = require(\"babel-runtime/core-js/promise\");","module.exports = require(\"js-sha3\");","module.exports = require(\"secure-random\");","module.exports = require(\"babel-runtime/core-js/object/keys\");","module.exports = require(\"babel-runtime/core-js/object/assign\");","module.exports = require(\"babel-runtime/helpers/typeof\");","module.exports = require(\"babel-runtime/helpers/defineProperty\");","module.exports = require(\"@ont-community/hdkey-secp256r1\");","module.exports = require(\"wif\");","module.exports = require(\"pkcs7\");","module.exports = require(\"babel-runtime/core-js/array/from\");","module.exports = require(\"babel-runtime/core-js/number/is-safe-integer\");","module.exports = require(\"scrypt-async\");","module.exports = require(\"milagro-crypto-js\");","module.exports = require(\"babel-runtime/helpers/toConsumableArray\");","module.exports = require(\"@ont-community/html5-websocket\");","module.exports = require(\"websocket-as-promised\");","module.exports = require(\"babel-runtime/helpers/objectWithoutProperties\");","module.exports = require(\"uuid\");","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nexport enum ERROR_CODE {\r\n    SUCCESS\t            =     0, // 成功\r\n    SESSION_EXPIRED     = 41001,   // 会话无效或已过期（ 需要重新登录） |\r\n    SERVICE_CEILING     = 41002,   // 达到服务上限 |\r\n    ILLEGAL_DATAFORMAT  = 41003,   // 不合法数据格式 |\r\n    INVALID_VERSION     = 41004,   // 不合法的版本 |\r\n    INVALID_METHOD      = 42001,   // 无效的方法 |\r\n    INVALID_PARAMS      = 42002,   // 无效的参数 |\r\n    INVALID_TRANSACTION = 43001,   // 无效的交易 |\r\n    INVALID_ASSET       = 43002,   // 无效的资产 |\r\n    INVALID_BLOCK       = 43003,   // 无效的块 |\r\n    UNKNOWN_TRANSACTION = 44001,   // 找不到交易 |\r\n    UNKNOWN_ASSET       = 44002,   // 找不到资产 |\r\n    UNKNOWN_BLOCK       = 44003,   // 找不到块 |\r\n    UNKNWN_CONTRACT     = 44004,   // 找不到合约 |\r\n    INTERNAL_ERROR      = 45001,   // 内部错误 |\r\n    SMARTCODE_ERROR     = 47001,   // 智能合约错误 |\r\n\r\n    UNKNOWN_ONTID       = 51000,   // 不存在的ONT ID,\r\n    NETWORK_ERROR       = 52000,   // 网络错误,\r\n    Decrypto_ERROR      = 53000,    // 解密错误,\r\n    INVALID_ADDR        = 53001,   // 地址验证失败\r\n\r\n    PreExec_ERROR = 54000   // 预执行错误\r\n}\r\n","/*\r\n* Copyright (C) 2018 The ontology Authors\r\n* This file is part of The ontology library.\r\n*\r\n* The ontology is free software: you can redistribute it and/or modify\r\n* it under the terms of the GNU Lesser General Public License as published by\r\n* the Free Software Foundation, either version 3 of the License, or\r\n* (at your option) any later version.\r\n*\r\n* The ontology is distributed in the hope that it will be useful,\r\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n* GNU Lesser General Public License for more details.\r\n*\r\n* You should have received a copy of the GNU Lesser General Public License\r\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nenum OPCODE {\r\n    // Constants\r\n    PUSH0 = 0x00, // An empty array of bytes is pushed onto the stack.\r\n    PUSHF = PUSH0,\r\n    PUSHBYTES1 = 0x01, // 0x01-0x4B The next bytes is data to be pushed onto the stack\r\n    PUSHBYTES75 = 0x4B,\r\n    PUSHDATA1 = 0x4C, // The next byte contains the number of bytes to be pushed onto the stack.\r\n    PUSHDATA2 = 0x4D, // The next two bytes contain the number of bytes to be pushed onto the stack.\r\n    PUSHDATA4 = 0x4E, // The next four bytes contain the number of bytes to be pushed onto the stack.\r\n    PUSHM1 = 0x4F, // The number -1 is pushed onto the stack.\r\n    PUSH1 = 0x51, // The number 1 is pushed onto the stack.\r\n    PUSHT = PUSH1,\r\n    PUSH2 = 0x52, // The number 2 is pushed onto the stack.\r\n    PUSH3 = 0x53, // The number 3 is pushed onto the stack.\r\n    PUSH4 = 0x54, // The number 4 is pushed onto the stack.\r\n    PUSH5 = 0x55, // The number 5 is pushed onto the stack.\r\n    PUSH6 = 0x56, // The number 6 is pushed onto the stack.\r\n    PUSH7 = 0x57, // The number 7 is pushed onto the stack.\r\n    PUSH8 = 0x58, // The number 8 is pushed onto the stack.\r\n    PUSH9 = 0x59, // The number 9 is pushed onto the stack.\r\n    PUSH10 = 0x5A, // The number 10 is pushed onto the stack.\r\n    PUSH11 = 0x5B, // The number 11 is pushed onto the stack.\r\n    PUSH12 = 0x5C, // The number 12 is pushed onto the stack.\r\n    PUSH13 = 0x5D, // The number 13 is pushed onto the stack.\r\n    PUSH14 = 0x5E, // The number 14 is pushed onto the stack.\r\n    PUSH15 = 0x5F, // The number 15 is pushed onto the stack.\r\n    PUSH16 = 0x60, // The number 16 is pushed onto the stack.\r\n\r\n    // Flow control\r\n    NOP = 0x61, // Does nothing.\r\n    JMP = 0x62,\r\n    JMPIF = 0x63,\r\n    JMPIFNOT = 0x64,\r\n    CALL = 0x65,\r\n    RET = 0x66,\r\n    APPCALL = 0x67,\r\n    SYSCALL = 0x68,\r\n    TAILCALL = 0x69,\r\n    DUPFROMALTSTACK = 0x6A,\r\n\r\n    // Stack\r\n    TOALTSTACK = 0x6B, // Puts the input onto the top of the alt stack. Removes it from the main stack.\r\n    FROMALTSTACK = 0x6C, // Puts the input onto the top of the main stack. Removes it from the alt stack.\r\n    XDROP = 0x6D,\r\n    XSWAP = 0x72,\r\n    XTUCK = 0x73,\r\n    DEPTH = 0x74, // Puts the number of stack items onto the stack.\r\n    DROP = 0x75, // Removes the top stack item.\r\n    DUP = 0x76, // Duplicates the top stack item.\r\n    NIP = 0x77, // Removes the second-to-top stack item.\r\n    OVER = 0x78, // Copies the second-to-top stack item to the top.\r\n    PICK = 0x79, // The item n back in the stack is copied to the top.\r\n    ROLL = 0x7A, // The item n back in the stack is moved to the top.\r\n    ROT = 0x7B, // The top three items on the stack are rotated to the left.\r\n    SWAP = 0x7C, // The top two items on the stack are swapped.\r\n    TUCK = 0x7D, // The item at the top of the stack is copied and inserted before the second-to-top item.\r\n\r\n    // Splice\r\n    CAT = 0x7E, // Concatenates two strings.\r\n    SUBSTR = 0x7F, // Returns a section of a string.\r\n    LEFT = 0x80, // Keeps only characters left of the specified point in a string.\r\n    RIGHT = 0x81, // Keeps only characters right of the specified point in a string.\r\n    SIZE = 0x82, // Returns the length of the input string.\r\n\r\n    // Bitwise logic\r\n    INVERT = 0x83, // Flips all of the bits in the input.\r\n    AND = 0x84, // Boolean and between each bit in the inputs.\r\n    OR = 0x85, // Boolean or between each bit in the inputs.\r\n    XOR = 0x86, // Boolean exclusive or between each bit in the inputs.\r\n    EQUAL = 0x87, // Returns 1 if the inputs are exactly equal, 0 otherwise.\r\n    // EQUALVERIFY = 0x88, // Same as EQUAL, but runs VERIFY afterward.\r\n    // RESERVED1 = 0x89, // Transaction is invalid unless occuring in an unexecuted IF branch\r\n    // RESERVED2 = 0x8A, // Transaction is invalid unless occuring in an unexecuted IF branch\r\n\r\n    // Arithmetic\r\n    // Note: Arithmetic inputs are limited to signed 32-bit integers, but may overflow their output.\r\n    INC = 0x8B, // 1 is added to the input.\r\n    DEC = 0x8C, // 1 is subtracted from the input.\r\n    // SAL           = 0x8D, // The input is multiplied by 2.\r\n    // SAR           = 0x8E, // The input is divided by 2.\r\n    NEGATE = 0x8F, // The sign of the input is flipped.\r\n    ABS = 0x90, // The input is made positive.\r\n    NOT = 0x91, // If the input is 0 or 1, it is flipped. Otherwise the output will be 0.\r\n    NZ = 0x92, // Returns 0 if the input is 0. 1 otherwise.\r\n    ADD = 0x93, // a is added to b.\r\n    SUB = 0x94, // b is subtracted from a.\r\n    MUL = 0x95, // a is multiplied by b.\r\n    DIV = 0x96, // a is divided by b.\r\n    MOD = 0x97, // Returns the remainder after dividing a by b.\r\n    SHL = 0x98, // Shifts a left b bits, preserving sign.\r\n    SHR = 0x99, // Shifts a right b bits, preserving sign.\r\n    BOOLAND = 0x9A, // If both a and b are not 0, the output is 1. Otherwise 0.\r\n    BOOLOR = 0x9B, // If a or b is not 0, the output is 1. Otherwise 0.\r\n    NUMEQUAL = 0x9C, // Returns 1 if the numbers are equal, 0 otherwise.\r\n    NUMNOTEQUAL = 0x9E, // Returns 1 if the numbers are not equal, 0 otherwise.\r\n    LT = 0x9F, // Returns 1 if a is less than b, 0 otherwise.\r\n    GT = 0xA0, // Returns 1 if a is greater than b, 0 otherwise.\r\n    LTE = 0xA1, // Returns 1 if a is less than or equal to b, 0 otherwise.\r\n    GTE = 0xA2, // Returns 1 if a is greater than or equal to b, 0 otherwise.\r\n    MIN = 0xA3, // Returns the smaller of a and b.\r\n    MAX = 0xA4, // Returns the larger of a and b.\r\n    WITHIN = 0xA5, // Returns 1 if x is within the specified range (left-inclusive), 0 otherwise.\r\n\r\n    // Crypto\r\n    // RIPEMD160 = 0xA6, // The input is hashed using RIPEMD-160.\r\n    SHA1 = 0xA7, // The input is hashed using SHA-1.\r\n    SHA256 = 0xA8, // The input is hashed using SHA-256.\r\n    HASH160 = 0xA9,\r\n    HASH256 = 0xAA,\r\n    // tslint:disable-next-line:max-line-length\r\n    CHECKSIG = 0xAC, // The entire transaction's outputs inputs and script (from the most recently-executed CODESEPARATOR to the end) are hashed. The signature used by CHECKSIG must be a valid signature for this hash and public key. If it is 1 is returned 0 otherwise.\r\n    // tslint:disable-next-line:max-line-length\r\n    CHECKMULTISIG = 0xAE, // For each signature and public key pair CHECKSIG is executed. If more public keys than signatures are listed some key/sig pairs can fail. All signatures need to match a public key. If all signatures are valid 1 is returned 0 otherwise. Due to a bug one extra unused value is removed from the stack.\r\n\r\n    // Array\r\n\t// tslint:disable:indent\r\n    ARRAYSIZE  = 0xC0,\r\n\tPACK       = 0xC1,\r\n\tUNPACK     = 0xC2,\r\n\tPICKITEM   = 0xC3,\r\n\tSETITEM    = 0xC4,\r\n\tNEWARRAY   = 0xC5,\r\n\tNEWSTRUCT  = 0xC6,\r\n\tNEWMAP     = 0xC7,\r\n\tAPPEND     = 0xC8,\r\n\tREVERSE    = 0xC9,\r\n\tREMOVE     = 0xCA,\r\n\tHASKEY     = 0xCB,\r\n\tKEYS       = 0xCC,\r\n\tVALUES     = 0xCD,\r\n\r\n\t// Exception\r\n\tTHROW = 0xF0,\r\n\tTHROWIFNOT = 0xF1\r\n}\r\n\r\nexport default OPCODE;\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\n// export const ADDR_VERSION = '41';\r\nexport const ADDR_VERSION = '17';\r\n\r\nexport const DEFAULT_SCRYPT = {\r\n    cost: 4096, // 除以2时间减半\r\n    blockSize: 8,\r\n    parallel: 8,\r\n    size: 64\r\n};\r\n\r\n// specified by oep, same as bip38\r\nexport const OEP_HEADER = '0142';\r\n\r\nexport const OEP_FLAG = 'e0';\r\n\r\n// Ont://nativeMethod?param1=xxx&param2=yyy\r\nexport const WEBVIEW_SCHEME = 'Ont';\r\n\r\nexport const DEFAULT_ALGORITHM = {\r\n    algorithm: 'ECDSA',\r\n    parameters: {\r\n        curve: 'P-256' // also called secp256r1\r\n    }\r\n};\r\n\r\nexport const DEFAULT_SM2_ID = '1234567812345678';\r\n\r\nexport const TEST_NODE = 'polaris1.ont.io'; // 0.9\r\n// export const TEST_NODE = '139.219.129.26'; // 0.81\r\n// export const TEST_NODE = '192.168.50.74';\r\n// export const TEST_NODE = '127.0.0.1';\r\n\r\nexport const MAIN_NODE = 'dappnode1.ont.io';\r\n\r\nexport const HTTP_REST_PORT = '20334';\r\nexport const HTTP_WS_PORT = '20335';\r\nexport const HTTP_JSON_PORT = '20336';\r\n\r\nexport const REST_API = {\r\n    getBalance: '/api/v1/balance',\r\n    sendRawTx: '/api/v1/transaction',\r\n    getMerkleProof: '/api/v1/merkleproof' // end with /txHash\r\n};\r\n\r\nexport const ONT_NETWORK = {\r\n    MAIN: 'MainNet',\r\n    TEST: 'TestNet'\r\n};\r\n\r\nexport const TEST_ONT_URL = {\r\n    SOCKET_URL: `ws://${TEST_NODE}:${HTTP_WS_PORT}`,\r\n\r\n    RPC_URL: `http://${TEST_NODE}:${HTTP_JSON_PORT}`,\r\n\r\n    REST_URL: `http://${TEST_NODE}:${HTTP_REST_PORT}`,\r\n\r\n    sendRawTxByRestful: `http://${TEST_NODE}:${HTTP_REST_PORT}${REST_API.sendRawTx}`\r\n};\r\n\r\nexport const MAIN_ONT_URL = {\r\n    SOCKET_URL: `ws://${MAIN_NODE}:${HTTP_WS_PORT}`,\r\n\r\n    RPC_URL: `http://${MAIN_NODE}:${HTTP_JSON_PORT}/`,\r\n\r\n    REST_URL: `http://${MAIN_NODE}:${HTTP_REST_PORT}/`,\r\n\r\n    sendRawTxByRestful: `http://${TEST_NODE}:${HTTP_REST_PORT}${REST_API.sendRawTx}`\r\n\r\n};\r\n\r\nexport const TOKEN_TYPE = {\r\n    ONT: 'ONT',\r\n    ONG: 'ONG'\r\n};\r\n\r\nexport const DEFAULT_GAS_LIMIT = 30000;\r\n\r\nexport const NATIVE_INVOKE_NAME = 'Ontology.Native.Invoke';\r\n\r\nexport const TX_MAX_SIG_SIZE = 16;\r\n\r\n// tslint:disable-next-line:quotemark\r\nexport const ONT_BIP44_PATH = \"m/44'/1024'/0'/0/0\";\r\n\r\nexport const UNBOUND_GENERATION_AMOUNT = [5, 4, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];\r\n\r\nexport const UNBOUND_TIME_INTERVAL = 31536000;\r\n\r\nexport const ONT_TOTAL_SUPPLY = 1000000000;\r\n\r\nexport const GENESIS_BLOCK_TIMESTAMP = 1530316800;\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\nimport axios from 'axios';\r\nimport * as bip39 from 'bip39';\r\nimport * as cryptoJS from 'crypto-js';\r\nimport * as Long from 'long';\r\nimport * as secureRandom from 'secure-random';\r\nimport { ONT_TOTAL_SUPPLY, UNBOUND_GENERATION_AMOUNT, UNBOUND_TIME_INTERVAL, WEBVIEW_SCHEME } from './consts';\r\nimport { ERROR_CODE } from './error';\r\n/**\r\n * Turn hex string into array buffer\r\n * @param str hex string\r\n */\r\nexport function hexstring2ab(str: string): number[] {\r\n    const result = [];\r\n\r\n    while (str.length >= 2) {\r\n        result.push(parseInt(str.substring(0, 2), 16));\r\n        str = str.substring(2, str.length);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * Turn array buffer into hex string\r\n * @param arr Array like value\r\n */\r\nexport function ab2hexstring(arr: any): string {\r\n    let result: string = '';\r\n    const uint8Arr: Uint8Array = new Uint8Array(arr);\r\n    for (let i = 0; i < uint8Arr.byteLength; i++) {\r\n        let str = uint8Arr[i].toString(16);\r\n        str = str.length === 0\r\n            ? '00'\r\n            : str.length === 1\r\n                ? '0' + str\r\n                : str;\r\n        result += str;\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * Turn ArrayBuffer or array-like oject into normal string\r\n * @param buf\r\n */\r\nexport function ab2str(buf: ArrayBuffer | number[]): string {\r\n    return String.fromCharCode.apply(null, new Uint8Array(buf));\r\n}\r\n\r\n/**\r\n * Turn normal string into ArrayBuffer\r\n * @param str Normal string\r\n */\r\nexport function str2ab(str: string) {\r\n    const buf = new ArrayBuffer(str.length); // 每个字符占用1个字节\r\n    const bufView = new Uint8Array(buf);\r\n    for (let i = 0, strLen = str.length; i < strLen; i++) {\r\n        bufView[i] = str.charCodeAt(i);\r\n    }\r\n    return buf;\r\n}\r\n\r\n/**\r\n * Turn normal string into hex string\r\n * @param str Normal string\r\n */\r\nexport function str2hexstr(str: string) {\r\n    return ab2hexstring(str2ab(str));\r\n}\r\n\r\n/**\r\n * Turn hex string into normal string\r\n * @param str Hex string\r\n */\r\nexport function hexstr2str(str: string) {\r\n    return ab2str(hexstring2ab(str));\r\n}\r\n\r\n/**\r\n * return the (length of bytes) + bytes\r\n * @param hex Hex string\r\n */\r\nexport function hex2VarBytes(hex: string) {\r\n    let result = '';\r\n    result += num2VarInt(hex.length / 2);\r\n    result += hex;\r\n    return result;\r\n}\r\n\r\n/**\r\n * return the length of string(bytes) + string(bytes)\r\n * @param str Normal string\r\n */\r\nexport function str2VarBytes(str: string) {\r\n    let result = '';\r\n    const hex = str2hexstr(str);\r\n    const hexLen = num2VarInt(hex.length / 2);\r\n    result += hexLen;\r\n    result += hex;\r\n    return result;\r\n}\r\n\r\n/**\r\n * return the byte of boolean value\r\n * @param v\r\n */\r\nexport function bool2VarByte(v: boolean) {\r\n    return v ? '01' : '00';\r\n}\r\n\r\n/**\r\n * Do xor operation with two strings\r\n * @param str1 Hex string\r\n * @param str2 Hex string\r\n */\r\nexport function hexXor(str1: string, str2: string): string {\r\n    if (str1.length !== str2.length) {\r\n        throw new Error('strings are disparate lengths');\r\n    }\r\n    if (str1.length % 2 !== 0) {\r\n        throw new Error('strings must be hex');\r\n    }\r\n\r\n    const result = new ArrayBuffer(str1.length / 2);\r\n    const result8 = new Uint8Array(result);\r\n    for (let i = 0; i < str1.length; i += 2) {\r\n        // tslint:disable-next-line:no-bitwise\r\n        result8[i / 2] = (parseInt(str1.substr(i, 2), 16) ^ parseInt(str2.substr(i, 2), 16));\r\n    }\r\n    return ab2hexstring(result);\r\n}\r\n\r\n/**\r\n * Converts a number to a big endian hexstring of a suitable size, optionally little endian\r\n * @param {number} num\r\n * @param {number} size - The required size in bytes, eg 1 for Uint8, 2 for Uint16. Defaults to 1.\r\n * @param {boolean} littleEndian - Encode the hex in little endian form\r\n * @return {string}\r\n */\r\nexport const num2hexstring = (num: number, size = 1, littleEndian = false) => {\r\n    if (num < 0) {\r\n        throw new RangeError('num must be >=0');\r\n    }\r\n    if (size % 1 !== 0) {\r\n        throw new Error('size must be a whole integer');\r\n    }\r\n    if (!Number.isSafeInteger(num)) {\r\n        throw new RangeError(`num (${num}) must be a safe integer`);\r\n    }\r\n\r\n    size = size * 2;\r\n    let hexstring = num.toString(16);\r\n    hexstring = hexstring.length % size === 0 ? hexstring : ('0'.repeat(size) + hexstring).substring(hexstring.length);\r\n    if (littleEndian) {\r\n        hexstring = reverseHex(hexstring);\r\n    }\r\n    return hexstring;\r\n};\r\n\r\n/**\r\n * Converts a number to a hex\r\n * @param {number} num - The number\r\n * @returns {string} hexstring of the variable Int.\r\n */\r\nexport const num2VarInt = (num: number) => {\r\n    if (num < 0xfd) {\r\n        return num2hexstring(num);\r\n    } else if (num <= 0xffff) {\r\n        // uint16\r\n        return 'fd' + num2hexstring(num, 2, true);\r\n    } else if (num <= 0xffffffff) {\r\n        // uint32\r\n        return 'fe' + num2hexstring(num, 4, true);\r\n    } else {\r\n        // uint64\r\n        return 'ff' + num2hexstring(num, 8, true);\r\n    }\r\n};\r\n\r\n/**\r\n * Reverses a hex string, 2 chars as 1 byte\r\n * @example\r\n * reverseHex('abcdef') = 'efcdab'\r\n * @param {string} hex - HEX string\r\n * @return {string} reversed hex string.\r\n */\r\nexport const reverseHex = (hex: string) => {\r\n    if (hex.length % 2 !== 0) {\r\n        throw new Error(`Incorrect Length: ${hex}`);\r\n    }\r\n    let out = '';\r\n    for (let i = hex.length - 2; i >= 0; i -= 2) {\r\n        out += hex.substr(i, 2);\r\n    }\r\n    return out;\r\n};\r\n\r\nexport function bigIntFromBytes(bytes: string): Long {\r\n    const buff = Buffer.from(bytes, 'hex');\r\n    let data = Array.from(buff.subarray(0));\r\n    const b = data[data.length - 1];\r\n\r\n    if (b >> 7 === 1) {\r\n        data = data.concat(Array(8 - data.length).fill(255));\r\n    }\r\n    return Long.fromBytesLE(data);\r\n}\r\n\r\nexport function bigIntToBytes(value: Long) {\r\n    let data = value.toBytesLE();\r\n    const negData = value.neg().toBytesLE();\r\n    let stop;\r\n    if (value.isNegative()) {\r\n        stop = 255;\r\n    } else {\r\n        stop = 0;\r\n    }\r\n    let b = stop;\r\n    let pos = 0;\r\n    for (let i = data.length - 1; i >= 0; i--) {\r\n        if (data[i] !== stop) {\r\n            b = value.isNegative() ? negData[i] : data[i];\r\n            pos = i + 1;\r\n            break;\r\n        }\r\n    }\r\n    data = data.slice(0, pos);\r\n\r\n    if (b >> 7 === 1) {\r\n        data.push(value.isNegative() ? 255 : 0);\r\n    }\r\n    return new Buffer(data).toString('hex');\r\n}\r\n\r\n/**\r\n * @class StringReader\r\n * @classdesc A string helper used to read given string as bytes.2 chars as one byte.\r\n * @param {string} str - The string to read.\r\n */\r\nexport class StringReader {\r\n    str: string;\r\n    pos: number;\r\n    size: number;\r\n    constructor(str = '') {\r\n        if (str.length % 2 !== 0) {\r\n            throw new Error('Param\\'s length is not even.');\r\n        }\r\n        this.str = str;\r\n        this.pos = 0;\r\n        this.size = this.str.length / 2;\r\n    }\r\n\r\n    /**\r\n     * Checks if reached the end of the string.\r\n     */\r\n    isEmpty() {\r\n        return this.pos >= this.str.length;\r\n    }\r\n\r\n    /**\r\n     * Reads some bytes.\r\n     * @param {number} bytes - Number of bytes to read\r\n     */\r\n    read(bytes: number) {\r\n        if (this.isEmpty()) {\r\n            throw new Error('StringReader reached the end.');\r\n        }\r\n        const out = this.str.substr(this.pos, bytes * 2);\r\n        this.pos += bytes * 2;\r\n        return out;\r\n    }\r\n\r\n    unreadBytes(bytes: number) {\r\n        if ((this.pos - bytes * 2) < 0) {\r\n            throw new Error('Can not unread too many bytes.');\r\n        }\r\n        this.pos -= bytes * 2;\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Reads string terminated by NULL.\r\n     */\r\n    readNullTerminated(): string {\r\n        const index = this.str.indexOf('00', this.pos);\r\n        if (index === -1) {\r\n            throw new Error('No ending NULL found');\r\n        }\r\n\r\n        const out = this.str.substring(this.pos, index);\r\n        this.pos = index + 2;\r\n        return out;\r\n    }\r\n\r\n    readNextByte() {\r\n        return this.read(1);\r\n    }\r\n\r\n    /**\r\n     * First, read one byte as the length of bytes to read. Then read the following bytes.\r\n     */\r\n    readNextBytes() {\r\n        const bytesToRead = this.readNextLen();\r\n        if (bytesToRead === 0) {\r\n            return '';\r\n        }\r\n\r\n        return this.read(bytesToRead);\r\n    }\r\n\r\n    /**\r\n     * Reads one byte as int, which may indicates the length of following bytes to read.\r\n     * @returns {number}\r\n     */\r\n    readNextLen() {\r\n        let len = parseInt(this.read(1), 16);\r\n\r\n        if (len === 0xfd) {\r\n            len = parseInt(reverseHex(this.read(2)), 16);\r\n        } else if (len === 0xfe) {\r\n            len = parseInt(reverseHex(this.read(4)), 16);\r\n        } else if (len === 0xff) {\r\n            len = parseInt(reverseHex(this.read(8)), 16);\r\n        }\r\n\r\n        return len;\r\n    }\r\n\r\n    readVarUint() {\r\n        return this.readNextLen();\r\n    }\r\n\r\n    /**\r\n     * Read Uint8\r\n     */\r\n    readUint8() {\r\n        return parseInt(reverseHex(this.read(1)), 16);\r\n    }\r\n\r\n    /**\r\n     * read 2 bytes as uint16 in littleEndian\r\n     */\r\n    readUint16() {\r\n        return parseInt(reverseHex(this.read(2)), 16);\r\n    }\r\n\r\n    /**\r\n     * Read 4 bytes as uint32 in littleEndian\r\n     */\r\n    readUint32() {\r\n        return parseInt(reverseHex(this.read(4)), 16);\r\n    }\r\n\r\n    /**\r\n     * Read 8 bytes as uint64 in littleEndian\r\n     */\r\n    readUint64() {\r\n        return parseInt(reverseHex(this.read(8)), 16);\r\n    }\r\n\r\n    /**\r\n     * Read 4 bytes as int in littleEndian\r\n     */\r\n    readInt() {\r\n        return parseInt(reverseHex(this.read(4)), 16);\r\n    }\r\n\r\n    /**\r\n     * Read 8 bytes as long in littleEndian\r\n     */\r\n    readLong() {\r\n        return parseInt(reverseHex(this.read(8)), 16);\r\n    }\r\n\r\n    readBoolean() {\r\n        return parseInt(this.read(1), 16) !== 0;\r\n    }\r\n}\r\n\r\nexport class EventEmitter {\r\n    handlers: any = {};\r\n\r\n    // register event type and handler\r\n    on(type: string, handler: () => void) {\r\n        if (typeof this.handlers[type] === 'undefined') {\r\n            this.handlers[type] = [];\r\n        }\r\n        this.handlers[type].push(handler);\r\n    }\r\n\r\n    /**\r\n     * trigger event\r\n     * @param { string } type\r\n     * @param { any } event , is the parameter\r\n     */\r\n    trigger(type: string, event?: any) {\r\n        if (this.handlers[type] instanceof Array) {\r\n            const handlers = this.handlers[type];\r\n            for (let i = 0, len = handlers.length; i < len; i++) {\r\n                handlers[i](event);\r\n            }\r\n        }\r\n    }\r\n\r\n    // remove event listener\r\n    off(type: string) {\r\n        delete this.handlers[type];\r\n    }\r\n}\r\n\r\nexport const sendBackResult2Native = (result: string, callback: string) => {\r\n    if (window && window.prompt) {\r\n        window.prompt(`${WEBVIEW_SCHEME}://${callback}?params=${result}`);\r\n    }\r\n};\r\n\r\nexport const axiosPost = (url: string, params: any) => {\r\n    return axios.post(url, params).then((res: any) => {\r\n        // tslint:disable-next-line:no-console\r\n        console.log('axios res:' + res);\r\n        return res;\r\n    }).catch((err: any) => {\r\n        // tslint:disable-next-line:no-console\r\n        console.log('axios res:' + JSON.stringify(err));\r\n\r\n        return err;\r\n    });\r\n};\r\n\r\n/**\r\n * Gets current time in unix timestamp format.\r\n */\r\nexport function now(): number {\r\n    return Math.floor(Date.now() / 1000);\r\n}\r\n\r\n/**\r\n * Computes sha-256 hash from hex encoded data.\r\n *\r\n * @param data Hex encoded data\r\n */\r\nexport function sha256(data: string) {\r\n    const hex = cryptoJS.enc.Hex.parse(data);\r\n    const sha = cryptoJS.SHA256(hex).toString();\r\n    return sha;\r\n}\r\n\r\n/**\r\n * Computes ripemd-160 hash from hex encoded data.\r\n *\r\n * @param data Hex encoded data\r\n */\r\nexport function ripemd160(data: string) {\r\n    const hex = cryptoJS.enc.Hex.parse(data);\r\n    const ripemd = cryptoJS.RIPEMD160(hex).toString();\r\n    return ripemd;\r\n}\r\n\r\n/**\r\n * Computes ripemd-160 hash of sha-256 hash from hex encoded data.\r\n *\r\n * @param data Hex encoded data\r\n */\r\nexport function hash160(SignatureScript: string): string {\r\n    return ripemd160(sha256(SignatureScript));\r\n}\r\n\r\n/**\r\n * Generates random ArrayBuffer of specified length.\r\n *\r\n * @param len Length of the array to generate\r\n */\r\nexport function generateRandomArray(len: number): ArrayBuffer {\r\n    return secureRandom(len);\r\n}\r\n\r\n/**\r\n * Generates random ArrayBuffer of specified length encoded as hex string\r\n *\r\n * @param len Length of the array to generate\r\n */\r\nexport function randomBytes(len: number) {\r\n    return ab2hexstring(generateRandomArray(len));\r\n}\r\n\r\nexport function generateMnemonic(size: number = 16): string {\r\n    const random = ab2hexstring(generateRandomArray(size));\r\n    return bip39.entropyToMnemonic(random);\r\n}\r\n\r\nexport function parseMnemonic(str: string) {\r\n    return bip39.mnemonicToEntropy(str);\r\n}\r\n\r\nexport function varifyPositiveInt(v: number) {\r\n    if (!/^[1-9]\\d*$/.test(v.toString())) {\r\n        throw ERROR_CODE.INVALID_PARAMS;\r\n    }\r\n    return;\r\n}\r\n\r\nexport function isBase64(str: string): boolean {\r\n    return Buffer.from(str, 'base64').toString('base64') === str;\r\n}\r\n\r\nexport function isHexString(str: string): boolean {\r\n    const regexp = /^[0-9a-fA-F]+$/;\r\n    return regexp.test(str) && (str.length % 2 === 0);\r\n}\r\n\r\nexport function unboundDeadline() {\r\n    let count = 0;\r\n    for (const m of UNBOUND_GENERATION_AMOUNT) {\r\n        count += m;\r\n    }\r\n    count *= UNBOUND_TIME_INTERVAL;\r\n    const numInterval = UNBOUND_GENERATION_AMOUNT.length;\r\n    if (UNBOUND_GENERATION_AMOUNT[numInterval - 1] !== 1 ||\r\n        !((count - UNBOUND_TIME_INTERVAL < ONT_TOTAL_SUPPLY) && ONT_TOTAL_SUPPLY <= count)) {\r\n        throw new Error('incompatible constants setting');\r\n    }\r\n    return UNBOUND_TIME_INTERVAL * numInterval - (count - ONT_TOTAL_SUPPLY);\r\n}\r\n\r\nexport function calcUnboundOng(balance: number, startOffset: number, endOffset: number) {\r\n    let amount = 0;\r\n    if (startOffset >= endOffset) {\r\n        return 0;\r\n    }\r\n    const UNBOUND_DEADLINE = unboundDeadline();\r\n    if (startOffset < UNBOUND_DEADLINE) {\r\n        let ustart = Math.floor(startOffset / UNBOUND_TIME_INTERVAL);\r\n        let istart = startOffset % UNBOUND_TIME_INTERVAL;\r\n        if (endOffset >= UNBOUND_DEADLINE) {\r\n            endOffset = UNBOUND_DEADLINE;\r\n        }\r\n        const uend = Math.floor(endOffset / UNBOUND_TIME_INTERVAL);\r\n        const iend = endOffset % UNBOUND_TIME_INTERVAL;\r\n        while (ustart < uend) {\r\n            amount += (UNBOUND_TIME_INTERVAL - istart) * UNBOUND_GENERATION_AMOUNT[ustart];\r\n            ustart++;\r\n            istart = 0;\r\n        }\r\n        amount += (iend - istart) * UNBOUND_GENERATION_AMOUNT[ustart];\r\n    }\r\n    return amount * balance;\r\n}\r\n","/*\r\n* Copyright (C) 2018 The ontology Authors\r\n* This file is part of The ontology library.\r\n*\r\n* The ontology is free software: you can redistribute it and/or modify\r\n* it under the terms of the GNU Lesser General Public License as published by\r\n* the Free Software Foundation, either version 3 of the License, or\r\n* (at your option) any later version.\r\n*\r\n* The ontology is distributed in the hope that it will be useful,\r\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n* GNU Lesser General Public License for more details.\r\n*\r\n* You should have received a copy of the GNU Lesser General Public License\r\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nimport { BigNumber } from 'bignumber.js';\r\nimport * as Long from 'long';\r\nimport { ERROR_CODE } from './../error';\r\nimport { bigIntFromBytes, bigIntToBytes } from './../utils';\r\n\r\nconst SIZE = 8;\r\n/**\r\n * Big positive integer base on BigNumber\r\n */\r\nexport default class BigInt {\r\n    /**\r\n     * Create BigInt from string\r\n     * @param hex Byte string value\r\n     */\r\n    static fromHexstr(hex: string): BigInt {\r\n        // hex = reverseHex(hex);\r\n        // const bi = new BigNumber(hex, 16).toString();\r\n        // return new BigInt(bi);\r\n        const long = bigIntFromBytes(hex);\r\n        return new BigInt(long.toString());\r\n    }\r\n\r\n    value: string | number;\r\n    ledgerCompatible: boolean;\r\n\r\n    constructor(value: string | number, ledgerCompatible: boolean = true) {\r\n        const bi = new BigNumber(value);\r\n        if (!bi.isInteger()) {\r\n            throw new Error(String(ERROR_CODE.INVALID_PARAMS));\r\n        }\r\n        this.value = value;\r\n        this.ledgerCompatible = ledgerCompatible;\r\n    }\r\n\r\n    /**\r\n     * Create hex string from BigInt\r\n     */\r\n    toHexstr(): string {\r\n        const bi = Long.fromValue(this.value);\r\n        let hex = bigIntToBytes(bi);\r\n        if (this.ledgerCompatible && (hex.length % 2 !== 0 || hex.length < 16)) {\r\n            hex = hex + '0'.repeat(SIZE * 2 - hex.length);\r\n        }\r\n        return hex;\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\n/**\r\n * Schema used during signing and verification of signature.\r\n */\r\nexport class SignatureScheme {\r\n    static values: SignatureScheme[] = [];\r\n\r\n    static ECDSAwithSHA224 = new SignatureScheme('SHA224withECDSA', 0, 'ES224');\r\n    static ECDSAwithSHA256 = new SignatureScheme('SHA256withECDSA', 1, 'ES256');\r\n    static ECDSAwithSHA384 = new SignatureScheme('SHA384withECDSA', 2, 'ES384');\r\n    static ECDSAwithSHA512 = new SignatureScheme('SHA512withECDSA', 3, 'ES512');\r\n    // tslint:disable-next-line:variable-name\r\n    static ECDSAwithSHA3_224 = new SignatureScheme('SHA3-224withECDSA', 4, 'ES3-224');\r\n    // tslint:disable-next-line:variable-name\r\n    static ECDSAwithSHA3_256 = new SignatureScheme('SHA3-256withECDSA', 5, 'ES3-256');\r\n    // tslint:disable-next-line:variable-name\r\n    static ECDSAwithSHA3_384 = new SignatureScheme('SHA3-384withECDSA', 6, 'ES3-384');\r\n    // tslint:disable-next-line:variable-name\r\n    static ECDSAwithSHA3_512 = new SignatureScheme('SHA3-512withECDSA', 7, 'ES3-512');\r\n    static ECDSAwithRIPEMD160 = new SignatureScheme('RIPEMD160withECDSA', 8, 'ER160');\r\n    static SM2withSM3 = new SignatureScheme('SM3withSM2', 9, 'SM');\r\n    static EDDSAwithSHA512 = new SignatureScheme('SHA512withEdDSA', 10, 'EDS512');\r\n\r\n    /**\r\n     * Finds Signature schema corresponding to specified hex representation.\r\n     *\r\n     * @param hex Byte hex value\r\n     */\r\n    static fromHex(hex: number): SignatureScheme {\r\n        const item = SignatureScheme.values.find((v) => v.hex === hex);\r\n        if (item === undefined) {\r\n            throw new Error('Enum value not found');\r\n        }\r\n\r\n        return item;\r\n    }\r\n\r\n    /**\r\n     * Finds Signature schema corresponding to specified label representation.\r\n     *\r\n     * @param label Label\r\n     */\r\n    static fromLabel(label: string): SignatureScheme {\r\n        const item = SignatureScheme.values.find((v) => v.label === label);\r\n        if (item === undefined) {\r\n            throw new Error('Enum value not found');\r\n        }\r\n\r\n        return item;\r\n    }\r\n\r\n    /**\r\n     * Finds Signature schema corresponding to specified label representation in JWS.\r\n     *\r\n     * @param label Label\r\n     */\r\n    static fromLabelJWS(label: string): SignatureScheme {\r\n        const item = SignatureScheme.values.find((v) => v.labelJWS === label);\r\n        if (item === undefined) {\r\n            throw new Error('Enum value not found');\r\n        }\r\n\r\n        return item;\r\n    }\r\n\r\n    label: string;\r\n    hex: number;\r\n    labelJWS: string;\r\n\r\n    constructor(label: string, hex: number, labelJWS: string) {\r\n        this.label = label;\r\n        this.hex = hex;\r\n        this.labelJWS = labelJWS;\r\n\r\n        SignatureScheme.values.push(this);\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport { SignatureScheme } from './SignatureScheme';\r\n\r\n/**\r\n * Type of key. ECDSA is the default one to use.\r\n */\r\nexport class KeyType {\r\n    static values: KeyType[] = [];\r\n\r\n    static ECDSA = new KeyType('ECDSA', 0x12, SignatureScheme.ECDSAwithSHA256);\r\n    static SM2 = new KeyType('SM2', 0x13, SignatureScheme.SM2withSM3);\r\n    static EDDSA = new KeyType('EDDSA', 0x14, SignatureScheme.EDDSAwithSHA512);\r\n\r\n    /**\r\n     * Finds Key type corresponding to specified hex representation.\r\n     *\r\n     * @param hex Byte hex value\r\n     */\r\n    static fromHex(hex: number): KeyType {\r\n        const item = KeyType.values.find((v) => v.hex === hex);\r\n        if (item === undefined) {\r\n            throw new Error('Enum value not found');\r\n        }\r\n\r\n        return item;\r\n    }\r\n\r\n    /**\r\n     * Finds Key type corresponding to specified label representation.\r\n     *\r\n     * @param label Label\r\n     */\r\n    static fromLabel(label: string): KeyType {\r\n        const item = KeyType.values.find((v) => v.label === label);\r\n        if (item === undefined) {\r\n            throw new Error('Enum value not found');\r\n        }\r\n\r\n        return item;\r\n    }\r\n\r\n    label: string;\r\n    hex: number;\r\n    defaultSchema: SignatureScheme;\r\n\r\n    constructor(label: string, hex: number, defaultSchema: SignatureScheme) {\r\n        this.label = label;\r\n        this.hex = hex;\r\n        this.defaultSchema = defaultSchema;\r\n\r\n        KeyType.values.push(this);\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\n/**\r\n * Elliptic curve used.\r\n */\r\nexport class CurveLabel {\r\n    static values: CurveLabel[] = [];\r\n\r\n    static SECP224R1 = new CurveLabel('P-224', 1, 'p224');\r\n    static SECP256R1 = new CurveLabel('P-256', 2, 'p256');\r\n    static SECP384R1 = new CurveLabel('P-384', 3, 'p384');\r\n    static SECP521R1 = new CurveLabel('P-521', 4, 'p521');\r\n    static SM2P256V1 = new CurveLabel('sm2p256v1', 20, 'sm2p256v1');\r\n    static ED25519 = new CurveLabel('ed25519', 25, 'ed25519');\r\n\r\n    /**\r\n     * Finds Curvecorresponding to specified hex representation.\r\n     *\r\n     * @param hex Byte hex value\r\n     */\r\n    static fromHex(hex: number): CurveLabel {\r\n        const item = CurveLabel.values.find((v) => v.hex === hex);\r\n        if (item === undefined) {\r\n            throw new Error('Enum value not found');\r\n        }\r\n\r\n        return item;\r\n    }\r\n\r\n    /**\r\n     * Finds Curve corresponding to specified label representation.\r\n     *\r\n     * @param label Label\r\n     */\r\n    static fromLabel(label: string): CurveLabel {\r\n        const item = CurveLabel.values.find((v) => v.label === label);\r\n        if (item === undefined) {\r\n            throw new Error('Enum value not found');\r\n        }\r\n\r\n        return item;\r\n    }\r\n\r\n    label: string;\r\n    hex: number;\r\n    preset: string;\r\n\r\n    constructor(label: string, hex: number, preset: string) {\r\n        this.label = label;\r\n        this.hex = hex;\r\n        this.preset = preset;\r\n\r\n        CurveLabel.values.push(this);\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport * as cryptoJS from 'crypto-js';\r\nimport { sha3_224, sha3_256, sha3_384, sha3_512 } from 'js-sha3';\r\nimport { sm3 } from 'sm.js';\r\nimport { DEFAULT_ALGORITHM } from '../consts';\r\nimport { hexstring2ab } from '../utils';\r\nimport { CurveLabel } from './CurveLabel';\r\nimport { KeyType } from './KeyType';\r\nimport { SignatureScheme } from './SignatureScheme';\r\n\r\n/**\r\n * Specific parameters for the key type.\r\n */\r\nexport class KeyParameters {\r\n    /**\r\n     * Create KeyParameters from json.\r\n     * @param json JsonKeyParameters\r\n     */\r\n    static deserializeJson(json: JsonKeyParameters): KeyParameters {\r\n        return new KeyParameters(\r\n        CurveLabel.fromLabel(json.curve)\r\n        );\r\n    }\r\n    curve: CurveLabel;\r\n\r\n    constructor(curve: CurveLabel) {\r\n        this.curve = curve;\r\n    }\r\n\r\n    /**\r\n     * Serialize KeyParameters to json.\r\n     */\r\n    serializeJson(): JsonKeyParameters {\r\n        return {\r\n            curve: this.curve.label\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * Common representation of private or public key\r\n */\r\nexport class Key {\r\n    /**\r\n     * Algorithm used for key generation.\r\n     */\r\n    algorithm: KeyType;\r\n\r\n    /**\r\n     * Parameters of the algorithm.\r\n     */\r\n    parameters: KeyParameters;\r\n\r\n    /**\r\n     * Key data.\r\n     */\r\n    key: string;\r\n\r\n    /**\r\n     * Creates Key.\r\n     *\r\n     * If no algorithm or parameters are specified, default values will be used.\r\n     * This is strongly discurraged, because it will forbid using other Key types.\r\n     * Therefore use it only for testing.\r\n     *\r\n     * @param key Hex encoded key value\r\n     * @param algorithm Key type\r\n     * @param parameters Parameters of the key type\r\n     */\r\n    constructor(key: string, algorithm?: KeyType, parameters?: KeyParameters) {\r\n        this.key = key;\r\n\r\n        if (algorithm === undefined) {\r\n            algorithm = KeyType.fromLabel(DEFAULT_ALGORITHM.algorithm);\r\n        }\r\n\r\n        if (parameters === undefined) {\r\n            parameters = KeyParameters.deserializeJson(DEFAULT_ALGORITHM.parameters);\r\n        }\r\n\r\n        this.algorithm = algorithm;\r\n        this.parameters = parameters;\r\n    }\r\n\r\n    /**\r\n     * Computes hash of message using hashing function of signature schema.\r\n     *\r\n     * @param msg Hex encoded input data\r\n     * @param scheme Signing schema to use\r\n     */\r\n    computeHash(msg: string, scheme: SignatureScheme): string {\r\n        switch (scheme) {\r\n        case SignatureScheme.ECDSAwithSHA224:\r\n            return cryptoJS.SHA224(cryptoJS.enc.Hex.parse(msg)).toString();\r\n        case SignatureScheme.ECDSAwithSHA256:\r\n            return cryptoJS.SHA256(cryptoJS.enc.Hex.parse(msg)).toString();\r\n        case SignatureScheme.ECDSAwithSHA384:\r\n            return cryptoJS.SHA384(cryptoJS.enc.Hex.parse(msg)).toString();\r\n        case SignatureScheme.ECDSAwithSHA512:\r\n        case SignatureScheme.EDDSAwithSHA512:\r\n            return cryptoJS.SHA512(cryptoJS.enc.Hex.parse(msg)).toString();\r\n        case SignatureScheme.ECDSAwithSHA3_224:\r\n            return sha3_224(hexstring2ab(msg));\r\n        case SignatureScheme.ECDSAwithSHA3_256:\r\n            return sha3_256(hexstring2ab(msg));\r\n        case SignatureScheme.ECDSAwithSHA3_384:\r\n            return sha3_384(hexstring2ab(msg));\r\n        case SignatureScheme.ECDSAwithSHA3_512:\r\n            return sha3_512(hexstring2ab(msg));\r\n        case SignatureScheme.ECDSAwithRIPEMD160:\r\n            return cryptoJS.RIPEMD160(cryptoJS.enc.Hex.parse(msg)).toString();\r\n        case SignatureScheme.SM2withSM3:\r\n            return (new sm3()).sum(hexstring2ab(msg), 'hex');\r\n        default:\r\n            throw new Error('Unsupported hash algorithm.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Tests if signing schema is compatible with key type.\r\n     *\r\n     * @param schema Signing schema to use\r\n     */\r\n    isSchemaSupported(schema: SignatureScheme): boolean {\r\n        switch (schema) {\r\n        case SignatureScheme.ECDSAwithSHA224:\r\n        case SignatureScheme.ECDSAwithSHA256:\r\n        case SignatureScheme.ECDSAwithSHA384:\r\n        case SignatureScheme.ECDSAwithSHA512:\r\n        case SignatureScheme.ECDSAwithSHA3_224:\r\n        case SignatureScheme.ECDSAwithSHA3_256:\r\n        case SignatureScheme.ECDSAwithSHA3_384:\r\n        case SignatureScheme.ECDSAwithSHA3_512:\r\n        case SignatureScheme.ECDSAwithRIPEMD160:\r\n            return this.algorithm === KeyType.ECDSA;\r\n        case SignatureScheme.EDDSAwithSHA512:\r\n            return this.algorithm === KeyType.EDDSA;\r\n        case SignatureScheme.SM2withSM3:\r\n            return this.algorithm === KeyType.SM2;\r\n        default:\r\n            throw new Error('Unsupported signature schema.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets JSON representation of the Key (Public/Private).\r\n     */\r\n    serializeJson(): JsonKey {\r\n        return {\r\n            algorithm: this.algorithm.label,\r\n            parameters: this.parameters.serializeJson(),\r\n            key: this.key\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * Json representation of the Key.\r\n */\r\nexport interface JsonKey {\r\n    algorithm: string;\r\n    parameters: JsonKeyParameters;\r\n    key: string | null;\r\n    external?: any | null;\r\n}\r\n\r\n/**\r\n * Json representation of the Key parameters.\r\n */\r\nexport interface JsonKeyParameters {\r\n    curve: string;\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport * as elliptic from 'elliptic';\r\nimport { sm2 } from 'sm.js';\r\nimport { DEFAULT_SM2_ID } from '../consts';\r\nimport { hexstr2str, hexstring2ab, num2hexstring, StringReader } from '../utils';\r\nimport { CurveLabel } from './CurveLabel';\r\nimport { Key, KeyParameters } from './Key';\r\nimport { KeyType } from './KeyType';\r\nimport { Signable } from './signable';\r\nimport { Signature } from './Signature';\r\nimport { SignatureScheme } from './SignatureScheme';\r\n\r\n/**\r\n * Class to manage the public key with some userful functions.\r\n */\r\nexport class PublicKey extends Key {\r\n    /**\r\n     * Creates PublicKey from Hex representation.\r\n     *\r\n     * @param sr String reader\r\n     * @param length Byte length of the serialized object\r\n     *\r\n     */\r\n    static deserializeHex(sr: StringReader, length: number = 33): PublicKey {\r\n        if (length === 33) { // ECDSA\r\n            const algorithm = KeyType.ECDSA;\r\n            const curve = CurveLabel.SECP256R1;\r\n            const pk = sr.read(33);\r\n            return new PublicKey(pk, algorithm, new KeyParameters(curve));\r\n        } else {\r\n            const algorithmHex = parseInt(sr.read(1), 16);\r\n            const curveHex = parseInt(sr.read(1), 16);\r\n            const pk = sr.read(length - 2);\r\n\r\n            return new PublicKey(\r\n                pk,\r\n                KeyType.fromHex(algorithmHex),\r\n                new KeyParameters(CurveLabel.fromHex(curveHex))\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Verifies if the signature was created with private key corresponding to supplied public key\r\n     * and was not tampered with using signature schema.\r\n     *\r\n     * @param msg Hex encoded input data or Signable object\r\n     * @param signature Signature object\r\n     */\r\n    verify(msg: string | Signable, signature: Signature): boolean {\r\n        if (!this.isSchemaSupported(signature.algorithm)) {\r\n            throw new Error('Signature schema does not match key type.');\r\n        }\r\n\r\n        // retrieves content to sign if not provided directly\r\n        if (typeof msg !== 'string') {\r\n            msg = msg.getSignContent();\r\n        }\r\n\r\n        let hash: string;\r\n        if (signature.algorithm === SignatureScheme.SM2withSM3) {\r\n            // library sm.js (SM2withSM3) has implemented hashing as part of verification, therefore it is skipped\r\n            hash = msg;\r\n        } else {\r\n            hash = this.computeHash(msg, signature.algorithm);\r\n        }\r\n\r\n        return this.verifySignature(hash, signature.value, signature.algorithm);\r\n    }\r\n\r\n    /**\r\n     * Serializes public key to Hex representation.\r\n     *\r\n     * Length definition is not included.\r\n     */\r\n    serializeHex(): string {\r\n        let result = '';\r\n        switch (this.algorithm) {\r\n        case KeyType.ECDSA:\r\n            result += this.key;\r\n            break;\r\n        case KeyType.EDDSA:\r\n        case KeyType.SM2:\r\n            result += num2hexstring(this.algorithm.hex);\r\n            result += num2hexstring(this.parameters.curve.hex);\r\n            result += this.key;\r\n            break;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * For internal use.\r\n     * @param hash Message hash\r\n     * @param signature Hex encoded signature\r\n     * @param schema Signature scheme to use\r\n     */\r\n    verifySignature(hash: string, signature: string, schema: SignatureScheme): boolean {\r\n        switch (schema) {\r\n        case SignatureScheme.ECDSAwithSHA224:\r\n        case SignatureScheme.ECDSAwithSHA256:\r\n        case SignatureScheme.ECDSAwithSHA384:\r\n        case SignatureScheme.ECDSAwithSHA512:\r\n        case SignatureScheme.ECDSAwithSHA3_224:\r\n        case SignatureScheme.ECDSAwithSHA3_256:\r\n        case SignatureScheme.ECDSAwithSHA3_384:\r\n        case SignatureScheme.ECDSAwithSHA3_512:\r\n        case SignatureScheme.ECDSAwithRIPEMD160:\r\n            return this.verifyEcDSASignature(hash, signature);\r\n        case SignatureScheme.EDDSAwithSHA512:\r\n            return this.verifyEdDSASignature(hash, signature);\r\n        case SignatureScheme.SM2withSM3:\r\n            return this.verifySM2Signature(hash, signature);\r\n        default:\r\n            throw new Error('Unsupported signature schema.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Verifies EcDSA signature of message hash. Curve name is derrived from private key.\r\n     *\r\n     * @param hash Message hash\r\n     * @param signature Hex encoded signature\r\n     */\r\n    verifyEcDSASignature(hash: string, signature: string): boolean {\r\n        const r = signature.substr(0, 64);\r\n        const s = signature.substr(64, 64);\r\n\r\n        const ec = new elliptic.ec(this.parameters.curve.preset);\r\n        return ec.verify(hash, { r, s }, this.key, 'hex');\r\n    }\r\n\r\n    /**\r\n     * Verifies EdDSA signature of message hash. Curve name is derrived from private key.\r\n     *\r\n     * @param hash Message hash\r\n     * @param signature Hex encoded signature\r\n     */\r\n    verifyEdDSASignature(hash: string, signature: string): boolean {\r\n        const r = signature.substr(0, 64);\r\n        const s = signature.substr(64, 64);\r\n\r\n        const eddsa = new elliptic.eddsa(this.parameters.curve.preset);\r\n        return eddsa.verify(hash, { r, s }, this.key, 'hex');\r\n    }\r\n\r\n    /**\r\n     * Verifies SM2 signature of message hash.\r\n     *\r\n     * Only default SM2 ID is supported.\r\n     *\r\n     * @param hash Message hash\r\n     * @param signature Hex encoded signature\r\n     */\r\n    verifySM2Signature(hash: string, signature: string): boolean {\r\n        const reader = new StringReader(signature);\r\n\r\n        const id = hexstr2str(reader.readNullTerminated());\r\n        if (id !== DEFAULT_SM2_ID && id !== '') {\r\n            throw new Error('Unsupported SM2 id used.');\r\n        }\r\n\r\n        const r = reader.read(32);\r\n        const s = reader.read(32);\r\n\r\n        const keyPair = sm2.SM2KeyPair(this.key);\r\n        return keyPair.verify(hexstring2ab(hash), r, s);\r\n    }\r\n}\r\n\r\n/**\r\n * Public key status enumaration.\r\n */\r\nexport class PublicKeyStatus {\r\n    static values: PublicKeyStatus[] = [];\r\n\r\n    static IN_USE = new PublicKeyStatus('in use');\r\n\r\n    static REVOKED = new PublicKeyStatus('revoked');\r\n\r\n    /**\r\n     * Finds Public key status corresponding to specified label representation.\r\n     *\r\n     * @param label Hex encoded label\r\n     */\r\n    static fromHexLabel(hexLabel: string): PublicKeyStatus {\r\n        const label = hexstr2str(hexLabel);\r\n\r\n        const item = PublicKeyStatus.values.find((v) => v.label === label);\r\n        if (item === undefined) {\r\n            throw new Error('Enum value not found');\r\n        }\r\n\r\n        return item;\r\n    }\r\n\r\n    label: string;\r\n\r\n    constructor(label: string) {\r\n        this.label = label;\r\n\r\n        PublicKeyStatus.values.push(this);\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport * as elliptic from 'elliptic';\r\nimport { sm2 } from 'sm.js';\r\nimport BigInt from '../common/bigInt';\r\nimport { KeyType } from '../crypto/KeyType';\r\nimport { PublicKey } from '../crypto/PublicKey';\r\nimport { ERROR_CODE } from '../error';\r\nimport { num2hexstring, StringReader } from './../utils';\r\nimport opcode from './opcode';\r\n// The sorting rules is as follows:\r\n//    1. if keys have different types, then sorted by the KeyType value.\r\n//    2. else,\r\n//       2.1. ECDSA or SM2:\r\n//           2.1.1. if on different curves, then sorted by the curve label.\r\n//           2.1.2. else if x values are different, then sorted by x.\r\n//           2.1.3. else sorted by y.\r\n//       2.2. EdDSA: sorted by the byte sequence directly.\r\nexport function comparePublicKeys(a: PublicKey, b: PublicKey) {\r\n    if (a.algorithm !== b.algorithm) {\r\n        return a.algorithm.hex - b.algorithm.hex;\r\n    }\r\n    switch (a.algorithm) {\r\n    case KeyType.ECDSA:\r\n        const ec = new elliptic.ec(a.parameters.curve.preset);\r\n        const paKey = ec.keyFromPublic(a.key, 'hex', true);\r\n        const pbKey = ec.keyFromPublic(b.key, 'hex', true);\r\n        const pa = paKey.getPublic();\r\n        const pb = pbKey.getPublic();\r\n        if (pa.getX() !== pb.getX()) {\r\n            return pa.getX() - pb.getX();\r\n        } else {\r\n            return pa.getY() - pb.getY();\r\n        }\r\n    case KeyType.SM2:\r\n        const pka = new sm2.SM2KeyPair();\r\n        const pkb = new sm2.SM2KeyPair();\r\n        pka._pubFromString(a.key);\r\n        pkb._pubFromString(b.key);\r\n        if (pka.getX().toString() !== pkb.getX().toString()) {\r\n            return Number(pka.getX().toString()) - Number(pkb.getX().toString());\r\n        } else {\r\n            return Number(pka.getY().toString()) - Number(pkb.getY().toString());\r\n        }\r\n    case KeyType.EDDSA:\r\n        return Number(a.key) - Number(b.key);\r\n    default:\r\n        return 0;\r\n    }\r\n}\r\n\r\nexport function pushOpCode(op: opcode): string {\r\n    return num2hexstring(op);\r\n}\r\n\r\nexport function pushPubKey(pk: PublicKey): string {\r\n    const pkStr = pk.serializeHex();\r\n    return pushBytes(pkStr);\r\n}\r\n\r\nexport function pushBigInt(num: number): string {\r\n    if (num === -1) {\r\n        return num2hexstring(opcode.PUSHM1);\r\n    }\r\n    if (num === 0) {\r\n        return num2hexstring(opcode.PUSH0);\r\n    }\r\n    if (num > 0 && num <= 16) {\r\n        return num2hexstring(opcode.PUSH1 - 1 + num);\r\n    }\r\n    return num2hexstring(num, 8, true);\r\n}\r\n\r\nexport function pushNum(num: number): string {\r\n    if ( num === 0 ) {\r\n        return pushOpCode(opcode.PUSH0);\r\n    } else if ( num <= 16 ) {\r\n        return num2hexstring(num - 1 + opcode.PUSH1);\r\n    }\r\n    const bint = new BigInt(num.toString());\r\n    return pushBytes(bint.toHexstr());\r\n}\r\n\r\nexport function pushBytes(hexstr: string): string {\r\n    let result = '';\r\n    if (hexstr.length === 0) {\r\n        throw new Error('pushBytes error, hexstr is empty.');\r\n    }\r\n    const len = hexstr.length / 2;\r\n    if (len <= opcode.PUSHBYTES75 + 1 - opcode.PUSHBYTES1 ) {\r\n        result += num2hexstring(len + opcode.PUSHBYTES1 - 1);\r\n    } else if (len < 0x100) {\r\n        result += num2hexstring(opcode.PUSHDATA1);\r\n        result += num2hexstring(len);\r\n    } else if (len < 0x10000) {\r\n        result += num2hexstring(opcode.PUSHDATA2);\r\n        result += num2hexstring(len, 2, true);\r\n    } else if (len < 0x100000000) {\r\n        result += num2hexstring(opcode.PUSHDATA4);\r\n        result += num2hexstring(len, 4, true);\r\n    } else {\r\n        throw ERROR_CODE.INVALID_PARAMS;\r\n    }\r\n    result += hexstr;\r\n    return result;\r\n}\r\n\r\nexport function programFromPubKey(pk: PublicKey): string {\r\n    let result = '';\r\n    result += pushPubKey(pk);\r\n    result += pushOpCode(opcode.CHECKSIG);\r\n    return result;\r\n}\r\n\r\nexport function programFromMultiPubKey(pubkeys: PublicKey[], m: number): string {\r\n    const n = pubkeys.length;\r\n    if (!(1 <= m && m <= n && n <= 1024)) {\r\n        throw new Error('Wrong multi-sig param');\r\n    }\r\n    // const pkStrList = pubkeys.map( (p) => p.serializeHex());\r\n    // pkStrList.sort();\r\n\r\n    pubkeys.sort(comparePublicKeys);\r\n\r\n    let result = '';\r\n    result += pushNum(m);\r\n\r\n    for (const pk of pubkeys) {\r\n        result += pushBytes(pk.serializeHex());\r\n    }\r\n    result += pushNum(n);\r\n    result += pushOpCode(opcode.CHECKMULTISIG);\r\n    return result;\r\n}\r\n\r\nexport function programFromParams(sigs: string[]): string {\r\n    let result = '';\r\n    sigs.sort();\r\n    for ( const s of sigs) {\r\n        result += pushBytes(s);\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function readOpcode(sr: StringReader) {\r\n    return parseInt(sr.read(1), 16);\r\n}\r\n\r\nexport function readNum(sr: StringReader) {\r\n    let code;\r\n    try {\r\n        code = readOpcode(sr);\r\n    } catch (err) {\r\n        return 0;\r\n    }\r\n    let num = code - opcode.PUSH1 + 1;\r\n    if (code === opcode.PUSH0) {\r\n        readOpcode(sr);\r\n        return 0;\r\n    } else if (1 <= num && num <= 16) {\r\n        readOpcode(sr);\r\n        return num;\r\n    }\r\n    const bint = BigInt.fromHexstr(sr.readNextBytes());\r\n    num = parseInt(bint.value.toString(), 10);\r\n    return num;\r\n}\r\n\r\nexport function readBytes(sr: StringReader) {\r\n    const code = readOpcode(sr);\r\n    let keylen;\r\n    if (code === opcode.PUSHDATA4) {\r\n        keylen = sr.readUint32();\r\n    } else if (code === opcode.PUSHDATA2) {\r\n        keylen = sr.readUint16();\r\n    } else if (code === opcode.PUSHDATA1) {\r\n        keylen = sr.readUint8();\r\n    } else if (code <= opcode.PUSHBYTES75 && code >= opcode.PUSHBYTES1) {\r\n        keylen = code - opcode.PUSHBYTES1 + 1;\r\n    } else {\r\n        throw new Error('unexpected opcode: ' + code);\r\n    }\r\n    return sr.read(keylen);\r\n}\r\n\r\nexport function readPubKey(sr: StringReader) {\r\n    const pkStr = sr.readNextBytes();\r\n    return PublicKey.deserializeHex(new StringReader(pkStr));\r\n}\r\n\r\nexport function getParamsFromProgram(hexstr: string): string[] {\r\n    const sigs = [];\r\n    const sr = new StringReader(hexstr);\r\n    while (!sr.isEmpty()) {\r\n        sigs.push(readBytes(sr));\r\n    }\r\n    return sigs;\r\n}\r\n\r\nexport class ProgramInfo {\r\n    M: number;\r\n    pubKeys: PublicKey[];\r\n}\r\nexport function getProgramInfo(hexstr: string): ProgramInfo {\r\n    const info = new ProgramInfo();\r\n    const end = parseInt(hexstr.substr(-2, 2), 16);\r\n    if (end === opcode.CHECKSIG) {\r\n        const sr = new StringReader(hexstr);\r\n        const pk = readPubKey(sr);\r\n        info.M = 1;\r\n        info.pubKeys = [pk];\r\n        return info;\r\n    } else if (end === opcode.CHECKMULTISIG) {\r\n        const sr = new StringReader(hexstr);\r\n        const m = parseInt(sr.read(1), 16) - opcode.PUSH1 + 1;\r\n        const n = parseInt(hexstr.substr(-4, 2), 16) - opcode.PUSH1 + 1;\r\n        info.M = m;\r\n        info.pubKeys = [];\r\n        for (let i = 0; i < n; i++) {\r\n            const key = readPubKey(sr);\r\n            info.pubKeys.push(key);\r\n        }\r\n        // const n = readNum(sr);\r\n        return info;\r\n    } else {\r\n        throw new Error('Unsupported program.');\r\n    }\r\n}\r\n\r\nexport const pushHexString = (param: string) => {\r\n    let result = '';\r\n    const len = param.length / 2;\r\n    if (len <= opcode.PUSHBYTES75) {\r\n        result += num2hexstring(len);\r\n    } else if (len < 0x100) {\r\n        result += num2hexstring(opcode.PUSHDATA1);\r\n        result += num2hexstring(len);\r\n    } else if (len < 0x10000) {\r\n        result += num2hexstring(opcode.PUSHDATA2);\r\n        result += num2hexstring(len, 2, true);\r\n    } else {\r\n        result += num2hexstring(opcode.PUSHDATA4);\r\n        result += num2hexstring(len, 4, true);\r\n    }\r\n    result += param;\r\n    return result;\r\n};\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\nimport * as base58 from 'base-58';\r\nimport * as cryptoJS from 'crypto-js';\r\nimport { ADDR_VERSION } from '../consts';\r\nimport { ERROR_CODE } from '../error';\r\nimport opcode from '../transaction/opcode';\r\nimport { comparePublicKeys, programFromPubKey, pushBigInt } from '../transaction/program';\r\nimport { pushHexString } from '../transaction/program';\r\nimport { ab2hexstring, hash160, num2hexstring, sha256, StringReader } from '../utils';\r\nimport { reverseHex } from './../utils';\r\nimport { PublicKey } from './PublicKey';\r\n\r\n/**\r\n * Representation of Address.\r\n *\r\n * There are 4 types of address:\r\n * 1. Public key based\r\n * 2. Multi public key based (m, n)\r\n * 3. Contract based\r\n * 4. ONT ID based\r\n *\r\n * The value is stored as base58 or hex encoded, therefore always use\r\n * toBase58() or serialize() according to requirements.\r\n */\r\nexport class Address {\r\n    static deserialize(sr: StringReader): Address {\r\n        return new Address(sr.read(20));\r\n    }\r\n    /**\r\n     * Generates public key based address.\r\n     *\r\n     * @param publicKey Public key to use\r\n     */\r\n    static fromPubKey(publicKey: PublicKey): Address {\r\n        const program = programFromPubKey(publicKey);\r\n        // const program = publicKey.key + num2hexstring(opcode.CHECKSIG);\r\n        const programHash = hash160(program);\r\n        return new Address(programHash);\r\n    }\r\n\r\n    /**\r\n     * Generates identity based address.\r\n     * @param ontid ONT ID in the form did:ont:AXmQDzzvpEtPkNwBEFsREzApTTDZFW6frD\r\n     */\r\n    static fromOntid(ontid: string): Address {\r\n        const address = ontid.substr(8);\r\n        return new Address(address);\r\n    }\r\n\r\n    /**\r\n     * Generates address from smart contract code.\r\n     *\r\n     * @param vmCode Hex encoded smart contract code\r\n     */\r\n    static fromVmCode(vmCode: string): Address {\r\n        const programHash = hash160(vmCode);\r\n        // programHash = num2hexstring(vmType) + programHash.substring(2);\r\n        return new Address(programHash);\r\n    }\r\n\r\n    /**\r\n     * Generates (m, n) threshold address.\r\n     *\r\n     * m - threshold\r\n     * n - total number of public keys\r\n     *\r\n     * @param m The threshold\r\n     * @param publicKeys Public key\r\n     */\r\n    static fromMultiPubKeys(m: number, publicKeys: PublicKey[]): Address {\r\n        const n = publicKeys.length;\r\n\r\n        if (m <= 0 || m > n || n > 24 ) {\r\n            throw ERROR_CODE.INVALID_PARAMS;\r\n        }\r\n\r\n        // const pkHexStrs = publicKeys.map((p) => p.serializeHex());\r\n        // pkHexStrs.sort();\r\n        publicKeys.sort(comparePublicKeys);\r\n        let result = '';\r\n        result += pushBigInt(m);\r\n        for (const s of publicKeys) {\r\n            result += pushHexString(s.serializeHex());\r\n        }\r\n        result += pushBigInt(n);\r\n        result += num2hexstring(opcode.CHECKMULTISIG);\r\n        const programHash = hash160(result);\r\n        return new Address(programHash);\r\n    }\r\n\r\n    /**\r\n     * Deterministicaly generates ONT ID from this public key.\r\n     */\r\n    static generateOntid(publicKey: PublicKey): string {\r\n        const address = Address.fromPubKey(publicKey);\r\n        const ontid = 'did:ont:' + address.toBase58();\r\n\r\n        return ontid;\r\n    }\r\n\r\n    /**\r\n     * Base58 or Hex encoded address\r\n     */\r\n    value: string;\r\n\r\n    constructor(value: string) {\r\n        if (value.length === 40 || value.length === 34) {\r\n            this.value = value;\r\n        } else {\r\n            throw ERROR_CODE.INVALID_PARAMS;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets Base58 encoded representation of the address.\r\n     */\r\n    toBase58() {\r\n        if (this.value.length === 34) {\r\n            return this.value;\r\n        } else {\r\n            return hexToBase58(this.value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets Hex encoded representation of the address.\r\n     */\r\n    toHexString() {\r\n        let val;\r\n        if (this.value.length === 40) {\r\n            val = this.value;\r\n        } else {\r\n            val = base58ToHex(this.value);\r\n        }\r\n        return reverseHex(val);\r\n    }\r\n\r\n    serialize() {\r\n        if (this.value.length === 40) {\r\n            return this.value;\r\n        } else {\r\n            return base58ToHex(this.value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Computes the salt from address for decrypt.\r\n     */\r\n    getB58Checksum() {\r\n        const address = this.toBase58();\r\n        const hash = cryptoJS.SHA256(address).toString();\r\n        const hash2 = sha256(hash);\r\n        return hash2.slice(0, 8);\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n * @param programhash\r\n */\r\nfunction hexToBase58(hexEncoded: string): string {\r\n    const data = ADDR_VERSION + hexEncoded;\r\n\r\n    const hash = sha256(data);\r\n    const hash2 = sha256(hash);\r\n    const checksum = hash2.slice(0, 8);\r\n\r\n    const datas = data + checksum;\r\n\r\n    return base58.encode(new Buffer(datas, 'hex'));\r\n}\r\n\r\nfunction base58ToHex(base58Encoded: string) {\r\n    const decoded = base58.decode(base58Encoded);\r\n    const hexEncoded = ab2hexstring(decoded).substr(2, 40);\r\n\r\n    if (base58Encoded !== hexToBase58(hexEncoded)) {\r\n        throw new Error('[addressToU160] decode encoded verify failed');\r\n    }\r\n    return hexEncoded;\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\nimport * as base58 from 'base-58';\r\nimport { createCipheriv, createDecipheriv } from 'crypto';\r\nimport * as CryptoJS from 'crypto-js';\r\nimport * as asyncScrypt from 'scrypt-async';\r\nimport { DEFAULT_SCRYPT, OEP_FLAG, OEP_HEADER } from './consts';\r\nimport { Address } from './crypto/address';\r\nimport { PublicKey } from './crypto/PublicKey';\r\nimport { ERROR_CODE } from './error';\r\nimport { ab2hexstring, hexstring2ab, hexXor, isHexString, StringReader } from './utils';\r\n\r\n/**\r\n * Decribtes the structure of params for scrypt\r\n */\r\nexport interface ScryptParams {\r\n    cost: number;\r\n    blockSize: number;\r\n    parallel: number;\r\n    size: number;\r\n}\r\n\r\n/**\r\n * Synchronious call to scrypt-async-js.\r\n *\r\n * @param keyphrase Keyphrase to use\r\n * @param addressHash Hex encoded address\r\n * @param params Scrypt params\r\n */\r\nfunction scrypt(keyphrase: string, addressHash: string, params: ScryptParams) {\r\n    let derived: number[] = [];\r\n\r\n    asyncScrypt(\r\n        keyphrase.normalize('NFC'),\r\n        hexstring2ab(addressHash),\r\n        {\r\n            N: params.cost,\r\n            r: params.blockSize,\r\n            p: params.parallel,\r\n            dkLen: params.size\r\n        },\r\n        (result: string | number[]) => {\r\n            derived = result as number[];\r\n        }\r\n    );\r\n    return new Buffer(derived);\r\n}\r\n\r\n/**\r\n * Encrypt with aes-ctr\r\n */\r\nexport function encryptWithCtr(\r\n    privateKey: string,\r\n    publicKeyEncoded: string,\r\n    keyphrase: string,\r\n    scryptParams: ScryptParams = DEFAULT_SCRYPT\r\n): string {\r\n    // let privateKey = PrivateKey.deserializeWIF(wifKey);\r\n    // console.log( \"privateKey: \", privateKey );\r\n\r\n    // console.log( \"publickeyEncode: \", publicKey );\r\n\r\n    const publicKey = PublicKey.deserializeHex(new StringReader(publicKeyEncoded));\r\n\r\n    const address = Address.fromPubKey(publicKey);\r\n    // console.log( \"address: \", address );\r\n\r\n    const addresshash = address.getB58Checksum();\r\n    // console.log( \"addresshash: \", addresshash );\r\n\r\n    // Scrypt\r\n    const derived = scrypt(keyphrase, addresshash, scryptParams).toString('hex');\r\n    const derived1 = derived.slice(0, 32);\r\n    const derived2 = derived.slice(64);\r\n    const iv = CryptoJS.enc.Hex.parse(derived1);\r\n\r\n    // console.log('decrypt derived: ' + derived)\r\n    // console.log('decrypt iv: ' + iv)\r\n    // console.log('decrypt derived2: ' + derived2)\r\n\r\n    // AES Encrypt\r\n    // let xor = hexXor(privateKey, derived1);\r\n    const encrypted = CryptoJS.AES.encrypt(\r\n        CryptoJS.enc.Hex.parse(privateKey),\r\n        CryptoJS.enc.Hex.parse(derived2),\r\n        { mode: CryptoJS.mode.CTR, padding: CryptoJS.pad.NoPadding, iv }\r\n    );\r\n    // console.log( \"encrypted: \", encrypted.ciphertext.toString() );\r\n\r\n    // Construct\r\n    // let assembled = OEP_HEADER + OEP_FLAG + addresshash + encrypted.ciphertext.toString();\r\n    const assembled = encrypted.ciphertext.toString();\r\n\r\n    // console.log( \"enc assembled: \", assembled );\r\n\r\n    // return Bs58check.encode(Buffer.from(assembled, 'hex'));\r\n    return new Buffer(assembled, 'hex').toString('base64');\r\n}\r\n\r\n/**\r\n * Decrypt with aes-ctr\r\n * @param encryptedKey encrypted private key\r\n * @param keyphrase user's password to encrypt private key\r\n * @param saltOrAddress 4 hex encoded bytes salt or Address object\r\n */\r\nexport function decryptWithCtr(\r\n    encryptedKey: string,\r\n    keyphrase: string,\r\n    saltOrAddress: string | Address,\r\n    scryptParams: ScryptParams = DEFAULT_SCRYPT\r\n): string {\r\n    // let assembled = ab2hexstring(Bs58check.decode(encryptedKey));\r\n    const encrypted = Buffer.from(encryptedKey, 'base64').toString('hex');\r\n\r\n    // tslint:disable-next-line:no-console\r\n    // console.log('dec assembled: ', encrypted);\r\n\r\n    let salt = '';\r\n    if (typeof saltOrAddress === 'string' && saltOrAddress.length === 8) {\r\n        salt = saltOrAddress;\r\n    } else if (saltOrAddress instanceof Address) {\r\n        salt = saltOrAddress.getB58Checksum();\r\n    } else {\r\n        throw ERROR_CODE.INVALID_PARAMS;\r\n    }\r\n\r\n    // let addressHash = assembled.substr(0, 8);\r\n    // console.log( \"dec addressHash: \", addressHash );\r\n\r\n    // let encrypted = assembled.substr(8);\r\n    // console.log( \"encrypted: \", encrypted );\r\n\r\n    // Scrypt\r\n    const derived = scrypt(keyphrase, salt, scryptParams).toString('hex');\r\n    const derived1 = derived.slice(0, 32);\r\n    const derived2 = derived.slice(64);\r\n    // console.log('decrypt derived: ' + derived)\r\n\r\n    const iv = CryptoJS.enc.Hex.parse(derived1);\r\n\r\n    // AES Decrypt\r\n    const ciphertexts = { ciphertext: CryptoJS.enc.Hex.parse(encrypted), salt: '', iv: '' };\r\n    const decrypted = CryptoJS.AES.decrypt(\r\n        ciphertexts,\r\n        CryptoJS.enc.Hex.parse(derived2),\r\n        { mode: CryptoJS.mode.CTR, padding: CryptoJS.pad.NoPadding, iv }\r\n    );\r\n    // console.log( \"decrypted: \", decrypted.toString() );\r\n\r\n    // Check PrivateKey\r\n    // ----------------------------------------------------------\r\n\r\n    // PrivateKey\r\n    // let privateKey = hexXor(decrypted.toString(), derived1);\r\n    const privateKey = decrypted.toString();\r\n    // console.log( \"privateKey: \", privateKey );\r\n    return privateKey;\r\n}\r\n\r\n/**\r\n * Checks if the password supplied to decrypt was correct.\r\n *\r\n * This method was taken out from decrypt, because it needs to create public key from private key\r\n * and it needs to be supplied from outside.\r\n *\r\n * @param saltOrAddress 4 hex encoded bytes salt or Address object\r\n * @param publicKeyEncoded Public key from decrypted key\r\n */\r\nexport function checkCtrDecrypted(saltOrAddress: string | Address, publicKeyEncoded: string): void {\r\n    // const assembled = ab2hexstring(Bs58check.decode(encryptedKey));\r\n    // let assembled = Buffer.from(encryptedKey, 'base64').toString('hex')\r\n\r\n    // console.log( \"assembled: \", assembled );\r\n\r\n    // const addressHash = assembled.substr(0, 8);\r\n    // console.log( \"addressHash: \", addressHash );\r\n\r\n    // console.log('publicKey', publicKey)\r\n    let salt = '';\r\n    if (typeof saltOrAddress === 'string' && saltOrAddress.length === 8) {\r\n        salt = saltOrAddress;\r\n    } else if (saltOrAddress instanceof Address) {\r\n        salt = saltOrAddress.getB58Checksum();\r\n    } else {\r\n        throw ERROR_CODE.INVALID_PARAMS;\r\n    }\r\n\r\n    const publicKey = PublicKey.deserializeHex(new StringReader(publicKeyEncoded));\r\n\r\n    // Address\r\n    const address = Address.fromPubKey(publicKey);\r\n    // console.log('address 2', address)\r\n\r\n    // AddressHash\r\n    const saltNew = address.getB58Checksum();\r\n\r\n    if (saltNew !== salt) {\r\n\r\n        // tslint:disable-next-line:no-console\r\n        console.log('keyphrase error.');\r\n\r\n        throw ERROR_CODE.Decrypto_ERROR;\r\n    }\r\n\r\n    // WIF\r\n    // let wifKey = privateKey.serializeWIF();\r\n    // console.log( \"wifKey: \", wifKey );\r\n}\r\n\r\n/**\r\n * Encrypt with aes-ecb\r\n */\r\nexport function encryptWithEcb(\r\n    privateKey: string,\r\n    publicKeyEncoded: string,\r\n    keyphrase: string,\r\n    scryptParams: ScryptParams = DEFAULT_SCRYPT\r\n): string {\r\n    const publicKey = PublicKey.deserializeHex(new StringReader(publicKeyEncoded));\r\n\r\n    const address = Address.fromPubKey(publicKey);\r\n    // console.log( \"address: \", address );\r\n\r\n    const addresshash = address.getB58Checksum();\r\n    // console.log( \"addresshash: \", addresshash );\r\n    // Scrypt\r\n    const derived = scrypt(keyphrase, addresshash, scryptParams).toString('hex');\r\n    const derived1 = derived.slice(0, 64);\r\n    const derived2 = derived.slice(64);\r\n\r\n    // AES Encrypt\r\n    const xor = hexXor(privateKey, derived1);\r\n    const encrypted = CryptoJS.AES.encrypt(\r\n        CryptoJS.enc.Hex.parse(xor),\r\n        CryptoJS.enc.Hex.parse(derived2),\r\n        { mode: CryptoJS.mode.ECB, padding: CryptoJS.pad.NoPadding });\r\n    // console.log( \"encrypted: \", encrypted.ciphertext.toString() );\r\n    // Construct\r\n    const assembled = OEP_HEADER + OEP_FLAG + addresshash + encrypted.ciphertext.toString();\r\n    // console.log( \"assembled: \", assembled );\r\n    return base58.encode(Buffer.from(assembled, 'hex'));\r\n}\r\n\r\n/**\r\n * Decrypt with aes-ecb\r\n */\r\nexport function decryptWithEcb(\r\n    encryptedKey: string,\r\n    keyphrase: string,\r\n    scryptParams: ScryptParams = DEFAULT_SCRYPT\r\n): string {\r\n    const assembled = ab2hexstring(base58.decode(encryptedKey));\r\n    // console.log( \"assembled: \", assembled );\r\n    const addressHash = assembled.substr(6, 8);\r\n    // console.log( \"addressHash: \", addressHash );\r\n    const encrypted = assembled.substr(-64);\r\n    // console.log( \"encrypted: \", encrypted );\r\n    // Scrypt\r\n    const derived = scrypt(keyphrase, addressHash, scryptParams).toString('hex');\r\n    const derived1 = derived.slice(0, 64);\r\n    const derived2 = derived.slice(64);\r\n\r\n    // AES Decrypt\r\n    const ciphertexts = { ciphertext: CryptoJS.enc.Hex.parse(encrypted), salt: '', iv: '' };\r\n    const decrypted = CryptoJS.AES.decrypt(\r\n        ciphertexts,\r\n        CryptoJS.enc.Hex.parse(derived2),\r\n        { mode: CryptoJS.mode.ECB, padding: CryptoJS.pad.NoPadding });\r\n    // console.log( \"decrypted: \", decrypted.toString() );\r\n    // Check PrivateKey\r\n    // ----------------------------------------------------------\r\n    // PrivateKey\r\n    const privateKey = hexXor(decrypted.toString(), derived1);\r\n    // console.log( \"privateKey: \", privateKey );\r\n    return privateKey;\r\n}\r\n\r\n/**\r\n * Checks if the password supplied to decrypt was correct.\r\n *\r\n * This method was taken out from decrypt, because it needs to create public key from private key\r\n * and it needs to be supplied from outside.\r\n *\r\n * @param encryptedKey Original encrypted key\r\n * @param decryptedKey Decrypted key with decrypt\r\n * @param publicKeyEncoded Public key from decrypted key\r\n */\r\nexport function checkEcbDecrypted(encryptedKey: string, decryptedKey: string, publicKeyEncoded: string): void {\r\n    const assembled = ab2hexstring(base58.decode(encryptedKey));\r\n    // console.log( \"assembled: \", assembled );\r\n    const addressHash = assembled.substr(6, 8);\r\n\r\n    const publicKey = PublicKey.deserializeHex(new StringReader(publicKeyEncoded));\r\n\r\n    // Address\r\n    const address = Address.fromPubKey(publicKey);\r\n    // console.log('address', address)\r\n    // AddressHash\r\n    const addressHashNew = address.getB58Checksum();\r\n\r\n    if (addressHashNew !== addressHash) {\r\n        // tslint:disable-next-line:no-console\r\n        console.log('keyphrase error.');\r\n        throw ERROR_CODE.Decrypto_ERROR;\r\n    }\r\n}\r\n\r\n/**\r\n * Encrypt with aes-gcm-256\r\n * This is the default encryption algorithm for private key\r\n * @param privateKey Private key to encpryt with\r\n * @param address Adderss to encrypt with\r\n * @param salt Salt to encrypt with\r\n * @param keyphrase User's password\r\n * @param scryptParams Optional params to encrypt\r\n */\r\nexport function encryptWithGcm(\r\n    privateKey: string,\r\n    address: Address,\r\n    salt: string,\r\n    keyphrase: string,\r\n    scryptParams: ScryptParams = DEFAULT_SCRYPT\r\n) {\r\n    if (!isHexString(privateKey)) {\r\n        throw new Error(ERROR_CODE.INVALID_PARAMS + ', Invalid private key');\r\n    }\r\n    const derived = scrypt(keyphrase, salt, scryptParams);\r\n    const derived1 = derived.slice(0, 12);\r\n    const derived2 = derived.slice(32);\r\n    const key = derived2;\r\n    const iv = derived1;\r\n    const aad = new Buffer(address.toBase58());\r\n    const cipher = createCipheriv('aes-256-gcm', key, iv);\r\n    cipher.setAAD(aad);\r\n    const plainText = Buffer.from(privateKey, 'hex');\r\n    let ciphertext = cipher.update(plainText);\r\n    // ciphertext += cipher.final();\r\n    const final = cipher.final();\r\n    const authTag = cipher.getAuthTag();\r\n    ciphertext = Buffer.concat([ciphertext, final]);\r\n\r\n    const result = Buffer.concat([ciphertext, authTag]);\r\n    return result.toString('base64');\r\n}\r\n\r\n/**\r\n * Decrypt with aes-256-gcm\r\n * @param encrypted Encrypted private key\r\n * @param address Address to decrypt with\r\n * @param salt Salt to decrypt with\r\n * @param keyphrase User's password\r\n * @param scryptParams Optioanl params to decrypt with\r\n */\r\nexport function decryptWithGcm(\r\n    // ciphertext: string,\r\n    // authTag: string,\r\n    encrypted: string,\r\n    address: Address,\r\n    salt: string,\r\n    keyphrase: string,\r\n    scryptParams: ScryptParams = DEFAULT_SCRYPT\r\n) {\r\n    if (salt.length !== 32) {\r\n        throw ERROR_CODE.INVALID_PARAMS;\r\n    }\r\n    const result = Buffer.from(encrypted, 'base64');\r\n    const ciphertext = result.slice(0, result.length - 16);\r\n    const authTag = result.slice(result.length - 16);\r\n    const derived = scrypt(keyphrase, salt, scryptParams);\r\n    const derived1 = derived.slice(0, 12);\r\n    const derived2 = derived.slice(32);\r\n    const key = derived2;\r\n    const iv = derived1;\r\n    const aad = new Buffer(address.toBase58());\r\n    // const auth = new Buffer(authTag, 'hex');\r\n    const decipher = createDecipheriv('aes-256-gcm', key, iv);\r\n    decipher.setAAD(aad);\r\n    decipher.setAuthTag(authTag);\r\n    let decrypted = decipher.update(ciphertext).toString('hex');\r\n\r\n    try {\r\n        decrypted += decipher.final().toString('hex');\r\n    } catch (err) {\r\n        throw ERROR_CODE.Decrypto_ERROR;\r\n    }\r\n    return decrypted;\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport * as b64 from 'base64-url';\r\nimport { num2hexstring, StringReader } from '../utils';\r\nimport { SignatureScheme } from './SignatureScheme';\r\n\r\n/**\r\n * Signature generated by signing data with Private Key.\r\n */\r\nexport class Signature {\r\n    static deserializeJWT(encoded: string, algorithm: SignatureScheme, publicKeyId: string): Signature {\r\n        const decoded = b64.decode(encoded, 'hex');\r\n\r\n        return new Signature(\r\n        algorithm,\r\n        decoded,\r\n        publicKeyId\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Deserializes PgpSignature to Signature.\r\n     * @param pgpSignature PgpSignature\r\n     */\r\n    static deserializePgp(pgpSignature: PgpSignature): Signature {\r\n        const value = new Buffer(pgpSignature.Value, 'base64').toString('hex');\r\n        const deserialzedValue = Signature.deserializeHex(value).value;\r\n        return new Signature(\r\n        SignatureScheme.fromLabel(pgpSignature.Algorithm),\r\n            deserialzedValue\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Deserializes hex representation to Signature\r\n     * @param data hex string\r\n     */\r\n    static deserializeHex(data: string): Signature {\r\n        if (data.length < 4) {\r\n            throw new Error('Invalid params.');\r\n        }\r\n        const sr = new StringReader(data);\r\n        const scheme = parseInt(sr.read(1), 16);\r\n        const sigScheme = SignatureScheme.fromHex(scheme);\r\n        const value = data.substr(2);\r\n        const sig = new Signature(sigScheme, value);\r\n        return sig;\r\n    }\r\n\r\n    algorithm: SignatureScheme;\r\n    value: string;\r\n\r\n    /**\r\n     * Public key Id used for create this signature.\r\n     *\r\n     */\r\n    publicKeyId?: string;\r\n\r\n    constructor(algorithm: SignatureScheme, value: string, publicKeyId?: string) {\r\n        this.algorithm = algorithm;\r\n        this.value = value;\r\n        this.publicKeyId = publicKeyId;\r\n    }\r\n\r\n    /**\r\n     * Serializes signature to Hex representation.\r\n     * For transfer to java backend and verify it.\r\n     */\r\n    serializeHex(): string {\r\n        let result = '';\r\n        result += num2hexstring(this.algorithm.hex);\r\n        result += this.value;\r\n        return result;\r\n\r\n    }\r\n\r\n    /**\r\n     * Serializes signature to PGP representation with optional PublicKeyId.\r\n     *\r\n     * @param keyId Whole Public Key Id in the form <ONTID>#keys-<id>\r\n     */\r\n    serializePgp(keyId?: string): PgpSignature {\r\n        const encoded = new Buffer(this.serializeHex(), 'hex').toString('base64');\r\n        return {\r\n            PublicKeyId: keyId,\r\n            Format: 'pgp',\r\n            Value: encoded,\r\n            Algorithm: this.algorithm.label\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Serializes signature to base64url format.\r\n     */\r\n    serializeJWT(): string {\r\n        return b64.encode(this.value, 'hex');\r\n    }\r\n}\r\n\r\n/**\r\n * PGP representation of the signature with embedded KeyId\r\n */\r\nexport interface PgpSignature {\r\n    PublicKeyId?: string;\r\n    Format: 'pgp';\r\n    Algorithm: string;\r\n    Value: string;\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport * as bip39 from 'bip39';\r\nimport * as elliptic from 'elliptic';\r\nimport * as secureRandom from 'secure-random';\r\nimport { sm2 } from 'sm.js';\r\nimport * as wif from 'wif';\r\nimport { DEFAULT_ALGORITHM, DEFAULT_SM2_ID, ONT_BIP44_PATH } from '../consts';\r\nimport { ERROR_CODE } from '../error';\r\nimport { decryptWithGcm, encryptWithGcm, ScryptParams } from '../scrypt';\r\nimport { ab2hexstring, hexstring2ab, isBase64, str2hexstr } from '../utils';\r\nimport { Address } from './address';\r\nimport { Key, KeyParameters } from './Key';\r\nimport { KeyType } from './KeyType';\r\nimport { PublicKey } from './PublicKey';\r\nimport { Signable } from './signable';\r\nimport { Signature } from './Signature';\r\nimport { SignatureScheme } from './SignatureScheme';\r\n\r\n// tslint:disable-next-line:no-var-requires\r\nconst HDKey = require('@ont-community/hdkey-secp256r1');\r\n\r\nexport class PrivateKey extends Key {\r\n  /**\r\n   * Generates random Private key using supplied Key type and parameters.\r\n   *\r\n   * If no Key type or parameters is supplied, default SDK key type with default parameters will be used.\r\n   *\r\n   * @param keyType The key type\r\n   * @param parameters The parameters for the key type\r\n   */\r\n    static random(keyType?: KeyType, parameters?: KeyParameters): PrivateKey {\r\n        if (keyType === undefined) {\r\n            keyType = KeyType.fromLabel(DEFAULT_ALGORITHM.algorithm);\r\n        }\r\n\r\n        if (parameters === undefined) {\r\n            parameters = KeyParameters.deserializeJson(DEFAULT_ALGORITHM.parameters);\r\n        }\r\n\r\n        return new PrivateKey(ab2hexstring(secureRandom(32)), keyType, parameters);\r\n    }\r\n\r\n    /**\r\n     * Creates PrivateKey from Wallet Import Format (WIF) representation.\r\n     *\r\n     * @param wifkey WIF private key representation\r\n     *\r\n     */\r\n    static deserializeWIF(wifkey: string): PrivateKey {\r\n        const key = ab2hexstring(wif.decode(wifkey, 128).privateKey);\r\n        return new PrivateKey(key);\r\n    }\r\n\r\n    /**\r\n     * Creates PrivateKey from mnemonic according to BIP39 protocol.\r\n     *\r\n     * @param mnemonic Space separated list of words\r\n     *\r\n     */\r\n    static generateFromMnemonic(mnemonic: string, derivePath: string = ONT_BIP44_PATH): PrivateKey {\r\n        if (mnemonic.split(' ').length < 12) {\r\n            throw ERROR_CODE.INVALID_PARAMS;\r\n        }\r\n        const seed = bip39.mnemonicToSeedHex(mnemonic);\r\n\r\n        // generate privateKey\r\n        // const pri = seed.substr(0, 64);\r\n        const hdkey = HDKey.fromMasterSeed(Buffer.from(seed, 'hex'));\r\n        const pri = hdkey.derive(derivePath);\r\n        const key = Buffer.from(pri.privateKey).toString('hex');\r\n        const privateKey = new PrivateKey(key);\r\n        return privateKey;\r\n    }\r\n\r\n    /**\r\n     * Signs the data with supplied private key using signature schema.\r\n     *\r\n     * If the signature schema is not provided, the default schema for this key type is used.\r\n     *\r\n     * This method is not suitable, if external keys (Ledger, TPM, ...) support is required.\r\n     *\r\n     * @param msg Hex encoded input data or Signable object\r\n     * @param schema Signing schema to use\r\n     * @param publicKeyId Id of public key\r\n     */\r\n    sign(msg: string | Signable, schema?: SignatureScheme, publicKeyId?: string): Signature {\r\n        if (schema === undefined) {\r\n            schema = this.algorithm.defaultSchema;\r\n        }\r\n\r\n        if (!this.isSchemaSupported(schema)) {\r\n            throw new Error('Signature schema does not match key type.');\r\n        }\r\n\r\n        // retrieves content to sign if not provided directly\r\n        if (typeof msg !== 'string') {\r\n            msg = msg.getSignContent();\r\n        }\r\n\r\n        let hash: string;\r\n        if (schema === SignatureScheme.SM2withSM3) {\r\n            // library sm.js (SM2withSM3) has implemented hashing as part of signing, therefore it is skipped\r\n            hash = msg;\r\n        } else {\r\n            hash = this.computeHash(msg, schema);\r\n        }\r\n\r\n        const signed = this.computeSignature(hash, schema);\r\n        return new Signature(schema, signed, publicKeyId);\r\n    }\r\n\r\n    /**\r\n     * Asynchroniously signs the data with supplied private key using signature schema.\r\n     *\r\n     * If the signature schema is not provided, the default schema for this key type is used.\r\n     *\r\n     * This method is suitable, if external keys (Ledger, TPM, ...) support is required.\r\n     *\r\n     * @param msg Hex encoded input data or Signable object\r\n     * @param schema Signing schema to use\r\n     * @param publicKeyId Id of public key\r\n     */\r\n    async signAsync(msg: string | Signable, schema?: SignatureScheme, publicKeyId?: string): Promise<Signature> {\r\n        return this.sign(msg, schema, publicKeyId);\r\n    }\r\n\r\n    /**\r\n     * Derives Public key out of Private key.\r\n     */\r\n    getPublicKey(): PublicKey {\r\n        switch (this.algorithm) {\r\n        case KeyType.ECDSA:\r\n            return this.getEcDSAPublicKey();\r\n        case KeyType.EDDSA:\r\n            return this.getEdDSAPublicKey();\r\n        case KeyType.SM2:\r\n            return this.getSM2PublicKey();\r\n        default:\r\n            throw new Error('Unsupported signature schema.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Decrypts encrypted private key with supplied password.\r\n     *\r\n     * @param keyphrase Password to decrypt with\r\n     * @param address For aad in decryption\r\n     * @param 16 secure random bytes\r\n     * @param params Optional Scrypt params\r\n     */\r\n    decrypt(keyphrase: string, address: Address, salt: string, params?: ScryptParams): PrivateKey {\r\n        // const decrypted = decrypt(this.key, keyphrase, checksum, params);\r\n        if (salt.length === 24 && isBase64(salt)) {\r\n            salt = Buffer.from(salt, 'base64').toString('hex');\r\n        }\r\n        const decrypted = decryptWithGcm(this.key, address, salt, keyphrase, params);\r\n        const decryptedKey = new PrivateKey(decrypted, this.algorithm, this.parameters);\r\n        // checkDecrypted(checksum, decryptedKey.getPublicKey().serializeHex());\r\n        const pk = decryptedKey.getPublicKey();\r\n        const addrTmp = Address.fromPubKey(pk);\r\n        if (addrTmp.toBase58() !== address.toBase58()) {\r\n            throw ERROR_CODE.Decrypto_ERROR;\r\n        }\r\n        return decryptedKey;\r\n    }\r\n\r\n    /**\r\n     * Encrypts private key with supplied password.\r\n     *\r\n     * @param keyphrase Password to encrypt with\r\n     * @param address For aad in encryption\r\n     * @param salt 16 secure random bytes\r\n     * @param params Optional Scrypt params\r\n     */\r\n    encrypt(keyphrase: string, address: Address, salt: string, params?: ScryptParams): PrivateKey {\r\n        // add address check\r\n        const publicKey = this.getPublicKey();\r\n        const addr = Address.fromPubKey(publicKey).toBase58();\r\n        if (addr !== address.toBase58()) {\r\n            throw ERROR_CODE.INVALID_ADDR;\r\n        }\r\n        const encrypted = encryptWithGcm(this.key, address, salt, keyphrase, params);\r\n        return new PrivateKey(encrypted, this.algorithm, this.parameters);\r\n    }\r\n\r\n    /**\r\n     * Derives Public key out of Private key using EcDSA algorithm.\r\n     */\r\n    getEcDSAPublicKey(): PublicKey {\r\n        const ec = new elliptic.ec(this.parameters.curve.preset);\r\n        const keyPair = ec.keyFromPrivate(this.key, 'hex');\r\n        const pk = keyPair.getPublic(true, 'hex');\r\n\r\n        return new PublicKey(pk, this.algorithm, this.parameters);\r\n    }\r\n\r\n    /**\r\n     * Derives Public key out of Private key using EdDSA algorithm.\r\n     */\r\n    getEdDSAPublicKey(): PublicKey {\r\n        const eddsa = new elliptic.eddsa(this.parameters.curve.preset);\r\n        const keyPair = eddsa.keyFromSecret(this.key, 'hex');\r\n        const pk = keyPair.getPublic(true, 'hex');\r\n\r\n        return new PublicKey(pk, this.algorithm, this.parameters);\r\n    }\r\n\r\n    /**\r\n     * Derives Public key out of Private key using SM2 algorithm.\r\n     */\r\n    getSM2PublicKey(): PublicKey {\r\n        const keyPair = sm2.SM2KeyPair(null, this.key);\r\n        const pk = keyPair.pubToString('compress');\r\n\r\n        return new PublicKey(pk, this.algorithm, this.parameters);\r\n    }\r\n\r\n    /**\r\n     * Computes signature of message hash using specified signature schema.\r\n     *\r\n     * @param hash Message hash\r\n     * @param schema Signature schema to use\r\n     */\r\n    computeSignature(hash: string, schema: SignatureScheme): string {\r\n        switch (schema) {\r\n        case SignatureScheme.ECDSAwithSHA224:\r\n        case SignatureScheme.ECDSAwithSHA256:\r\n        case SignatureScheme.ECDSAwithSHA384:\r\n        case SignatureScheme.ECDSAwithSHA512:\r\n        case SignatureScheme.ECDSAwithSHA3_224:\r\n        case SignatureScheme.ECDSAwithSHA3_256:\r\n        case SignatureScheme.ECDSAwithSHA3_384:\r\n        case SignatureScheme.ECDSAwithSHA3_512:\r\n        case SignatureScheme.ECDSAwithRIPEMD160:\r\n            return this.computeEcDSASignature(hash);\r\n        case SignatureScheme.EDDSAwithSHA512:\r\n            return this.computeEdDSASignature(hash);\r\n        case SignatureScheme.SM2withSM3:\r\n            return this.computeSM2Signature(hash);\r\n        default:\r\n            throw new Error('Unsupported signature schema.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Computes EcDSA signature of message hash. Curve name is derrived from private key.\r\n     *\r\n     * @param hash Message hash\r\n     */\r\n    computeEcDSASignature(hash: string): string {\r\n        const ec = new elliptic.ec(this.parameters.curve.preset);\r\n        const signed = ec.sign(hash, this.key, { canonical: true });\r\n        return Buffer.concat([\r\n            signed.r.toArrayLike(Buffer, 'be', 32),\r\n            signed.s.toArrayLike(Buffer, 'be', 32)\r\n        ]).toString('hex');\r\n    }\r\n\r\n    /**\r\n     * Computes EdDSA signature of message hash. Curve name is derrived from private key.\r\n     *\r\n     * @param hash Message hash\r\n     */\r\n    computeEdDSASignature(hash: string): string {\r\n        const eddsa = new elliptic.eddsa(this.parameters.curve.preset);\r\n        const signed = eddsa.sign(hash, this.key);\r\n        return signed.toHex().toLowerCase();\r\n    }\r\n\r\n    /**\r\n     * Computes SM2 signature of message hash.\r\n     *\r\n     * Only default SM2 ID is supported.\r\n     *\r\n     * @param hash Message hash\r\n     */\r\n    computeSM2Signature(hash: string): string {\r\n        const keyPair = sm2.SM2KeyPair(null, this.key);\r\n        const signed = keyPair.sign(hexstring2ab(hash));\r\n\r\n        const id = DEFAULT_SM2_ID;\r\n\r\n        return str2hexstr(id + '\\0') + signed.r + signed.s;\r\n    }\r\n\r\n    /**\r\n     * Gets Wallet Import Format (WIF) representation of the PrivateKey.\r\n     *\r\n     */\r\n    serializeWIF(): string {\r\n        return wif.encode(128, Buffer.from(this.key, 'hex'), true);\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\nimport { JsonKey, KeyParameters } from './Key';\r\nimport { KeyType } from './KeyType';\r\nimport { PrivateKey } from './PrivateKey';\r\n\r\n/**\r\n * Interface for Key deserializers\r\n */\r\nexport interface KeyDeserializer {\r\n    getType(): string;\r\n    deserialize(json: JsonKey): PrivateKey;\r\n}\r\n\r\n/**\r\n * Default private key deserializer.\r\n */\r\nexport class DefaultKeyDeserializer implements KeyDeserializer {\r\n    getType(): string {\r\n        return '';\r\n    }\r\n\r\n    deserialize(json: JsonKey): PrivateKey {\r\n        if (json.key != null) {\r\n            return new PrivateKey(\r\n                json.key,\r\n                KeyType.fromLabel(json.algorithm),\r\n                KeyParameters.deserializeJson(json.parameters)\r\n            );\r\n        } else {\r\n            throw new Error('Unsupported Key type.');\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Registered key deserializers\r\n */\r\nconst keyDeserializers: KeyDeserializer[] = [];\r\nconst defaultKeyDeserializer = new DefaultKeyDeserializer();\r\n\r\n/**\r\n * Registers new external deserializer for private keys.\r\n *\r\n * @param deserializer Deserializer instance\r\n */\r\nexport function registerKeyDeserializer(deserializer: KeyDeserializer) {\r\n    keyDeserializers.push(deserializer);\r\n}\r\n\r\n/**\r\n * Creates PrivateKey from Json representation.\r\n *\r\n * @param json Json private key representation\r\n *\r\n */\r\nexport function deserializeFromJson(json: JsonKey): PrivateKey {\r\n    if (json.external == null) {\r\n        return defaultKeyDeserializer.deserialize(json);\r\n    } else {\r\n        for (const deserializer of keyDeserializers) {\r\n            if (deserializer.getType() === json.external.type) {\r\n                return deserializer.deserialize(json);\r\n            }\r\n        }\r\n\r\n        throw new Error('Unsupported Key type.');\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\nexport enum ParameterType  {\r\n    Boolean = 'Boolean',\r\n    Integer = 'Integer',\r\n    ByteArray = 'ByteArray',\r\n    Interface = 'Interface',\r\n    Array = 'Array',\r\n    Struct = 'Struct',\r\n    Map = 'Map',\r\n    String  = 'String',\r\n    Int = 'Integer',\r\n    Long = 'Long', // value should be string\r\n    IntArray = 'IntArray',\r\n    LongArray = 'LongArray',\r\n    Address = 'Address'\r\n}\r\n\r\nexport enum ParameterTypeVal {\r\n    ByteArray = 0x00,\r\n    Boolean = 0x01,\r\n    Integer = 0x02,\r\n    Interface = 0x40,\r\n    Array = 0x80,\r\n    Struct = 0x81,\r\n    Map = 0x82\r\n}\r\n\r\n/**\r\n * Decribes the parameter.\r\n */\r\nexport class Parameter {\r\n    public name: string;\r\n    public type: ParameterType;\r\n    public value: any;\r\n    constructor(name: string, type: ParameterType, value: any) {\r\n        this.name = name;\r\n        this.type = type;\r\n        this.value = value;\r\n    }\r\n\r\n    getName(): string {\r\n        return this.name;\r\n    }\r\n\r\n    getType(): ParameterType {\r\n        return this.type;\r\n    }\r\n\r\n    getValue(): any {\r\n        return this.value;\r\n    }\r\n\r\n    setValue(value: any): boolean {\r\n        if (value.type === this.type && value.name === this.name && value.value != null) {\r\n            this.value = value.value;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport * as CTX from 'milagro-crypto-js';\r\nimport * as utils from '../utils';\r\n\r\n/**\r\n * Issuer\r\n *  Issuer in Anonymous Credential\r\n */\r\nexport class Issuer {\r\n\r\n    sk: SecretKey;\r\n    pk: IssuerPublicKey;\r\n    // AttrMap: Map<string, number>;\r\n    AttributeName: string[];\r\n\r\n    param: CryptoSuite;\r\n\r\n    constructor(curve: string) {\r\n        this.param = new CryptoSuite(curve);\r\n        this.sk = new SecretKey(this.param);\r\n    }\r\n\r\n    /* GenerateSk():SecretKey\r\n     *  generate a random secret key\r\n     */\r\n    GenerateSk(): SecretKey {\r\n        this.sk.Rand();\r\n        return this.sk;\r\n    }\r\n\r\n    /* GenerateKeyPair()\r\n     *  generate a random secret key\r\n     */\r\n    GenerateKeyPair() {\r\n        this.sk = SecretKey.GenerateSk(this.param);\r\n        this.pk = this.sk.GenerateIssuerPublicKey();\r\n    }\r\n\r\n    /* SetAttributeSet(AttributeName:string[])\r\n     *  generate a random secret key\r\n     */\r\n    SetAttributeSet(AttributeName: string[]) {\r\n        this.AttributeName = AttributeName;\r\n        this.pk.GenerateAttr(AttributeName);\r\n    }\r\n\r\n    /* Sign(Nym, attrs):Credential\r\n     *  sign a credential for a user\r\n     */\r\n    Sign(Nym: any, attrs: any[]): Credential {\r\n        // random e, s\r\n        const e = this.param.getRandBN();\r\n        const s = this.param.getRandBN();\r\n        const B = new this.param.ECP(); // B = g1 · HRand^s · Nym · MulAll(HAttrs[i]^(Attrs[i]))\r\n        B.copy(this.param.g1);\r\n        B.add(this.param.PAIR.G1mul(this.pk.h0, s));\r\n        B.add(Nym);\r\n        for (let i = 0; i < this.pk.attr.length; i++) {\r\n            B.add(this.param.PAIR.G1mul(this.pk.h[i], attrs[i]));\r\n        }\r\n\r\n        let A = new this.param.ECP(); // A = B^(1/(e+x))\r\n        const tmp = new this.param.BIG(); // tmp = (1/(e+x))\r\n        tmp.copy(e);\r\n        tmp.add(this.sk.value); // !!!!!!!!!!!\r\n        tmp.invmodp(this.param.order);\r\n\r\n        A = this.param.PAIR.G1mul(B, tmp);\r\n\r\n        const cred = new Credential(this.param);\r\n        cred.Set(A, B, e, s, attrs);\r\n        return cred;\r\n    }\r\n\r\n    /* GetPk()\r\n     *  get issuer's public key\r\n     */\r\n    GetPk(): IssuerPublicKey {\r\n        return IssuerPublicKey.COPY(this.pk);\r\n    }\r\n\r\n    /* GenerateSk():SecretKey\r\n     *  generate a random secret key\r\n     */\r\n    GenerateNonce(): any {\r\n        const nonce = this.param.getRandBN();\r\n        return nonce;\r\n    }\r\n\r\n    VerifyCredentialRequest(CR: any): boolean {\r\n        return this.pk.VerifyCredentialRequest(CR);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * User\r\n *  An user in Anonymous Credential\r\n *  Prover and Verifier are all user.\r\n */\r\nexport class User {\r\n\r\n    attrs: any[];\r\n\r\n    private sk: SecretKey;\r\n    private Nym: any;\r\n    // private pi: {\r\n    //     C: any,\r\n    //     S: any\r\n    // };\r\n\r\n    private Cred: Credential;\r\n\r\n    private ipk: IssuerPublicKey;\r\n\r\n    private param: CryptoSuite;\r\n\r\n    constructor(curve: string) {\r\n        this.param = new CryptoSuite(curve);\r\n    }\r\n\r\n    /* GenerateSk():SecretKey\r\n     *  generate a random secret key\r\n     */\r\n    GenerateSk(): SecretKey {\r\n        this.sk = SecretKey.GenerateSk(this.param);\r\n        return this.sk;\r\n    }\r\n\r\n    /* SetIpk(ipk:IssuerPublicKey)\r\n     *  save issuer's public key\r\n     */\r\n    SetIpk(ipk: IssuerPublicKey) {\r\n        this.ipk = IssuerPublicKey.COPY(ipk);\r\n    }\r\n\r\n    GenerateCrendentialRequest(nonce: any): any {\r\n        if (this.ipk === undefined) {\r\n            // tslint:disable-next-line:no-console\r\n            console.log('Please set ipk first.');\r\n            return;\r\n        }\r\n\r\n        const ipk = this.ipk;\r\n        const Nym = this.param.PAIR.G1mul(ipk.h_sk, this.sk.value); // Nym\r\n\r\n        const r = this.param.getRandBN(); // r\r\n        const t1 = this.param.PAIR.G1mul(ipk.h_sk, r); // t1\r\n\r\n        const C = this.param.hashToBN(t1, ipk.h_sk, Nym, nonce);\r\n\r\n        const S = this.param.BIG.modmul(C, this.sk.value, this.param.order);\r\n        S.add(r);\r\n        S.mod(this.param.order);\r\n\r\n        const pi = {\r\n            C,\r\n            S\r\n        };\r\n\r\n        const attrs = this.param.genAttrBN(ipk.attr);\r\n\r\n        this.Nym = Nym;\r\n        this.attrs = attrs;\r\n\r\n        const CR = {\r\n            Nym,\r\n            pi,\r\n            nonce,\r\n            attrs\r\n        };\r\n\r\n        return CR;\r\n    }\r\n\r\n    VerifyBBSplus(Cred: Credential): boolean {\r\n        // pk   <- ipk.w\r\n        // m    <- attrs\r\n        // sig  <- (A,E,s)\r\n\r\n        // check if\r\n        // e(A, g2^E * pk) == e(B, g2)\r\n        // and if\r\n        // B == g1 * HRand^s * Nym * (h1^m1 * ... * hL^mL)\r\n\r\n        const wg2e = new this.param.ECP2();\r\n        wg2e.copy(this.ipk.w);\r\n        wg2e.add(this.param.PAIR.G2mul(this.param.g2, Cred.sig.e));\r\n        wg2e.affine(); // ~!!!!use affine() after ECP's mul operation, for pairing.\r\n\r\n        const A = new this.param.ECP();\r\n        A.copy(Cred.sig.A);\r\n        A.affine();\r\n\r\n        let left = this.param.PAIR.ate(wg2e, A);\r\n        left = this.param.PAIR.fexp(left);\r\n\r\n        const B = new this.param.ECP();\r\n        B.copy(this.param.g1);\r\n        B.add(this.param.PAIR.G1mul(this.ipk.h0, Cred.sig.s));\r\n        B.add(this.Nym);\r\n\r\n        for (let i = 0; i < Cred.attrs.length; i++) {\r\n            B.add(this.param.PAIR.G1mul(this.ipk.h[i], Cred.attrs[i]));\r\n        }\r\n\r\n        B.affine();\r\n        let right = this.param.PAIR.ate(this.param.g2, B);\r\n        right = this.param.PAIR.fexp(right);\r\n\r\n        return left.equals(right);\r\n    }\r\n\r\n    SetCredential(Cred: Credential) {\r\n        this.Cred = new Credential(this.param);\r\n        this.Cred.Copy(Cred);\r\n        return true;\r\n    }\r\n\r\n    Prove(D: any[]) {\r\n        const ipk = this.ipk;\r\n        const Cred = this.Cred;\r\n\r\n        const r1 = this.param.getRandBN(); // r1\r\n\r\n        const A_ = this.param.PAIR.G1mul(Cred.sig.A, r1); // A'\r\n\r\n        const r3 = new this.param.BIG(0); // r3\r\n        r3.copy(r1);\r\n        r3.invmodp(this.param.order);\r\n\r\n        // tslint:disable-next-line:variable-name\r\n        let _e = new this.param.BIG(0); // -e\r\n        _e.copy(Cred.sig.e);\r\n        _e = this.param.BIG.modneg(_e, this.param.order);\r\n\r\n        const _A = this.param.PAIR.G1mul(A_, _e); // _A\r\n        _A.add(this.param.PAIR.G1mul(Cred.sig.B, r1));\r\n\r\n        const r2 = this.param.getRandBN(); // r2\r\n        // tslint:disable-next-line:variable-name\r\n        let _r2 = new this.param.BIG(0); // -r2\r\n        _r2.copy(r2);\r\n        _r2 = this.param.BIG.modneg(_r2, this.param.order);\r\n\r\n        const B_ = this.param.PAIR.G1mul(Cred.sig.B, r1); // B'\r\n        B_.add(this.param.PAIR.G1mul(ipk.h0, _r2));\r\n\r\n        // tslint:disable-next-line:variable-name\r\n        let s_ = this.param.BIG.modmul(r2, r3, this.param.order); // s'\r\n        s_ = this.param.BIG.modneg(s_, this.param.order);\r\n        s_.add(Cred.sig.s);\r\n        s_.mod(this.param.order);\r\n\r\n        // tslint:disable-next-line:variable-name\r\n        const r_a = []; // r_a[]\r\n        for (let i = 0; i < D.length; i++) {\r\n            if (D[i] === 0) {\r\n                r_a[i] = this.param.getRandBN();\r\n            } else {\r\n                r_a[i] = false;\r\n            }\r\n        }\r\n\r\n        // tslint:disable-next-line:variable-name\r\n        const r_e = this.param.getRandBN();\r\n        // tslint:disable-next-line:variable-name\r\n        const r_r2 = this.param.getRandBN();\r\n        // tslint:disable-next-line:variable-name\r\n        const r_r3 = this.param.getRandBN();\r\n        // tslint:disable-next-line:variable-name\r\n        const r_s_ = this.param.getRandBN();\r\n        // tslint:disable-next-line:variable-name\r\n        const r_sk = this.param.getRandBN();\r\n\r\n        const E = this.param.PAIR.G1mul(ipk.h_sk, r_sk); // E\r\n\r\n        const t1 = this.param.PAIR.G1mul(A_, r_e); // t1\r\n        t1.add(this.param.PAIR.G1mul(ipk.h0, r_r2));\r\n\r\n        const t2 = this.param.PAIR.G1mul(B_, r_r3); // t2\r\n        t2.add(this.param.PAIR.G1mul(ipk.h0, r_s_));\r\n        t2.add(this.param.PAIR.G1mul(E, new this.param.BIG(-1)));\r\n        for (let i = 0; i < r_a.length; i++) {\r\n            if (r_a[i] !== false) {\r\n                t2.add(this.param.PAIR.G1mul(ipk.h[i], r_a[i]));\r\n            }\r\n        }\r\n\r\n        // c' = H(A', _A, B', Nym, t1, t2, g1, HRand, h1, ... , hL, w)\r\n        // tslint:disable-next-line:variable-name\r\n        const c_ = this.param.hashToBN(\r\n            A_,\r\n            _A,\r\n            B_,\r\n            this.Nym,\r\n            t1,\r\n            t2,\r\n            this.param.g1,\r\n            ipk.h0,\r\n            ipk.h,\r\n            ipk.w\r\n        );\r\n\r\n        const nonce = this.param.getRandBN();\r\n        // c = H(nonce, c', (D, I))\r\n        const c = this.param.hashToBN(nonce, c_, D, this.attrs);\r\n\r\n        // tslint:disable-next-line:variable-name\r\n        const s_sk = new this.param.BIG(0);\r\n        s_sk.copy(r_sk);\r\n        s_sk.add(this.param.BIG.modmul(c, this.sk.value, this.param.order));\r\n        s_sk.mod(this.param.order);\r\n\r\n        // tslint:disable-next-line:variable-name\r\n        const s_a = [];\r\n        for (let i = 0; i < D.length; i++) {\r\n            if (D[i] === 0) {\r\n                s_a[i] = new this.param.BIG(0);\r\n                s_a[i].copy(r_a[i]);\r\n                s_a[i].sub(this.param.BIG.modmul(c, this.attrs[i], this.param.order));\r\n                s_a[i].mod(this.param.order);\r\n            } else {\r\n                s_a[i] = false;\r\n            }\r\n        }\r\n\r\n        // tslint:disable-next-line:variable-name\r\n        const s_e = new this.param.BIG(0);\r\n        s_e.copy(r_e);\r\n        s_e.sub(this.param.BIG.modmul(c, Cred.sig.e, this.param.order));\r\n        s_e.mod(this.param.order);\r\n\r\n        // tslint:disable-next-line:variable-name\r\n        const s_r2 = new this.param.BIG(0);\r\n        s_r2.copy(r_r2);\r\n        s_r2.add(this.param.BIG.modmul(c, r2, this.param.order));\r\n        s_r2.mod(this.param.order);\r\n\r\n        // tslint:disable-next-line:variable-name\r\n        const s_r3 = new this.param.BIG(0);\r\n        s_r3.copy(r_r3);\r\n        s_r3.add(this.param.BIG.modmul(c, r3, this.param.order));\r\n        s_r3.mod(this.param.order);\r\n\r\n        // tslint:disable-next-line:variable-name\r\n        const s_s_ = new this.param.BIG(0);\r\n        s_s_.copy(r_s_);\r\n        s_s_.sub(this.param.BIG.modmul(c, s_, this.param.order));\r\n        s_s_.mod(this.param.order);\r\n\r\n        const pi = {\r\n            c,\r\n            s_sk,\r\n            s_a,\r\n            s_e,\r\n            s_r2,\r\n            s_r3,\r\n            s_s_,\r\n            nonce\r\n        };\r\n\r\n        const proof = {\r\n            A_,\r\n            _A,\r\n            B_,\r\n            Nym: this.Nym,\r\n            pi\r\n        };\r\n\r\n        return proof;\r\n    }\r\n\r\n    Verify(proof: any, D: any[], attrs: any[]): boolean {\r\n        const ipk = this.ipk;\r\n\r\n        // make sure A is not infinity\r\n        const O = new this.param.ECP(0); // Add\r\n        // let O = new this.param.ECP(1); // Muliply\r\n        if (proof.A_.equals(O)) {\r\n            // tslint:disable-next-line:no-console\r\n            console.log('A\\' == O return true, verify failed.');\r\n            return false;\r\n        }\r\n\r\n        const A_ = new this.param.ECP();\r\n        A_.copy(proof.A_);\r\n        const w = new this.param.ECP2();\r\n        w.copy(ipk.w);\r\n        const _A = new this.param.ECP();\r\n        _A.copy(proof._A);\r\n        const g2Dup = new this.param.ECP2();\r\n        g2Dup.copy(this.param.g2);\r\n\r\n        A_.affine();\r\n        w.affine();\r\n        _A.affine();\r\n        g2Dup.affine();\r\n\r\n        let left = this.param.PAIR.ate(w, A_);\r\n        let right = this.param.PAIR.ate(g2Dup, _A);\r\n\r\n        left = this.param.PAIR.fexp(left);\r\n        right = this.param.PAIR.fexp(right);\r\n\r\n        if (!left.equals(right)) {\r\n            // tslint:disable-next-line:no-console\r\n            console.log('e(A\\', w) == e(_A, g2) return false, verify failed.');\r\n            return false;\r\n        }\r\n\r\n        _A.copy(proof._A);\r\n        // tslint:disable-next-line:variable-name\r\n        const _t1 = this.param.PAIR.G1mul(A_, proof.pi.s_e);\r\n        _t1.add(this.param.PAIR.G1mul(ipk.h0, proof.pi.s_r2));\r\n        _A.sub(proof.B_);\r\n        _t1.add(this.param.PAIR.G1mul(_A, this.param.BIG.modneg(proof.pi.c, this.param.order)));\r\n\r\n        // ~t2 : (B')^s_r3 · HRand^s_s' · HSk^(-s_sk) · MulAll(hi^(-s_ai)) · (g1·MulAll(hi^ai))^(-c)\r\n        // tslint:disable-next-line:variable-name\r\n        const _t2 = this.param.PAIR.G1mul(proof.B_, proof.pi.s_r3);\r\n        _t2.add(this.param.PAIR.G1mul(ipk.h0, proof.pi.s_s_));\r\n        _t2.add(\r\n            this.param.PAIR.G1mul(ipk.h_sk, this.param.BIG.modneg(proof.pi.s_sk, this.param.order))\r\n        );\r\n\r\n        const sum = new this.param.ECP();\r\n        sum.copy(this.param.g1);\r\n        for (let i = 0; i < D.length; i++) {\r\n            if (D[i] === 0) {\r\n                _t2.add(this.param.PAIR.G1mul(ipk.h[i], proof.pi.s_a[i]));\r\n            } else {\r\n                sum.add(this.param.PAIR.G1mul(ipk.h[i], attrs[i]));\r\n            }\r\n        }\r\n\r\n        _t2.add(this.param.PAIR.G1mul(sum, this.param.BIG.modneg(proof.pi.c, this.param.order)));\r\n\r\n        const c1 = this.param.hashToBN(\r\n            proof.A_,\r\n            proof._A,\r\n            proof.B_,\r\n            proof.Nym,\r\n            _t1,\r\n            _t2,\r\n            this.param.g1,\r\n            ipk.h0,\r\n            ipk.h,\r\n            ipk.w\r\n        );\r\n        const c2 = this.param.hashToBN(proof.pi.nonce, c1, D, attrs);\r\n\r\n        if (this.param.BIG.comp(c2, proof.pi.c) !== 0) {\r\n            // tslint:disable-next-line:no-console\r\n            console.log(\r\n                // tslint:disable-next-line:max-line-length\r\n                'c == H(nonce, H(A\\', _A, B\\', Nym, ~t1, ~t2, g1, HRand, h1, ... , hL, w), (D, I)) return false, verify failed.'\r\n            );\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * CryptoSuite\r\n *  contains everything in Paring Based Cryptography\r\n */\r\nexport class CryptoSuite {\r\n    curve: string;\r\n    ctx: any;\r\n    order: any;\r\n    PAIR: any;\r\n    ECP: any;\r\n    ECP2: any;\r\n    BIG: any;\r\n    rng: any;\r\n    g1: any;\r\n    g2: any;\r\n\r\n    constructor(curve: string) {\r\n        this.curve = curve;\r\n        this.ctx = new CTX(curve);\r\n\r\n        this.PAIR = this.ctx.PAIR;          // Set pairing interface\r\n        this.ECP = this.ctx.ECP;            // Set G1 interface\r\n        this.ECP2 = this.ctx.ECP2;          // Set G2 interface\r\n        this.BIG = this.ctx.BIG;            // Set BN interface\r\n        this.rng = new this.ctx.RAND();     // new random number generator\r\n\r\n        this.g1 = this.getG1Generator();       // g1\r\n        this.g2 = this.getG2Generator();       // g2\r\n        this.order = this.getOrder(); // n\r\n    }\r\n\r\n    getG1Generator() {\r\n        const g1 = new this.ctx.ECP(0);    // new G1\r\n        const x = new this.ctx.BIG(0);\r\n        const y = new this.ctx.BIG(0);\r\n        x.rcopy(this.ctx.ROM_CURVE.CURVE_Gx);\r\n        y.rcopy(this.ctx.ROM_CURVE.CURVE_Gy);\r\n        g1.setxy(x, y);\r\n        return g1;\r\n    }\r\n\r\n    getG2Generator() {\r\n        const g2 = new this.ctx.ECP2(0);\r\n        const x = new this.ctx.BIG(0);\r\n        const y = new this.ctx.BIG(0);\r\n        const qx = new this.ctx.FP2(0);\r\n        const qy = new this.ctx.FP2(0);\r\n        x.rcopy(this.ctx.ROM_CURVE.CURVE_Pxa);\r\n        y.rcopy(this.ctx.ROM_CURVE.CURVE_Pxb);\r\n        qx.bset(x, y);\r\n        x.rcopy(this.ctx.ROM_CURVE.CURVE_Pya);\r\n        y.rcopy(this.ctx.ROM_CURVE.CURVE_Pyb);\r\n        qy.bset(x, y);\r\n        g2.setxy(qx, qy);\r\n        return g2;\r\n    }\r\n\r\n    getOrder() {\r\n        const r = new this.ctx.BIG(0);     // new BN\r\n        r.rcopy(this.ctx.ROM_CURVE.CURVE_Order);\r\n        return r;\r\n    }\r\n\r\n    getRandBN(): any {\r\n        const buf = utils.generateRandomArray(256);\r\n        this.rng.clean();\r\n        this.rng.seed(256, buf);\r\n        const r = this.BIG.randomnum(this.order, this.rng);\r\n        return r;\r\n    }\r\n\r\n    getRandG1(): any {\r\n        const r = this.getRandBN();\r\n        const g = this.PAIR.G1mul(this.g1, r);\r\n        return g;\r\n    }\r\n\r\n    getRandG2(): any {\r\n        const r = this.getRandBN();\r\n        const g = this.PAIR.G2mul(this.g2, r);\r\n        return g;\r\n    }\r\n\r\n    hashToBN(...points: any[]): any {\r\n        let all: any[] = [];\r\n        let tmp: ConcatArray<any> = [];\r\n        points.forEach((p) => {\r\n            if (Array.isArray(p)) {\r\n                if (typeof p[0] === 'number') {\r\n                    all = all.concat(p);\r\n                    tmp = [];\r\n                } else {\r\n                    p.forEach((pp) => {\r\n                        pp.toBytes(tmp);\r\n                        all = all.concat(tmp);\r\n                        tmp = [];\r\n                    });\r\n                }\r\n            } else {\r\n                p.toBytes(tmp);\r\n                all = all.concat(tmp);\r\n                tmp = [];\r\n            }\r\n        });\r\n        const H = new this.ctx.HASH256();\r\n        H.process_array(all);\r\n        const R = H.hash();\r\n        const C = this.BIG.fromBytes(R);\r\n        C.mod(this.order);\r\n        return C;\r\n    }\r\n\r\n    genAttrBN(attrs: any): any {\r\n        const HAttr = [];\r\n\r\n        for (let i = 0; i < attrs.length; i++) {\r\n            const t = this.getRandBN();\r\n            HAttr[i] = t;\r\n        }\r\n\r\n        return HAttr;\r\n    }\r\n\r\n    genAttrElement(attrs: any): any {\r\n        const HAttr = [];\r\n\r\n        for (let i = 0; i < attrs.length; i++) {\r\n            const t = this.getRandG1();\r\n            HAttr[i] = t;\r\n        }\r\n\r\n        return HAttr;\r\n    }\r\n}\r\n\r\n/**\r\n * CryptoBase\r\n *  contains a refrence to a CryptoSuite instance.\r\n */\r\nexport class CryptoBase {\r\n    param: CryptoSuite;\r\n    constructor(param: CryptoSuite) {\r\n        this.param = param;\r\n    }\r\n}\r\n\r\nexport class SecretKey extends CryptoBase {\r\n    /*\r\n     * GenerateSk():SecretKey\r\n     * Generate a random secret key.\r\n     */\r\n    static GenerateSk(param: CryptoSuite): SecretKey {\r\n        const x = param.getRandBN(); // isk\r\n        const sk = new SecretKey(param);\r\n        sk.setValue(x);\r\n        return sk;\r\n    }\r\n\r\n    value: any;\r\n\r\n    constructor(param: CryptoSuite) {\r\n        super(param);\r\n        this.value = new this.param.BIG(0);\r\n    }\r\n\r\n    setValue(v: any) {\r\n        this.value.copy(v);\r\n    }\r\n\r\n    GenerateIssuerPublicKey(): IssuerPublicKey {\r\n        const x = this.value;\r\n        const w = this.param.PAIR.G2mul(this.param.g2, x); // w\r\n        let r = this.param.getRandBN(); // random number\r\n        // tslint:disable-next-line:variable-name\r\n        const _g1 = this.param.PAIR.G1mul(this.param.g1, r);\r\n        // tslint:disable-next-line:variable-name\r\n        const _g2 = this.param.PAIR.G1mul(_g1, x);\r\n\r\n        // zkp - pi\r\n        r = this.param.getRandBN();\r\n        const t1 = this.param.PAIR.G2mul(this.param.g2, r);\r\n        const t2 = this.param.PAIR.G1mul(_g1, r);\r\n\r\n        const C = this.param.hashToBN(t1, t2, this.param.g2, _g1, w, _g2);\r\n\r\n        const S = this.param.BIG.modmul(C, x, this.param.order);\r\n        S.add(r);\r\n        S.mod(this.param.order);\r\n\r\n        const pi = {\r\n            C,\r\n            S\r\n        };\r\n\r\n        const pk = new IssuerPublicKey(this.param);\r\n        pk.SetBasicValue(w, _g1, _g2, pi);\r\n        return pk;\r\n    }\r\n\r\n    /*\r\n     * ToBytes()\r\n     *  convert secret key to string format.\r\n     *  TODO:: add serialize function.\r\n     */\r\n    ToBytes() {\r\n        if (this.value === undefined) {\r\n            return '';\r\n        }\r\n        return this.value.toBytes();\r\n    }\r\n\r\n    /*\r\n     * FromString(s: any)\r\n     *  convert string to a SecretKey.\r\n     *  TODO:: add unserialize function.\r\n     */\r\n    FromBytes(s: any) {\r\n        this.value = this.param.BIG.fromBytes(s);\r\n        return this.value.toString();\r\n    }\r\n\r\n    /*\r\n     * GenerateSk():SecretKey\r\n     * Generate a random secret key.\r\n     */\r\n    Rand() {\r\n        const x = this.param.getRandBN(); // isk\r\n        this.setValue(x);\r\n    }\r\n\r\n}\r\n\r\nexport class IssuerPublicKey extends CryptoBase {\r\n    /*\r\n     * COPY(target: IssuerPublicKey):IssuerPublicKey\r\n     *  copy and return a new public key\r\n     */\r\n    static COPY(target: IssuerPublicKey): IssuerPublicKey {\r\n        const pk = new IssuerPublicKey(target.param);\r\n        pk.SetBasicValue(target.w, target._g1, target._g2, target.pi);\r\n        pk.SetAttrValue(target.h0, target.h_sk, target.h, target.attr);\r\n        return pk;\r\n    }\r\n\r\n    w: any;\r\n    // tslint:disable-next-line:variable-name\r\n    _g1: any;\r\n    // tslint:disable-next-line:variable-name\r\n    _g2: any;\r\n    pi: {\r\n        C: any,\r\n        S: any\r\n    };\r\n    h0: any;\r\n    // tslint:disable-next-line:variable-name\r\n    h_sk: any;\r\n    h: any;\r\n    attr: any[];\r\n\r\n    constructor(param: CryptoSuite) {\r\n        super(param);\r\n\r\n        this.w = new this.param.ECP2();\r\n        this._g1 = new this.param.ECP();\r\n        this._g2 = new this.param.ECP();\r\n\r\n        const C = new this.param.BIG();\r\n        const S = new this.param.BIG();\r\n        this.pi = {C, S};\r\n\r\n        this.h0 = new this.param.ECP();\r\n        this.h_sk = new this.param.ECP();\r\n        this.attr = [];\r\n    }\r\n\r\n    /*\r\n     * SetBasicValue(w, _g1, _g2, pi)\r\n     *  set basic values of the public key\r\n     */\r\n    // tslint:disable-next-line:variable-name\r\n    SetBasicValue(w: any, _g1: any, _g2: any, pi: any) {\r\n        this.w.copy(w);\r\n        this._g1.copy(_g1);\r\n        this._g2.copy(_g2);\r\n        this.pi.C.copy(pi.C);\r\n        this.pi.S.copy(pi.S);\r\n    }\r\n\r\n    /*\r\n     * SetAttrValue(h0, h_sk, h, attr)\r\n     *  set basic values of the public key\r\n     */\r\n    // tslint:disable-next-line:variable-name\r\n    SetAttrValue(h0: any, h_sk: any, h: any[], attr: any[]) {\r\n        this.h0.copy(h0);\r\n        this.h_sk.copy(h_sk);\r\n        this.h = [];\r\n        this.attr = [];\r\n\r\n        for (let i = 0; i < h.length; i++) {\r\n            this.h[i] = new this.param.ECP();\r\n            this.h[i].copy(h[i]);\r\n        }\r\n        for (let i = 0; i < attr.length; i++) {\r\n            this.attr[i] = attr[i];\r\n        }\r\n    }\r\n\r\n    /*\r\n     * GenerateAttr(AttributeName)\r\n     *  generates\r\n     *    ipk.h0: rand G1\r\n     *    ipk.h_sk: rand G1\r\n     *    ipk.h[]: Rand G1 array, match to AttributeName\r\n     */\r\n    GenerateAttr(AttributeName: any) {\r\n        const HAttr = this.param.genAttrElement(AttributeName);\r\n        const h0 = this.param.getRandG1();\r\n        // tslint:disable-next-line:variable-name\r\n        const h_sk = this.param.getRandG1();\r\n        const h: any[] = [];\r\n\r\n        HAttr.forEach((a: any) => {\r\n            h.push(a);\r\n        });\r\n\r\n        this.h0 = h0;\r\n        this.h_sk = h_sk;\r\n        this.h = h;\r\n        this.attr = AttributeName;\r\n    }\r\n\r\n    /*\r\n     * VerifyCredentialRequest(Nym, pi, n)\r\n     *  verifies user's credential request\r\n     */\r\n    VerifyCredentialRequest(CR: any): boolean {\r\n        const C = new this.param.BIG(0);\r\n        C.copy(CR.pi.C);\r\n\r\n        // tslint:disable-next-line:variable-name\r\n        const _t1 = this.param.PAIR.G1mul(this.h_sk, CR.pi.S);\r\n        _t1.add(this.param.PAIR.G1mul(CR.Nym, this.param.BIG.modneg(C, this.param.order)));\r\n\r\n        const _C = this.param.hashToBN(_t1, this.h_sk, CR.Nym, CR.nonce);\r\n\r\n        return this.param.BIG.comp(CR.pi.C, _C) === 0;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Credential\r\n *  The credential generated from issuer\r\n */\r\nexport class Credential extends CryptoBase {\r\n    sig: {\r\n        A: any,\r\n        B: any,\r\n        e: any,\r\n        s: any\r\n    };\r\n    attrs: any[];\r\n\r\n    constructor(param: CryptoSuite) {\r\n        super(param);\r\n        const A = new this.param.ECP();\r\n        const B = new this.param.ECP();\r\n        const e = new this.param.BIG();\r\n        const s = new this.param.BIG();\r\n        this.sig = {A, B, e, s};\r\n        this.attrs = [];\r\n    }\r\n\r\n    Set(A: any, B: any, e: any, s: any, attrs: any) {\r\n        this.sig.A.copy(A);\r\n        this.sig.B.copy(B);\r\n        this.sig.e.copy(e);\r\n        this.sig.s.copy(s);\r\n\r\n        for (let i = 0; i < attrs.length; i++) {\r\n            this.attrs[i] = new this.param.BIG();\r\n            this.attrs[i].copy(attrs[i]);\r\n        }\r\n    }\r\n\r\n    Copy(target: Credential) {\r\n        this.Set(target.sig.A, target.sig.B, target.sig.e, target.sig.s, target.attrs);\r\n    }\r\n\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport * as crypto from 'crypto';\r\nimport * as elliptic from 'elliptic';\r\nimport * as pkcs7 from 'pkcs7';\r\n\r\nexport class Ecies {\r\n    /**\r\n     * Algorithm used for encryption.\r\n     */\r\n    encAlg: string;\r\n    /**\r\n     * Hash Algorithm used for kdf.\r\n     */\r\n    hashAlg: string;\r\n    /**\r\n     * Hash digest byte size.\r\n     */\r\n    digestSize: number;\r\n    /**\r\n     * Key input and out put format.\r\n     */\r\n    keyFormat: string;\r\n    /**\r\n     * Initialized Vector\r\n     */\r\n    iv: Buffer;\r\n    /**\r\n     * Elliptic Curve instance\r\n     */\r\n    ec: any;\r\n    /**\r\n     * key pair from\r\n     * ec instance\r\n     */\r\n    keyPair: any;\r\n\r\n    /**\r\n     * if true, the pubkey will be\r\n     * in compressed format, begin with '02' or '03'.\r\n     * if false, begin with '04'\r\n     */\r\n    compact: boolean;\r\n\r\n    /**\r\n     * for curve name,\r\n     * go https://github.com/indutny/elliptic\r\n     * for reference\r\n     */\r\n    constructor(Curve?: string) {\r\n        // default setting\r\n        this.encAlg = 'aes-256-cbc';\r\n        this.hashAlg = 'sha256';\r\n        this.digestSize = 32;\r\n        this.keyFormat = 'hex';\r\n        this.compact = true;\r\n\r\n        // const curve = Curve || 'secp256r1';\r\n        const curve = Curve || 'p256';\r\n\r\n        this.ec = new elliptic.ec(curve);\r\n        this.keyPair = this.ec.genKeyPair();\r\n        this.iv = Buffer.alloc(0);\r\n    }\r\n    /**\r\n     * generate random key pair\r\n     */\r\n    generateKeyPair(): any {\r\n        this.keyPair = this.ec.genKeyPair();\r\n        return {\r\n            priv: this.keyPair.getPrivate('hex'),\r\n            pub: this.keyPair.getPublic(this.compact, 'hex')\r\n        };\r\n    }\r\n    /**\r\n     * set key pair with private key\r\n     * @param privHex private key in hex coding.\r\n     */\r\n    setKeyPair(privHex: string) {\r\n        this.keyPair = this.ec.keyFromPrivate(privHex, 'hex');\r\n    }\r\n    /**\r\n     * get key pair in use\r\n     * @return = {pri, pub}\r\n     * all in hex coding.\r\n     */\r\n    getKeyPair(): any {\r\n        return {\r\n            priv: this.keyPair.getPrivate('hex'),\r\n            pub: this.keyPair.getPublic(this.compact, 'hex')\r\n        };\r\n    }\r\n\r\n    /**\r\n     * encrypt a message with given\r\n     * public key and initialized vector\r\n     *\r\n     * @param pubkey hex string of public key\r\n     * @param msg byte buffer of message\r\n     * @param keylen byte length of kdf's output.\r\n     */\r\n    // tslint:disable-next-line:variable-name\r\n    enc(pubkey: string, msg: Buffer, keylen: number, _iv?: string): any {\r\n        const publicB = this.ec.keyFromPublic(pubkey, 'hex').getPublic();\r\n\r\n        // generate a random number\r\n        // r = (0, order)\r\n        const tmpKP = this.ec.genKeyPair();\r\n        const r = tmpKP.getPrivate();\r\n\r\n        const gTilde = tmpKP.getPublic();\r\n        const hTilde = publicB.mul(r);\r\n\r\n        const out = gTilde.encode('hex');\r\n        const PEH = hTilde.getX().toString('hex');\r\n        const seed = Buffer.from(out + PEH, 'hex');\r\n\r\n        const derivedKeyArray = this.kdf2(\r\n            seed,\r\n            keylen * 8,\r\n            this.digestSize,\r\n            this.hashAlg\r\n        );\r\n        if (!derivedKeyArray) {\r\n            return;\r\n        }\r\n        const derivedKey = Buffer.concat(derivedKeyArray);\r\n\r\n        let iv = Buffer.alloc(16);\r\n        if (!_iv) {\r\n            // generate a random iv, fixed size\r\n            crypto.randomFillSync(iv);\r\n        } else {\r\n            iv = Buffer.from(_iv, 'hex');\r\n        }\r\n\r\n        const algorithm = this.encAlg;\r\n\r\n        const cipher = crypto.createCipheriv(algorithm, derivedKey, iv);\r\n        cipher.setAutoPadding(false);\r\n\r\n        const msgCipher =\r\n            cipher.update(pkcs7.pad(msg), 'binary', 'hex') +\r\n            cipher.final('hex');\r\n\r\n        return {\r\n            iv: iv.toString('hex'),\r\n            out,\r\n            msgCipher\r\n        };\r\n    }\r\n    /**\r\n     * encrypt a message with given\r\n     * public key and initialized vector\r\n     *\r\n     * @param msgCipher\r\n     * @param out\r\n     * @param iv\r\n     * @param keylen\r\n     */\r\n    dec(msgCipher: string, out: string, iv: any, keylen: number): Buffer {\r\n        const gTilde = this.ec.keyFromPublic(out, 'hex').getPublic();\r\n\r\n        const hTilde = gTilde.mul(this.keyPair.getPrivate());\r\n        const PEH = hTilde.getX().toString('hex');\r\n        const seed = Buffer.from(out + PEH, 'hex');\r\n\r\n        const derivedKeyArray = this.kdf2(\r\n            seed,\r\n            keylen * 8,\r\n            this.digestSize,\r\n            this.hashAlg\r\n        );\r\n        if (!derivedKeyArray) {\r\n            return Buffer.alloc(0);\r\n        }\r\n        const derivedKey = Buffer.concat(derivedKeyArray);\r\n        const iv2 = Buffer.from(iv, 'hex');\r\n\r\n        const algorithm = this.encAlg;\r\n        const decipher = crypto.createDecipheriv(algorithm, derivedKey, iv2);\r\n        decipher.setAutoPadding(false);\r\n        const plain =\r\n            decipher.update(msgCipher, 'hex', 'binary') +\r\n            decipher.final('binary');\r\n\r\n        // un padding\r\n        const unpad = pkcs7.unpad(Buffer.from(plain, 'binary'));\r\n\r\n        return Buffer.from(unpad);\r\n    }\r\n\r\n    /* utils */\r\n    kdf2(\r\n        seed: Buffer,\r\n        len: number,\r\n        digestSize: number,\r\n        hashFunc: string\r\n    ): Buffer[] {\r\n        if (len < 0) {\r\n            return [];\r\n        }\r\n        const byteLen = Math.ceil(len / 8);\r\n        const b = Math.ceil(byteLen / digestSize);\r\n        const key = [];\r\n        const offset = byteLen - (b - 1) * digestSize; // byte offset\r\n\r\n        let counter = 1; // 1 for pbkdf2, 0 for pbkdf1\r\n\r\n        let hashIns;\r\n        while (counter < b) {\r\n            hashIns = crypto.createHash(hashFunc);\r\n            const h = hashIns\r\n                .update(Buffer.concat([seed, this.I2OSP(counter, 4)]))\r\n                .digest();\r\n            key[counter - 1] = Buffer.alloc(offset);\r\n            key[counter - 1] = h;\r\n            counter++;\r\n        }\r\n        hashIns = crypto.createHash(hashFunc);\r\n        const hEnd = hashIns\r\n            .update(Buffer.concat([seed, this.I2OSP(counter, 4)]))\r\n            .digest();\r\n        key[counter - 1] = Buffer.alloc(offset);\r\n        key[counter - 1] = hEnd;\r\n\r\n        return key;\r\n    }\r\n\r\n    I2OSP(num: number, len: number): Buffer {\r\n        const buf = Buffer.allocUnsafe(len);\r\n        buf.writeUIntBE(num, 0, len);\r\n        return buf;\r\n    }\r\n}\r\n","/*\r\n* Copyright (C) 2018 The ontology Authors\r\n* This file is part of The ontology library.\r\n*\r\n* The ontology is free software: you can redistribute it and/or modify\r\n* it under the terms of the GNU Lesser General Public License as published by\r\n* the Free Software Foundation, either version 3 of the License, or\r\n* (at your option) any later version.\r\n*\r\n* The ontology is distributed in the hope that it will be useful,\r\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n* GNU Lesser General Public License for more details.\r\n*\r\n* You should have received a copy of the GNU Lesser General Public License\r\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nimport { BigNumber } from 'bignumber.js';\r\nimport { reverseHex, StringReader } from '../utils';\r\n\r\nconst Fixed64Size = 8;\r\nexport default class Fixed64 {\r\n    static deserialize(sr: StringReader) {\r\n        const f = new Fixed64();\r\n        let v = sr.read(8);\r\n        // f.value = hexstr2str(v)\r\n        v = reverseHex(v);\r\n        while (v.substr(0, 2) === '00' ) {\r\n            v = v.substring(2);\r\n        }\r\n        f.value = new BigNumber(v, 16).toString();\r\n        return f;\r\n    }\r\n\r\n    // 8 bytes\r\n    value: string;\r\n    constructor(value?: string) {\r\n        if (value && value.length > 16 || value && !/^[0-9]\\d*$/.test(value)) {\r\n            throw new Error('Invalid value.' + value);\r\n        }\r\n        this.value = value || '0000000000000000';\r\n    }\r\n\r\n    serialize() {\r\n        // return str2hexstr(this.value)\r\n        let hexstring = new BigNumber(this.value).toString(16);\r\n        const size = Fixed64Size * 2;\r\n\r\n        hexstring = hexstring.length % size === 0\r\n            ? hexstring\r\n            : ('0'.repeat(size) + hexstring).substring(hexstring.length);\r\n\r\n        hexstring = reverseHex(hexstring);\r\n        return hexstring;\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport { Parameter } from './parameter';\r\n\r\n/**\r\n * Describes the Abi function\r\n */\r\nexport default class AbiFunction {\r\n    name: string;\r\n    returntype: string;\r\n    parameters: Parameter[];\r\n\r\n    constructor(name: string, returntype: string, parameters: Parameter[]) {\r\n        this.name = name;\r\n        this.returntype = returntype;\r\n        this.parameters = parameters;\r\n    }\r\n\r\n    getParameter(name: string): any {\r\n        // const p = {} as Parameter;\r\n\r\n        for (const v of this.parameters) {\r\n            if (v.getName() === name) {\r\n                return v;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    setParamsValue(...args: Parameter[]): void {\r\n        for (let i = 0, len = args.length; i < len; i++) {\r\n            // tslint:disable-next-line:prefer-for-of\r\n            for (let j = 0 ; j < this.parameters.length; j++) {\r\n                if (args[i].name === this.parameters[j].getName()) {\r\n                    this.parameters[j].setValue(args[i]);\r\n                }\r\n            }\r\n        }\r\n        // const parameters = [];\r\n        // for (let i = 0, len = args.length; i < len; i++) {\r\n        //     parameters.push(args[i]);\r\n        // }\r\n        // this.parameters = parameters;\r\n    }\r\n\r\n    toString(): string {\r\n        const json = {\r\n            name : this.name,\r\n            returntype : this.returntype,\r\n            parameters : this.parameters\r\n        };\r\n\r\n        return JSON.stringify(json);\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\nimport {\r\n    hex2VarBytes,\r\n    hexstr2str,\r\n    str2VarBytes,\r\n    StringReader\r\n} from '../../utils';\r\nimport { num2hexstring } from './../../utils';\r\nimport Payload from './payload';\r\n\r\nexport enum VmType  {\r\n    NEOVM_TYPE = 1,\r\n    WASMVM_TYPE = 3\r\n}\r\n\r\n/**\r\n * Describes the payload of deploy code\r\n */\r\nexport default class DeployCode extends Payload {\r\n    /**\r\n     * Hex encoded contract content\r\n     */\r\n    code: string;\r\n\r\n    /**\r\n     * Decides if the contract need storage(Deprecated)\r\n     * Change to VmType to support wasm vm\r\n     */\r\n    // needStorage: boolean;\r\n    vmType: VmType;\r\n    /**\r\n     * Name of the smart contract\r\n     */\r\n    name: string;\r\n    /**\r\n     * Version of the contract\r\n     */\r\n    version: string;\r\n    /**\r\n     * Author of the contract\r\n     */\r\n    author: string;\r\n    /**\r\n     * Email of the author\r\n     */\r\n    email: string;\r\n    /**\r\n     * Description of the contract\r\n     */\r\n    description: string;\r\n\r\n    /**\r\n     * Serialize deploy code to hex string\r\n     */\r\n    serialize(): string {\r\n        let result = '';\r\n\r\n        // result += this.code.serialize();\r\n        result += hex2VarBytes(this.code);\r\n\r\n        result += num2hexstring(this.vmType);\r\n\r\n        result += str2VarBytes(this.name);\r\n\r\n        result += str2VarBytes(this.version);\r\n\r\n        result += str2VarBytes(this.author);\r\n\r\n        result += str2VarBytes(this.email);\r\n\r\n        result += str2VarBytes(this.description);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Deserialize deploy code\r\n     * @param sr\r\n     */\r\n    deserialize(sr: StringReader): void {\r\n\r\n        // const code = VmCode.deserialize(sr);\r\n        const code = sr.readNextBytes();\r\n        this.code = code;\r\n\r\n        const type = sr.readUint8();\r\n        this.vmType = type;\r\n\r\n        const name = sr.readNextBytes();\r\n        this.name = hexstr2str(name);\r\n\r\n        const codeVersion = sr.readNextBytes();\r\n        this.version = hexstr2str(codeVersion);\r\n\r\n        const author = sr.readNextBytes();\r\n        this.author = hexstr2str(author);\r\n\r\n        const email = sr.readNextBytes();\r\n        this.email = hexstr2str(email);\r\n\r\n        const description = sr.readNextBytes();\r\n        this.description = hexstr2str(description);\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\nimport { hex2VarBytes, StringReader } from '../../utils';\r\nimport Payload from './payload';\r\n\r\nexport default class InvokeCode extends Payload {\r\n    // the length is of bytes 20\r\n    /*\r\n    scriptHash : string\r\n    parameters : Array<Parameter> = []\r\n    functionName : string\r\n     */\r\n\r\n    /**\r\n     * Hex encoed string\r\n     */\r\n    code: string;\r\n\r\n    constructor() {\r\n        super();\r\n        // this.gasLimit = new Fixed64()\r\n    }\r\n\r\n/*     serialize() : string {\r\n        let payloadLength\r\n        let paramsLength = num2hexstring( 0x50 + this.parameters.length) //start from '0x50'\r\n        const paramsEnd = 'c1'\r\n        let funcNameHex = str2hexstr(this.functionName)\r\n        const funcNameLength = num2hexstring(funcNameHex.length/2)\r\n\r\n        let params = []\r\n        for(let i = this.parameters.length-1; i > -1; i--) {\r\n            let p = this.parameters[i]\r\n            let hexP = p.getValue()\r\n            let hexPLength = num2VarInt( hexP.length / 2)\r\n            let opcode = ''\r\n            if( hexP.length/2 < OPCODE.PUSHBYTES75) {\r\n\r\n            } else if (hexP.length / 2 < 0x100) {\r\n                opcode = num2VarInt( OPCODE.PUSHDATA1 )\r\n            } else if( hexP.length/2 < 0x1000 ) {\r\n                opcode = num2hexstring( OPCODE.PUSHDATA2, 2, true)\r\n            } else {\r\n                opcode = num2hexstring( OPCODE.PUSHDATA4, 4, true)\r\n            }\r\n            params.push ({\r\n                hexPLength,\r\n                hexP,\r\n                opcode\r\n            })\r\n        }\r\n\r\n        let result = ''\r\n        //scripthash\r\n        // result += this.scriptHash\r\n        //params\r\n        for(let v of params) {\r\n            if(v.opcode) {\r\n                result += v.opcode\r\n            }\r\n            result += v.hexPLength\r\n            result += v.hexP\r\n        }\r\n        result += paramsLength\r\n        //end\r\n        result += paramsEnd\r\n        //function\r\n        result += funcNameLength\r\n        result += funcNameHex\r\n        let totalParamsLength = num2VarInt(result.length / 2)\r\n        //result = this.scriptHash + totalParamsLength + result\r\n\r\n        console.log('invode serialze: '+ result)\r\n\r\n        return result\r\n    }  */\r\n\r\n    serialize() {\r\n        let result = '';\r\n        // if(this.gasLimit) {\r\n        //     result += this.gasLimit.serialize()\r\n        // }\r\n        // result += this.code.serialize();\r\n        result += hex2VarBytes(this.code);\r\n        return result;\r\n    }\r\n\r\n    /* deserialize(ss : StringReader) : void {\r\n        //scriptHash, fixed langth\r\n        this.scriptHash = ss.read(20)\r\n        //payload total lenght\r\n        const payloadLen = ss.readNextLen()\r\n\r\n        //read params start\r\n        let params = []\r\n        let nextByte = ss.readNextLen()\r\n        //params's length start from 0x50\r\n        while(nextByte < 0x50) {\r\n            let p = ss.read(nextByte)\r\n            params.push(p)\r\n            nextByte = ss.readNextLen()\r\n        }\r\n        //params end\r\n        let end = ss.read(1)\r\n        console.log('end :' + end)\r\n        if(end === 'c1') {\r\n            for(let i=0; i< params.length; i++) {\r\n                //TODO can only get value\r\n                this.parameters.push(new Parameter('','',params[i]))\r\n            }\r\n        }\r\n        //function name\r\n        let funNameLen = ss.readNextLen()\r\n        let func = ss.read(funNameLen)\r\n        func = hexstr2str(func)\r\n        //payload end\r\n        this.functionName = func\r\n\r\n    }  */\r\n\r\n    deserialize(sr: StringReader) {\r\n        // let gasLimit = Fixed64.deserialize(sr);\r\n        // const code = VmCode.deserialize(sr);\r\n        const code = sr.readNextBytes();\r\n        // this.gasLimit = gasLimit;\r\n        this.code = code;\r\n        return this;\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport { BigNumber } from 'bignumber.js';\r\nimport { ab2hexstring, hexstring2ab, reverseHex, StringReader } from '../utils';\r\nimport BigInt from './bigInt';\r\n\r\nconst I128_SIZE = 16;\r\n\r\n// little endian i128\r\nexport class I128 {\r\n    static deserialize(sr: StringReader) {\r\n        const result = new I128();\r\n        const hex = sr.read(I128_SIZE);\r\n        const v = hexstring2ab(hex);\r\n        result.value = v;\r\n        return result;\r\n    }\r\n\r\n    value: number[] = new Array(I128_SIZE).fill(0);\r\n\r\n    constructor(value?: number[]) {\r\n        if (value && value.length !== I128_SIZE) {\r\n            throw new Error(`Invalid value: ${value} for I128.`);\r\n        }\r\n        if (value) {\r\n            this.value = value;\r\n        }\r\n    }\r\n\r\n    // little endian\r\n    compareTo(o: I128) {\r\n        const x = this.value;\r\n        const y = o.value;\r\n        for (let i = I128_SIZE - 1; i >= 0; i--) {\r\n            if (x[i] > y[i]) {\r\n                return 1;\r\n            }\r\n            if (x[i] < y[i]) {\r\n                return -1;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    serialize() {\r\n        const hex = ab2hexstring(this.value);\r\n        return hex;\r\n    }\r\n\r\n}\r\n\r\n// little endian u128\r\nexport class U128 {\r\n    static deserialize(sr: StringReader) {\r\n        const result = new U128();\r\n        const hex = sr.read(I128_SIZE);\r\n        const v = hexstring2ab(hex);\r\n\r\n        result.value = v;\r\n        return result;\r\n    }\r\n\r\n    value: number[] = new Array(I128_SIZE).fill(0);\r\n\r\n    constructor(value?: number[]) {\r\n        if (value && value.length !== I128_SIZE) {\r\n            throw new Error(`Invalid value: ${value} for U128.`);\r\n        }\r\n        if (value) {\r\n            this.value = value;\r\n        }\r\n    }\r\n\r\n    // little endian\r\n    compareTo(o: U128) {\r\n        const x = this.value;\r\n        const y = o.value;\r\n        for (let i = I128_SIZE - 1; i >= 0; i--) {\r\n            if (x[i] > y[i]) {\r\n                return 1;\r\n            }\r\n            if (x[i] < y[i]) {\r\n                return -1;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    serialize() {\r\n        const hex = ab2hexstring(this.value);\r\n        return hex;\r\n    }\r\n\r\n    toBigInt(): BigInt {\r\n        const hex = ab2hexstring(this.value);\r\n        const buf = reverseHex(hex);\r\n        return BigInt.fromHexstr(buf);\r\n    }\r\n\r\n    toI128(): I128 {\r\n        return new I128(this.value);\r\n    }\r\n\r\n}\r\n\r\nexport function oneBits128() {\r\n    const val = [];\r\n    for (let i = 0; i < I128_SIZE; i++) {\r\n        val[i] = 255;\r\n    }\r\n    const i128 = new I128(val);\r\n    return i128;\r\n}\r\n\r\nexport function bigPow(a: number, b: number): BigNumber {\r\n    return new BigNumber(a).pow(b);\r\n}\r\n\r\nexport const pow128 = bigPow(2, 128);\r\n\r\nexport const maxBigU128 = bigPow(2, 128).minus(1);\r\n\r\nexport const maxI128 = bigPow(2, 127).minus(1);\r\n\r\nexport const minI128 = bigPow(2, 127).negated();\r\n\r\nexport function I128FromInt(val: number) {\r\n    let i128 = new I128();\r\n    if (val < 0) {\r\n        i128 = oneBits128();\r\n    }\r\n    putUint64(i128.value, val);\r\n    return i128;\r\n}\r\n\r\nexport function I128FromBigInt(val: string) {\r\n    let valBN = new BigNumber(val);\r\n    if (valBN.isGreaterThan(maxI128) || valBN.isLessThan(minI128)) {\r\n        throw new Error('The value is out of I128 range');\r\n    }\r\n\r\n    if (valBN.isLessThan(0)) {\r\n        valBN = valBN.plus(pow128);\r\n    }\r\n    const size = I128_SIZE * 2;\r\n    let hexstring = valBN.toString(16);\r\n    hexstring = hexstring.length % size === 0 ? hexstring : ('0'.repeat(size) + hexstring).substring(hexstring.length);\r\n    hexstring = reverseHex(hexstring);\r\n    const bufRArray = hexstring2ab(hexstring);\r\n\r\n    const i128 = new I128();\r\n    const value = new Array(I128_SIZE).fill(0);\r\n    for (let i = 0; i < bufRArray.length; i++) {\r\n        value[i] = bufRArray[i];\r\n    }\r\n    i128.value = value;\r\n    return i128;\r\n}\r\n\r\nexport function putUint64(value: number[], val: number) {\r\n    value[0] = val & 0xFF;\r\n    val = val >> 8;\r\n    value[1] = val & 0xFF;\r\n    val = val >> 8;\r\n    value[2] = val & 0xFF;\r\n    val = val >> 8;\r\n    value[3] = val & 0xFF;\r\n    val = val >> 8;\r\n    value[4] = val & 0xFF;\r\n    val = val >> 8;\r\n    value[5] = val & 0xFF;\r\n    val = val >> 8;\r\n    value[6] = val & 0xFF;\r\n    val = val >> 8;\r\n    value[7] = val & 0xFF;\r\n}\r\n","/*\r\n* Copyright (C) 2018 The ontology Authors\r\n* This file is part of The ontology library.\r\n*\r\n* The ontology is free software: you can redistribute it and/or modify\r\n* it under the terms of the GNU Lesser General Public License as published by\r\n* the Free Software Foundation, either version 3 of the License, or\r\n* (at your option) any later version.\r\n*\r\n* The ontology is distributed in the hope that it will be useful,\r\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n* GNU Lesser General Public License for more details.\r\n*\r\n* You should have received a copy of the GNU Lesser General Public License\r\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\n/**\r\n * Struct is a special kind of parameter that used in smart contract.\r\n */\r\nexport default class Struct {\r\n    list: any[];\r\n\r\n    constructor() {\r\n        this.list = [];\r\n    }\r\n    /**\r\n     * Add arguments to struct.\r\n     * @param args Array of some kinds of value.\r\n     * Boolean, number, string, Address and Struct are supported.\r\n     */\r\n    add(...args: any[]) {\r\n        for (const a of args) {\r\n            this.list.push(a);\r\n        }\r\n    }\r\n}\r\n","/*\r\n* Copyright (C) 2018 The ontology Authors\r\n* This file is part of The ontology library.\r\n*\r\n* The ontology is free software: you can redistribute it and/or modify\r\n* it under the terms of the GNU Lesser General Public License as published by\r\n* the Free Software Foundation, either version 3 of the License, or\r\n* (at your option) any later version.\r\n*\r\n* The ontology is distributed in the hope that it will be useful,\r\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n* GNU Lesser General Public License for more details.\r\n*\r\n* You should have received a copy of the GNU Lesser General Public License\r\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nimport { BigNumber } from 'bignumber.js';\r\nimport BigInt from '../common/bigInt';\r\nimport { I128, I128FromBigInt, I128FromInt } from '../common/int128';\r\nimport { Address } from '../crypto';\r\nimport { ERROR_CODE } from '../error';\r\nimport AbiFunction from '../smartcontract/abi/abiFunction';\r\nimport { Parameter, ParameterType, ParameterTypeVal } from '../smartcontract/abi/parameter';\r\nimport Struct from '../smartcontract/abi/struct';\r\nimport {\r\n    // tslint:disable-next-line:max-line-length\r\n    ab2hexstring, bigIntFromBytes, hexstr2str, isHexString, num2hexstring, num2VarInt, str2hexstr, StringReader\r\n} from '../utils';\r\nimport opcode from './opcode';\r\nimport { pushHexString } from './program';\r\n\r\nexport const pushBool = (param: boolean) => {\r\n    let result = '';\r\n    if (param) {\r\n        result += num2hexstring(opcode.PUSHT);\r\n    } else {\r\n        result += num2hexstring(opcode.PUSHF);\r\n    }\r\n    return result;\r\n};\r\n\r\nexport const pushInt = (param: number, ledgerCompatible: boolean = true) => {\r\n    let result = '';\r\n    if (param === -1) {\r\n        result = num2hexstring(opcode.PUSHM1);\r\n    } else if (param === 0) {\r\n        result = num2hexstring(opcode.PUSH0);\r\n    } else if (param > 0 && param < 16) {\r\n        const num = opcode.PUSH1 - 1 + param;\r\n        result = num2hexstring(num);\r\n    } else {\r\n        const biHex = new BigInt(param.toString(), ledgerCompatible).toHexstr();\r\n        result = pushHexString(biHex);\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nexport const pushBigNum = (param: BigNumber, ledgerCompatible: boolean = true) => {\r\n    let result = '';\r\n    if (param.isEqualTo(-1)) {\r\n        result = num2hexstring(opcode.PUSHM1);\r\n    } else if (param.isEqualTo(0)) {\r\n        result = num2hexstring(opcode.PUSH0);\r\n    } else if (param.isGreaterThan(0) && param.isLessThan(16)) {\r\n        const num = opcode.PUSH1 - 1 + param.toNumber();\r\n        result = num2hexstring(num);\r\n    } else {\r\n        const biHex = new BigInt(param.toString(), ledgerCompatible).toHexstr();\r\n        result = pushHexString(biHex);\r\n    }\r\n    return result;\r\n};\r\n\r\nexport const getStructBytes = (val: Struct) => {\r\n    let result = '';\r\n    result += num2hexstring(ParameterTypeVal.Struct);\r\n    result += num2hexstring(val.list.length); // val is array-like\r\n    for (const v of val.list) {\r\n        if (typeof v === 'string') {// consider as hex string\r\n            result += num2hexstring(ParameterTypeVal.ByteArray);\r\n            result += pushHexString(v);\r\n        } else if (typeof v === 'number') {\r\n            result += num2hexstring(ParameterTypeVal.ByteArray);\r\n            result += pushHexString(num2VarInt(v));\r\n        } else {\r\n            throw ERROR_CODE.INVALID_PARAMS;\r\n        }\r\n    }\r\n    return result;\r\n};\r\n\r\nexport const getMapBytes = (val: Map<string, Parameter>) => {\r\n    let result = '';\r\n    result += num2hexstring(ParameterTypeVal.Map);\r\n    result += num2hexstring(val.size);\r\n    for (const k of val.keys()) {\r\n        result += num2hexstring(ParameterTypeVal.ByteArray);\r\n        result += pushHexString(str2hexstr(k));\r\n        const p = val.get(k);\r\n        if (p && p.getType() === ParameterType.ByteArray) {\r\n            result += num2hexstring(ParameterTypeVal.ByteArray);\r\n            result += pushHexString(p.getValue());\r\n        } else if (p && p.getType() === ParameterType.String) {\r\n            result += num2hexstring(ParameterTypeVal.ByteArray);\r\n            result += pushHexString(str2hexstr(p.getValue()));\r\n        } else if (p && p.getType() === ParameterType.Integer) {\r\n            result += num2hexstring(ParameterTypeVal.Integer);\r\n            result += pushHexString(num2VarInt(p.getValue()));\r\n        } else if (p && p.getType() === ParameterType.Long) {\r\n            result += num2hexstring(ParameterTypeVal.Integer);\r\n            result += pushHexString(num2VarInt(p.getValue()));\r\n        } else {\r\n            throw ERROR_CODE.INVALID_PARAMS;\r\n        }\r\n    }\r\n    return result;\r\n};\r\n\r\nexport const pushMap = (val: Map<string, any>, ledgerCompatible: boolean) => {\r\n    let result = '';\r\n    result += num2hexstring(opcode.NEWMAP);\r\n    result += num2hexstring(opcode.TOALTSTACK);\r\n    for (const k of val.keys()) {\r\n        result += num2hexstring(opcode.DUPFROMALTSTACK);\r\n        result += pushHexString(str2hexstr(k));\r\n        result += pushParam(val.get(k), ledgerCompatible);\r\n        result += num2hexstring(opcode.SETITEM);\r\n    }\r\n    result += num2hexstring(opcode.FROMALTSTACK);\r\n    return result;\r\n};\r\n\r\nexport const pushParam = (p: any, ledgerCompatible: boolean) => {\r\n    if (!p) {\r\n        throw Error('Parameter can not be undefined');\r\n    }\r\n    let result = '';\r\n    if (p.type === ParameterType.ByteArray) {\r\n        result += pushHexString(p.value);\r\n    } else if (p.type === ParameterType.Address) {\r\n        result += pushHexString(p.value.serialize());\r\n    } else if (p.type === ParameterType.String) {\r\n        result += pushHexString(str2hexstr(p.value));\r\n    } else if (p.type === ParameterType.Boolean) {\r\n        result += pushBool(Boolean(p.value));\r\n        result += num2hexstring(opcode.PUSH0);\r\n        result += num2hexstring(opcode.BOOLOR);\r\n    } else if (p.type === ParameterType.Map) {\r\n        result += pushMap(convertMap(p), ledgerCompatible);\r\n    } else if (p instanceof Map) {\r\n        result += pushMap(p, ledgerCompatible);\r\n    } else if (p.type === ParameterType.Array) {\r\n        for (let i = p.value.length - 1; i > -1; i--) {\r\n            result += pushParam(p.value[i], ledgerCompatible);\r\n        }\r\n        result += pushInt(p.value.length, ledgerCompatible);\r\n        result += num2hexstring(opcode.PACK);\r\n    } else if (p.type === ParameterType.Integer) {\r\n        result += pushInt(p.value, ledgerCompatible);\r\n        result += num2hexstring(opcode.PUSH0);\r\n        result += num2hexstring(opcode.ADD);\r\n    } else if (p.type === ParameterType.Long) {\r\n        result += pushBigNum(new BigNumber(p.value), ledgerCompatible);\r\n        result += num2hexstring(opcode.PUSH0);\r\n        result += num2hexstring(opcode.ADD);\r\n    } else {\r\n        throw Error('Invalid parameter type: ' + JSON.stringify(p));\r\n    }\r\n    return result;\r\n};\r\n\r\nexport const serializeAbiFunction = (abiFunction: AbiFunction, ledgerCompatible: boolean = true) => {\r\n    const list = [];\r\n    list.push(str2hexstr(abiFunction.name));\r\n    const tmp = [];\r\n    for (const p of abiFunction.parameters) {\r\n        if (p.getType() === ParameterType.String) {\r\n            tmp.push(str2hexstr(p.getValue()));\r\n        } else if (p.getType() === ParameterType.Long) {\r\n            tmp.push(new BigNumber(p.getValue()));\r\n        } else if (p.getType() === ParameterType.Map) {\r\n            tmp.push(convertMap(p));\r\n        } else if (p.getType() === ParameterType.Address) {\r\n            tmp.push(p.getValue().serialize());\r\n        } else {\r\n            tmp.push(p.getValue());\r\n        }\r\n    }\r\n    if (list.length > 0) {\r\n        list.push(tmp);\r\n    }\r\n    const result = createCodeParamsScript(list, ledgerCompatible);\r\n    return result;\r\n};\r\n\r\nexport function convertArray(list: Parameter[]): any {\r\n    const tmp = [];\r\n    for (const p of list) {\r\n        if (p.getType && p.getType() === ParameterType.String) {\r\n            tmp.push(str2hexstr(p.getValue()));\r\n        } else if (p.getType && p.getType() === ParameterType.Long) {\r\n            tmp.push(new BigNumber(p.getValue()));\r\n        } else if (p.getType && p.getType() === ParameterType.Array) {\r\n            tmp.push(convertArray(p.value));\r\n        } else if (p.getType && p.getType() === ParameterType.Map) {\r\n            tmp.push(convertMap(p));\r\n        } else if (p.getType && p.getType() === ParameterType.Address) {\r\n            tmp.push(p.getValue().serialize());\r\n        } else {\r\n            tmp.push(p.getValue ? p.getValue() : p);\r\n        }\r\n    }\r\n    return tmp;\r\n}\r\n\r\nexport function convertMap(p: Parameter): any {\r\n    const map = new Map();\r\n    for (const k of Object.keys(p.value)) {\r\n        const pVal = p.value[k];\r\n        // map.set(k, pVal);\r\n        if (pVal.type && pVal.type === ParameterType.Map) {\r\n            map.set(k, convertMap(pVal));\r\n        } else {\r\n            map.set(k, pVal);\r\n        }\r\n    }\r\n    return map;\r\n}\r\n\r\n/**\r\n * To deserialize the value return from smart contract invoke.\r\n * @param hexstr\r\n */\r\nexport function deserializeItem(sr: StringReader): any {\r\n    const t = parseInt(sr.read(1), 16);\r\n    if ( t === ParameterTypeVal.ByteArray) {\r\n        return sr.readNextBytes();\r\n    } else if (t === ParameterTypeVal.Boolean) {\r\n        return sr.readBoolean();\r\n    } else if (t === ParameterTypeVal.Integer) {\r\n        const v = bigIntFromBytes(sr.readNextBytes()).toNumber();\r\n        return v;\r\n    } else if (t === ParameterTypeVal.Array || t === ParameterTypeVal.Struct ) {\r\n        const length = sr.readNextLen();\r\n        const list = [];\r\n        for (let i = length; i > 0; i--) {\r\n            const ele = deserializeItem(sr);\r\n            list.push(ele);\r\n        }\r\n        return list;\r\n    } else if (t === ParameterTypeVal.Map ) {\r\n        const length = sr.readNextLen();\r\n        const map = new Map();\r\n        for (let i = length; i > 0; i--) {\r\n            const key = hexstr2str(deserializeItem(sr));\r\n            const value = deserializeItem(sr);\r\n            map.set(key, value);\r\n        }\r\n        return map;\r\n    } else {\r\n        throw Error('Invalid parameter type: ' + t);\r\n    }\r\n}\r\n\r\nexport const createCodeParamsScript = (list: any[], ledgerCompatible: boolean = true) => {\r\n    let result = '';\r\n    for (let i = list.length - 1; i >= 0; i--) {\r\n        const val = list[i];\r\n        if (typeof val === 'string') {\r\n            result += pushHexString(val);\r\n        } else if (typeof val === 'number') {\r\n            result += pushInt(val, ledgerCompatible);\r\n        } else if (typeof val === 'boolean') {\r\n            result += pushBool(val);\r\n        } else if (val instanceof BigNumber) {\r\n            result += pushBigNum(val, ledgerCompatible);\r\n        } else if (val instanceof Map) {\r\n            result += pushMap(val, ledgerCompatible);\r\n            // const mapBytes = getMapBytes(val);\r\n            // result += pushHexString(mapBytes);\r\n        } else if (val instanceof Struct) {\r\n            const structBytes = getStructBytes(val);\r\n            result += pushHexString(structBytes);\r\n        } else if (val instanceof Array) {\r\n            result += createCodeParamsScript(convertArray(val), ledgerCompatible);\r\n            result += pushInt(val.length, ledgerCompatible);\r\n            result += num2hexstring(opcode.PACK);\r\n        }\r\n    }\r\n    return result;\r\n};\r\n\r\n// deprecated\r\nexport const buildSmartContractParam = (functionName: string, params: Parameter[]) => {\r\n    let result = '';\r\n    for (let i = params.length - 1; i > -1; i--) {\r\n        const type = params[i].getType();\r\n        switch (type) {\r\n        case ParameterType.Boolean:\r\n            result += pushBool(params[i].getValue());\r\n            break;\r\n\r\n        case ParameterType.Integer:\r\n            result += pushInt(params[i].getValue());\r\n            break;\r\n\r\n        case ParameterType.String:\r\n            const value = str2hexstr(params[i].getValue());\r\n            result += pushHexString(value);\r\n            break;\r\n\r\n        case ParameterType.ByteArray:\r\n            result += pushHexString(params[i].getValue());\r\n            break;\r\n\r\n        case ParameterType.Map:\r\n            const mapBytes = getMapBytes(params[i].getValue());\r\n            result += pushHexString(mapBytes);\r\n            break;\r\n\r\n        case ParameterType.Struct:\r\n            const structBytes = getStructBytes(params[i].getValue());\r\n            result += pushHexString(structBytes);\r\n            break;\r\n        // case ParameterType.Array:\r\n        //     result += buildSmartContractParam(params[i].getValue());\r\n        //     result += pushInt(params[i].getValue().length);\r\n        //     result += num2hexstring(opcode.PACK);\r\n        //     break;\r\n        default:\r\n            throw new Error('Unsupported param type: ' + JSON.stringify(params[i]));\r\n        }\r\n    }\r\n\r\n    result += pushInt(params.length);\r\n    result += num2hexstring(opcode.PACK);\r\n\r\n    result += pushHexString(str2hexstr(functionName));\r\n\r\n    return result;\r\n};\r\n\r\nexport function buildWasmContractParam(params: Parameter[]): string {\r\n    let result = '';\r\n\r\n    for (const p of params) {\r\n        const type = p.getType();\r\n\r\n        switch (type) {\r\n        case ParameterType.String:\r\n            result += writeString(p.value);\r\n            break;\r\n        case ParameterType.Int:\r\n            result += I128FromInt(p.value).serialize();\r\n            break;\r\n        case ParameterType.Long:\r\n            result += I128FromBigInt(p.value).serialize();\r\n            break;\r\n        case ParameterType.ByteArray:\r\n            result += writeVarBytes(p.value);\r\n            break;\r\n        case ParameterType.Address:\r\n            result += writeAddress(p.value);\r\n            break;\r\n        case ParameterType.Boolean:\r\n            result += writeBool(p.value);\r\n            break;\r\n        case ParameterType.Array:\r\n            result += writeVarUint(p.value.length);\r\n            result += buildWasmContractParam(p.value);\r\n            break;\r\n        default:\r\n            throw new Error(`Not a supported type: ${p.type}`);\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function writeUint16(data: number): string {\r\n    return num2hexstring(data, 2, true);\r\n}\r\n\r\nexport function writeUint32(data: number): string {\r\n    return num2hexstring(data, 4, true);\r\n}\r\n\r\nexport function writeUint64(data: number): string {\r\n    return num2hexstring(data, 8, true);\r\n}\r\n\r\n// data is hexstring;\r\nexport function writeVarBytes(data: string): string {\r\n    if (!isHexString(data)) {\r\n        throw new Error('[writeVarBytes] The param is not hex string.');\r\n    }\r\n    let result = '';\r\n    result += num2VarInt(data.length / 2);\r\n    result += data;\r\n    return result;\r\n}\r\n\r\nexport function writeString(data: string): string {\r\n    return writeVarBytes(str2hexstr(data));\r\n}\r\n\r\nexport function writeAddress(data: Address): string {\r\n    return data.serialize();\r\n}\r\n\r\nexport function writeI128(data: I128): string {\r\n    return data.serialize();\r\n}\r\n\r\nexport function writeBool(data: boolean): string {\r\n    if (data) {\r\n        return '01';\r\n    } else {\r\n        return '00';\r\n    }\r\n}\r\n\r\nexport function writeVarUint(data: number): string {\r\n    const buf = [];\r\n    if (data < 0xFD) {\r\n        buf[0] = data;\r\n    } else if (data <= 0xFFFF) {\r\n        buf[0] = 0xFD;\r\n        putLittleEndianUint(buf, 1, 2, data);\r\n    } else if (data <= 0xFFFFFFFF) {\r\n        buf[0] = 0xFE;\r\n        putLittleEndianUint(buf, 1, 4, data);\r\n    } else {\r\n        buf[0] = 0xFF;\r\n        putLittleEndianUint(buf, 1, 8, data);\r\n    }\r\n    return ab2hexstring(buf);\r\n}\r\n\r\nfunction putLittleEndianUint(buf: number[], start: number, size: number, data: number) {\r\n    buf[start] = data;\r\n    for (let i = start + 1; i <= size; i++) {\r\n        data = data >> (8 * (i - 1));\r\n        buf[i] = data & 0xFF;\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\nimport { ERROR_CODE } from '../error';\r\nimport { hex2VarBytes, num2hexstring, StringReader } from '../utils';\r\n\r\nexport enum TransactionAttributeUsage {\r\n    Nonce           = 0x00,\r\n    Script          = 0x20,\r\n    DescriptionUrl  = 0x81,\r\n    Description     = 0x90\r\n}\r\n\r\n/**\r\n * @deprecated\r\n * TransactionAttribute\r\n * @property {number} usage - Identifying byte\r\n * @property {string} data - Data\r\n */\r\nexport class TransactionAttribute {\r\n    usage: TransactionAttributeUsage;\r\n    // hexstring\r\n    data: string;\r\n\r\n    serialize(): string {\r\n        let result = '';\r\n        result += num2hexstring(this.usage);\r\n        if (this.usage === TransactionAttributeUsage.Script) {\r\n            result += this.data;\r\n        } else if (this.usage === TransactionAttributeUsage.DescriptionUrl\r\n                || this.usage === TransactionAttributeUsage.Description\r\n                || this.usage === TransactionAttributeUsage.Nonce) {\r\n            result += hex2VarBytes(this.data);\r\n        } else {\r\n            throw ERROR_CODE.INVALID_PARAMS;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    deserialize(ss: StringReader): void {\r\n        // usage\r\n        const usage = parseInt(ss.read(1), 16);\r\n        // nonce\r\n        // const nonce = ss.read(8);\r\n        // get hash with publicKey;\r\n        const dataLen = ss.readNextLen();\r\n        const data = ss.read(dataLen);\r\n        this.usage = usage;\r\n        // this.nonce = nonce;\r\n        this.data = data;\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport * as cryptoJS from 'crypto-js';\r\nimport Fixed64 from '../common/fixed64';\r\nimport { Address } from '../crypto/address';\r\nimport { Signable } from '../crypto/signable';\r\nimport { ab2hexstring, generateRandomArray, num2hexstring, StringReader } from '../utils';\r\nimport DeployCode from './payload/deployCode';\r\nimport InvokeCode from './payload/invokeCode';\r\nimport Payload from './payload/payload';\r\nimport { TransactionAttribute } from './txAttribute';\r\nimport { TxSignature } from './txSignature';\r\n\r\nexport enum TxType  {\r\n    BookKeeper      = 0x02,\r\n    Claim           = 0x03,\r\n    Deploy          = 0xd0,\r\n    Invoke          = 0xd1,\r\n    Enrollment      = 0x04,\r\n    Vote            = 0x05,\r\n    InvokeWasm      = 0xd2\r\n}\r\n\r\nexport const TxName = {\r\n    BookKeeper: 'BookKeeper',\r\n    Claim: 'Claim',\r\n    Deploy: 'Deploy',\r\n    Invoke: 'Invoke',\r\n    Enrollment: 'Enrollment',\r\n    Vote: 'Vote'\r\n};\r\n\r\n/**\r\n * @deprecated. Transaction fee.\r\n */\r\nexport class Fee {\r\n    static deserialize(sr: StringReader): Fee {\r\n        const fee = new Fee();\r\n        const amount = Fixed64.deserialize(sr);\r\n        const payer = sr.read(20);\r\n        fee.amount = amount;\r\n        fee.payer = new Address(payer);\r\n        return fee;\r\n    }\r\n\r\n    amount: Fixed64;\r\n\r\n    // 20 bytes address\r\n    payer: Address;\r\n\r\n    serialize(): string {\r\n        let result = '';\r\n        result += this.amount.serialize();\r\n        result += this.payer.serialize();\r\n        return result;\r\n    }\r\n}\r\n\r\nexport class Transaction implements Signable {\r\n    static deserialize(hexstring: string): Transaction {\r\n        const tx = new Transaction();\r\n\r\n        // console.log(' hexstring' + hexstring)\r\n        const ss = new StringReader(hexstring);\r\n\r\n        tx.version = parseInt(ss.read(1), 16);\r\n        tx.type = parseInt(ss.read(1), 16);\r\n        tx.nonce = ss.read(4);\r\n        tx.gasPrice = Fixed64.deserialize(ss);\r\n        tx.gasLimit = Fixed64.deserialize(ss);\r\n        tx.payer = new Address(ss.read(20));\r\n        let payload;\r\n\r\n        switch (tx.type) {\r\n        case TxType.Invoke :\r\n            payload = new InvokeCode();\r\n            break;\r\n        case TxType.Deploy:\r\n            payload = new DeployCode();\r\n            break;\r\n        default :\r\n            payload = new InvokeCode();\r\n        }\r\n        payload.deserialize(ss);\r\n        tx.payload = payload;\r\n        tx.txAttributes = [];\r\n        tx.sigs = [];\r\n\r\n        const attributeLength = ss.readNextLen();\r\n        for (let i = 0; i < attributeLength; i++) {\r\n            const txAttribute = new TransactionAttribute();\r\n            txAttribute.deserialize(ss);\r\n            tx.txAttributes.push(txAttribute);\r\n        }\r\n\r\n        const sigLength = ss.readNextLen();\r\n        for (let i = 0; i < sigLength; i++) {\r\n            tx.sigs.push(TxSignature.deserialize(ss));\r\n        }\r\n\r\n        return tx;\r\n    }\r\n\r\n    /**\r\n     * Transaction type\r\n     */\r\n    type: TxType = 0xd1;\r\n\r\n    /**\r\n     * Version of transaction\r\n     */\r\n    version: number = 0x00;\r\n\r\n    /**\r\n     * Payload of transaction\r\n     */\r\n    payload: Payload;\r\n\r\n    /**\r\n     * Random hex string. 4 bytes.\r\n     */\r\n    nonce: string;\r\n\r\n    /**\r\n     * @deprecated\r\n     */\r\n    txAttributes: TransactionAttribute[] = [];\r\n\r\n    /**\r\n     * Gas price\r\n     */\r\n    gasPrice: Fixed64;\r\n\r\n    /**\r\n     * Gas limit\r\n     */\r\n    gasLimit: Fixed64;\r\n\r\n    /**\r\n     * Address to pay for gas\r\n     */\r\n    payer: Address;\r\n\r\n    /**\r\n     * Array of signatures\r\n     */\r\n    sigs: TxSignature[] = [];\r\n\r\n    constructor() {\r\n        this.nonce = ab2hexstring(generateRandomArray(4));\r\n        this.gasPrice = new Fixed64();\r\n\r\n        // const limit = num2hexstring(DEFAULT_GAS_LIMIT, 8, true);\r\n\r\n        this.gasLimit = new Fixed64();\r\n        this.payer = new Address('0000000000000000000000000000000000000000');\r\n    }\r\n\r\n    /**\r\n     * Serialize transaction to hex string\r\n     * The result is used to send to blockchain.\r\n     */\r\n    serialize(): string {\r\n        const unsigned = this.serializeUnsignedData();\r\n        const signed = this.serializeSignedData();\r\n\r\n        return unsigned + signed;\r\n    }\r\n\r\n    /**\r\n     * Serialize transaction data exclueds signatures\r\n     */\r\n    serializeUnsignedData() {\r\n        let result = '';\r\n        result += num2hexstring(this.version);\r\n        result += num2hexstring(this.type);\r\n\r\n        // nonce 4bytes\r\n        result += this.nonce;\r\n        result += this.gasPrice.serialize();\r\n        result += this.gasLimit.serialize();\r\n        result += this.payer.serialize();\r\n        result += this.payload.serialize();\r\n\r\n        // serialize transaction attributes\r\n        result += num2hexstring(this.txAttributes.length);\r\n        // tslint:disable-next-line:prefer-for-of\r\n        for (let i = 0; i < this.txAttributes.length; i++) {\r\n            result += this.txAttributes[i].serialize();\r\n        }\r\n        // result += num2hexstring(this.fee.length)\r\n        // for (let i=0 ; i< this.fee.length; i++) {\r\n        //     result += this.fee[i].amount.serialize()\r\n        //     result += this.fee[i].payer.serialize()\r\n        // }\r\n\r\n        // if(this.networkFee) {\r\n        //     result += this.networkFee.serialize()\r\n        // }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Serialize signatures\r\n     */\r\n    serializeSignedData() {\r\n        let result = '';\r\n        // programs\r\n        result += num2hexstring(this.sigs.length);\r\n        // tslint:disable-next-line:prefer-for-of\r\n        for (let i = 0; i < this.sigs.length; i++) {\r\n            result += this.sigs[i].serialize();\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Get the signable content\r\n     */\r\n    getSignContent() {\r\n        const data = this.serializeUnsignedData();\r\n\r\n        const ProgramHexString = cryptoJS.enc.Hex.parse(data);\r\n        const ProgramSha256 = cryptoJS.SHA256(ProgramHexString).toString();\r\n        const ProgramSha2562 = cryptoJS.SHA256(cryptoJS.enc.Hex.parse(ProgramSha256)).toString();\r\n\r\n        return ProgramSha2562;\r\n    }\r\n\r\n    /**\r\n     * Get the hash of transaction\r\n     * @deprecated Use getSignContent instead\r\n     */\r\n    getHash() {\r\n        return this.getSignContent();\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\nimport { PrivateKey, PublicKey, Signable, SignatureScheme } from '../crypto';\r\nimport { hex2VarBytes, StringReader } from '../utils';\r\nimport { getParamsFromProgram, getProgramInfo,\r\n    programFromMultiPubKey, programFromParams, programFromPubKey } from './program';\r\n\r\n/**\r\n * Signature generated by signing transaction hash with Private Keys.\r\n */\r\nexport class TxSignature {\r\n\r\n    /**\r\n     * Deserializes hex representation to Transaction Signature\r\n     *\r\n     * @param sr Hex string reader\r\n     */\r\n    static deserialize(sr: StringReader) {\r\n        const sig = new TxSignature();\r\n        // sig.pubKeys = [];\r\n        // const pubKeyLength = sr.readNextLen();\r\n\r\n        // for (let i = 0; i < pubKeyLength; i++) {\r\n        //     const serializedLength = sr.readNextLen();\r\n        //     const pk = PublicKey.deserializeHex(sr, serializedLength);\r\n        //     sig.pubKeys.push(pk);\r\n        // }\r\n\r\n        // sig.M = sr.readNextLen();\r\n        // sig.sigData = [];\r\n\r\n        // const dataLength = sr.readNextLen();\r\n        // for (let i = 0; i < dataLength; i++) {\r\n        //     const data = sr.readNextBytes();\r\n        //     sig.sigData.push(data);\r\n        // }\r\n        const invocationScript = sr.readNextBytes();\r\n        const verificationScript = sr.readNextBytes();\r\n        const sigData = getParamsFromProgram(invocationScript);\r\n        const info = getProgramInfo(verificationScript);\r\n        sig.M = info.M;\r\n        sig.pubKeys = info.pubKeys;\r\n        sig.sigData = sigData;\r\n        return sig;\r\n    }\r\n\r\n    /**\r\n     * Creates Transaction signature of hash with supplied private key and scheme.\r\n     *\r\n     * If the signature schemas is not provided, the default schemes for the key types are used.\r\n     *\r\n     * @param hash hash of the transaction or signable transaction\r\n     * @param privateKey Private key to use\r\n     * @param scheme Signature scheme to use\r\n     */\r\n    static create(hash: string | Signable, privateKey: PrivateKey, scheme?: SignatureScheme) {\r\n        const signature = new TxSignature();\r\n\r\n        signature.M = 1;\r\n        signature.pubKeys = [privateKey.getPublicKey()];\r\n        signature.sigData = [privateKey.sign(hash, scheme).serializeHex()];\r\n\r\n        return signature;\r\n    }\r\n\r\n    /**\r\n     * Creates Transaction signature of hash with supplied private key and scheme asynchroniously.\r\n     *\r\n     * If the signature schemas is not provided, the default schemes for the key types are used.\r\n     *\r\n     * @param hash hash of the transaction or signable transaction\r\n     * @param privateKey Private key to use\r\n     * @param scheme Signature scheme to use\r\n     */\r\n    static async createAsync(hash: string | Signable, privateKey: PrivateKey, scheme?: SignatureScheme) {\r\n        const signature = new TxSignature();\r\n\r\n        signature.M = 1;\r\n        signature.pubKeys = [privateKey.getPublicKey()];\r\n        signature.sigData = [(await privateKey.signAsync(hash, scheme)).serializeHex()];\r\n\r\n        return signature;\r\n    }\r\n\r\n    /**\r\n     * Public keys used to create this signature.\r\n     */\r\n    pubKeys: PublicKey[];\r\n\r\n    // Cardinality of the signature\r\n    M: number;\r\n\r\n    // Signature values\r\n    sigData: string[];\r\n\r\n    /**\r\n     * Serializes signature to Hex representation.\r\n     *\r\n     */\r\n    serialize(): string {\r\n        let result = '';\r\n        // result += num2hexstring(this.pubKeys.length);\r\n\r\n        // // tslint:disable-next-line:prefer-for-of\r\n        // for (let i = 0; i < this.pubKeys.length; i++) {\r\n        //     const serialized = this.pubKeys[i].serializeHex();\r\n        //     result += num2hexstring(serialized.length / 2);\r\n        //     result += serialized;\r\n        // }\r\n\r\n        // result += num2hexstring(this.M);\r\n\r\n        // result += num2hexstring(this.sigData.length);\r\n\r\n        // // tslint:disable-next-line:prefer-for-of\r\n        // for (let i = 0; i < this.sigData.length; i++) {\r\n        //     result += hex2VarBytes(this.sigData[i]);\r\n        // }\r\n        const invocationScript = programFromParams(this.sigData);\r\n        let verificationScript = '';\r\n        if (this.pubKeys.length === 0) {\r\n            throw new Error('No pubkeys in sig');\r\n        } else if (this.pubKeys.length === 1) {\r\n            verificationScript = programFromPubKey(this.pubKeys[0]);\r\n        } else {\r\n            verificationScript = programFromMultiPubKey(this.pubKeys, this.M);\r\n        }\r\n        result += hex2VarBytes(invocationScript);\r\n        result += hex2VarBytes(verificationScript);\r\n        return result;\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\nimport { Address } from '../crypto/address';\r\nimport { Transaction } from './transaction';\r\n\r\nexport class Transfer extends Transaction {\r\n    amount: number | string;\r\n    tokenType: string;\r\n    from: Address;\r\n    to: Address;\r\n    method: string;\r\n}\r\n","\r\nimport Fixed64 from '../common/fixed64';\r\nimport { NATIVE_INVOKE_NAME } from '../consts';\r\nimport { Address } from '../crypto';\r\nimport { num2hexstring, str2hexstr } from '../utils';\r\nimport OPCODE from './opcode';\r\nimport InvokeCode from './payload/invokeCode';\r\nimport { pushHexString } from './program';\r\nimport { pushInt } from './scriptBuilder';\r\nimport { Transaction, TxType } from './transaction';\r\nimport { Transfer } from './transfer';\r\n\r\n/**\r\n * Creates transaction to invoke native contract\r\n * @param funcName Function name of contract to call\r\n * @param params Parameters serialized in hex string\r\n * @param contractAddr Adderss of contract\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n * @param payer Address to pay for transaction gas\r\n */\r\nexport function makeNativeContractTx(\r\n    funcName: string,\r\n    params: string,\r\n    contractAddr: Address,\r\n    gasPrice?: string,\r\n    gasLimit?: string,\r\n    payer?: Address\r\n) {\r\n    let code = '';\r\n    code += params;\r\n    code += pushHexString(str2hexstr(funcName));\r\n    code += pushHexString(contractAddr.serialize());\r\n    code += pushInt(0);\r\n    code += num2hexstring(OPCODE.SYSCALL);\r\n    code += pushHexString(str2hexstr(NATIVE_INVOKE_NAME));\r\n    const payload = new InvokeCode();\r\n    payload.code = code;\r\n\r\n    let tx: Transaction;\r\n    if (funcName === 'transfer' || funcName === 'transferFrom') {\r\n        tx = new Transfer();\r\n    } else {\r\n        tx = new Transaction();\r\n    }\r\n\r\n    tx.type = TxType.Invoke;\r\n    tx.payload = payload;\r\n    if (gasLimit) {\r\n        tx.gasLimit = new Fixed64(gasLimit);\r\n    }\r\n    if (gasPrice) {\r\n        tx.gasPrice = new Fixed64(gasPrice);\r\n    }\r\n    if (payer) {\r\n        tx.payer = payer;\r\n    }\r\n    return tx;\r\n}\r\n","/*\r\n* Copyright (C) 2018 The ontology Authors\r\n* This file is part of The ontology library.\r\n*\r\n* The ontology is free software: you can redistribute it and/or modify\r\n* it under the terms of the GNU Lesser General Public License as published by\r\n* the Free Software Foundation, either version 3 of the License, or\r\n* (at your option) any later version.\r\n*\r\n* The ontology is distributed in the hope that it will be useful,\r\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n* GNU Lesser General Public License for more details.\r\n*\r\n* You should have received a copy of the GNU Lesser General Public License\r\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nimport { BigNumber } from 'bignumber.js';\r\nimport { Address } from '../../crypto/address';\r\nimport opcode from '../../transaction/opcode';\r\nimport { hex2VarBytes, num2hexstring, str2VarBytes } from '../../utils';\r\nimport { pushHexString } from './../../transaction/program';\r\nimport { pushBigNum, pushBool, pushInt } from './../../transaction/scriptBuilder';\r\nimport { Parameter, ParameterType } from './parameter';\r\nimport Struct from './struct';\r\n\r\nexport function buildParams(params: Parameter[]): string {\r\n    let result = '';\r\n    for (const p of params) {\r\n        const type = p.getType();\r\n        switch (type) {\r\n        case ParameterType.ByteArray:\r\n            result += hex2VarBytes(p.value);\r\n            break;\r\n        case ParameterType.Int:\r\n            result += num2hexstring(p.value, 4, true);\r\n            break;\r\n        case ParameterType.String:\r\n            result += str2VarBytes(p.value);\r\n            break;\r\n        case ParameterType.Address:\r\n            result += p.value.serialize();\r\n        default:\r\n            break;\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function createCodeParamScript(obj: any): string {\r\n    let result = '';\r\n    // Consider string as hexstr\r\n    if (typeof obj === 'string') {\r\n        result += pushHexString(obj);\r\n    } else if (typeof obj === 'boolean') {\r\n        result += pushBool(obj);\r\n    } else if (typeof obj === 'number') {\r\n        result += pushInt(obj);\r\n    } else if (obj instanceof BigNumber) {\r\n        result += pushBigNum(obj);\r\n    } else if (obj instanceof Address) {\r\n        result += pushHexString(obj.serialize());\r\n    } else if (obj instanceof Struct) {\r\n        for (const v of obj.list) {\r\n            result += createCodeParamScript(v);\r\n            result += num2hexstring(opcode.DUPFROMALTSTACK);\r\n            result += num2hexstring(opcode.SWAP);\r\n            result += num2hexstring(opcode.APPEND);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function buildNativeCodeScript(list: any[]) {\r\n    let result = '';\r\n    for (let i = list.length - 1; i >= 0; i--) {\r\n        const val = list[i];\r\n        // Consider string as hexstr\r\n        if (typeof val === 'string') {\r\n            result += pushHexString(val);\r\n        } else if (typeof val === 'boolean') {\r\n            result += pushBool(val);\r\n        } else if (typeof val === 'number') {\r\n            result += pushInt(val);\r\n        } else if (val instanceof BigNumber) {\r\n            result += pushBigNum(val);\r\n        } else if (val instanceof Address) {\r\n            result += pushHexString(val.serialize());\r\n        } else if (val instanceof Struct) {\r\n            result += pushInt(0);\r\n            result += num2hexstring(opcode.NEWSTRUCT);\r\n            result += num2hexstring(opcode.TOALTSTACK);\r\n            for (const v of val.list) {\r\n                result += createCodeParamScript(v);\r\n                result += num2hexstring(opcode.DUPFROMALTSTACK);\r\n                result += num2hexstring(opcode.SWAP);\r\n                result += num2hexstring(opcode.APPEND);\r\n            }\r\n            result += num2hexstring(opcode.FROMALTSTACK);\r\n        // } else if (Array.isArray(val) && isTypedArray(val, Struct)) {\r\n        //     result += pushInt(0);\r\n        //     result += num2hexstring(opcode.NEWSTRUCT);\r\n        //     result += num2hexstring(opcode.TOALTSTACK);\r\n        //     for (const s of val) {\r\n        //         result += createCodeParamScript(s);\r\n        //     }\r\n        //     result += num2hexstring(opcode.FROMALTSTACK);\r\n        //     result += pushInt(val.length);\r\n        //     result += num2hexstring(opcode.PACK);\r\n        } else if (Array.isArray(val)) {\r\n            result += buildNativeCodeScript(val);\r\n            result += pushInt(val.length);\r\n            result += num2hexstring(opcode.PACK);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function isTypedArray(arr: any[], type: any) {\r\n    let result = true;\r\n    for (const a of arr) {\r\n        if (!(a instanceof type)) {\r\n            result = false;\r\n            break;\r\n        }\r\n    }\r\n    return result;\r\n}\r\n","/*\r\n* Copyright (C) 2018 The ontology Authors\r\n* This file is part of The ontology library.\r\n*\r\n* The ontology is free software: you can redistribute it and/or modify\r\n* it under the terms of the GNU Lesser General Public License as published by\r\n* the Free Software Foundation, either version 3 of the License, or\r\n* (at your option) any later version.\r\n*\r\n* The ontology is distributed in the hope that it will be useful,\r\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n* GNU Lesser General Public License for more details.\r\n*\r\n* You should have received a copy of the GNU Lesser General Public License\r\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\nimport { BigNumber } from 'bignumber.js';\r\nimport BigInt from '../../common/bigInt';\r\nimport { TOKEN_TYPE } from '../../consts';\r\nimport { Address } from '../../crypto';\r\nimport { ERROR_CODE } from '../../error';\r\nimport { Transaction } from '../../transaction/transaction';\r\nimport { Transfer } from '../../transaction/transfer';\r\nimport { hex2VarBytes, hexstr2str, StringReader } from '../../utils';\r\nimport { makeNativeContractTx } from './../../transaction/transactionUtils';\r\nimport { buildNativeCodeScript } from './../abi/nativeVmParamsBuilder';\r\nimport Struct from './../abi/struct';\r\nimport { State } from './token';\r\n\r\nexport const ONT_CONTRACT = '0000000000000000000000000000000000000001';\r\nexport const ONG_CONTRACT = '0000000000000000000000000000000000000002';\r\n\r\n/**\r\n * Get the address of native asset contract\r\n * @param tokenType Token type. Can only be ONT or ONG\r\n */\r\nexport function getTokenContract(tokenType: string) {\r\n    if (tokenType === TOKEN_TYPE.ONT) {\r\n        return new Address(ONT_CONTRACT);\r\n    } else if (tokenType === TOKEN_TYPE.ONG) {\r\n        return new Address(ONG_CONTRACT);\r\n    } else {\r\n        throw new Error('Error token type.');\r\n    }\r\n}\r\n\r\n/**\r\n * Verify amount\r\n * @param amount Amount\r\n */\r\nexport function verifyAmount(amount: number | string) {\r\n    const value = new BigNumber(amount);\r\n\r\n    if (!value.isInteger() || value.lte(new BigNumber(0))) {\r\n        throw new Error('Amount is invalid.');\r\n    }\r\n}\r\n\r\n/**\r\n * Creates transaction to transfer native assets.\r\n * @param tokenType ONT or ONG\r\n * @param from sender's address\r\n * @param to receiver's address\r\n * @param amount Amount of amount to transfer\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n * @param payer Address to pay for transaction's gas.\r\n */\r\nexport function makeTransferTx(\r\n    tokenType: string,\r\n    from: Address,\r\n    to: Address,\r\n    amount: number | string,\r\n    gasPrice: string,\r\n    gasLimit: string,\r\n    payer?: Address\r\n): Transfer {\r\n    verifyAmount(amount);\r\n    const num = new BigNumber(amount);\r\n    const struct = new Struct();\r\n    struct.add(from, to, num);\r\n    const list = [];\r\n    list.push([struct]);\r\n    const contract = getTokenContract(tokenType);\r\n    const params = buildNativeCodeScript(list);\r\n    const tx: Transfer = makeNativeContractTx('transfer', params, contract, gasPrice, gasLimit) as any;\r\n    tx.tokenType = tokenType;\r\n    tx.from = from;\r\n    tx.to = to;\r\n    tx.amount = amount;\r\n    tx.method = 'transfer';\r\n\r\n    if (payer) {\r\n        tx.payer = payer;\r\n    } else {\r\n        tx.payer = from;\r\n    }\r\n    return tx;\r\n}\r\n\r\n/**\r\n * transfer from multiple senders to one receiver\r\n * this tx needs multiple senders' signature.\r\n * @param tokenType\r\n * @param from array of senders' address\r\n * @param to receiver's address\r\n * @param amounts\r\n */\r\nexport function makeTransferStateTx(\r\n    tokenType: string,\r\n    states: State[],\r\n    gasPrice: string,\r\n    gasLimit: string,\r\n    payer?: Address\r\n): Transaction {\r\n    const structs = [];\r\n    for (const state of states) {\r\n        verifyAmount(state.value);\r\n        const s = new Struct();\r\n        s.add(state.from, state.to, new BigNumber(state.value));\r\n        structs.push(s);\r\n    }\r\n\r\n    const list = [];\r\n    list.push(structs);\r\n    const params = buildNativeCodeScript(list);\r\n    const contract = getTokenContract(tokenType);\r\n    const tx = makeNativeContractTx('transfer', params, contract, gasPrice, gasLimit);\r\n    if (payer) {\r\n        tx.payer = payer;\r\n    }\r\n    return tx;\r\n}\r\n\r\n/**\r\n * transfer from one sender to multiple receivers\r\n * @param tokenType\r\n * @param from\r\n * @param to\r\n * @param amounts\r\n */\r\nexport function makeTransferToMany(\r\n    tokenType: string,\r\n    from: Address,\r\n    to: Address[],\r\n    amounts: string | number [],\r\n    gasPrice: string,\r\n    gasLimit: string\r\n): Transaction {\r\n\r\n    if (to.length !== amounts.length) {\r\n        throw new Error('Params error.');\r\n    }\r\n\r\n    const structs = [];\r\n    for (let i = 0; i < to.length; i++) {\r\n        verifyAmount(amounts[i]);\r\n        const s = new Struct();\r\n        s.add(from, to[i], new BigNumber(amounts[i]));\r\n        structs.push(s);\r\n    }\r\n\r\n    const list = [];\r\n    list.push(structs);\r\n\r\n    const contract = getTokenContract(tokenType);\r\n    const params = buildNativeCodeScript(list);\r\n    const tx: Transfer = makeNativeContractTx('transfer', params, contract, gasPrice, gasLimit) as any;\r\n    tx.payer = from;\r\n    return tx;\r\n}\r\n\r\n/**\r\n * Withdraw ong from sender's address and send to receiver's address\r\n * @param from Sender's address\r\n * @param to Receiver's address\r\n * @param amount Amount of ONG to withdraw.The value needs to multiply 1e9 to keep precision\r\n * @param payer Address to pay for transaction's gas\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n */\r\nexport function makeWithdrawOngTx(from: Address, to: Address, amount: number | string, payer: Address,\r\n                                  gasPrice: string, gasLimit: string): Transfer {\r\n    verifyAmount(amount);\r\n    const num = new BigNumber(amount);\r\n\r\n    // const tf = new TransferFrom(from, new Address(ONT_CONTRACT), to, amount);\r\n    // const params = tf.serialize();\r\n    const list = [];\r\n    const struct = new Struct();\r\n    struct.add(from, new Address(ONT_CONTRACT), to, num);\r\n    list.push(struct);\r\n    const args = buildNativeCodeScript(list);\r\n    const tx: Transfer = makeNativeContractTx(\r\n        'transferFrom', args, new Address(ONG_CONTRACT) , gasPrice, gasLimit) as any;\r\n    tx.payer = payer;\r\n    tx.tokenType = 'ONG';\r\n    tx.from = from;\r\n    tx.to = to;\r\n    tx.amount = amount;\r\n    tx.method = 'transferFrom';\r\n    return tx;\r\n}\r\n\r\n/**\r\n * Creates transaction to query allowance that can be sent from sender to receiver\r\n * @param asset Asset type. Only ONT or ONg.\r\n * @param from Sender's address\r\n * @param to Receiver's address\r\n */\r\nexport function makeQueryAllowanceTx(asset: string, from: Address, to: Address): Transaction {\r\n    asset = asset.toLowerCase();\r\n    if (asset !== 'ont' && asset !== 'ong') {\r\n        throw ERROR_CODE.INVALID_PARAMS;\r\n    }\r\n\r\n    let contract = '';\r\n    if (asset === 'ong') {\r\n        contract = ONG_CONTRACT;\r\n    } else {\r\n        contract = ONT_CONTRACT;\r\n    }\r\n    const list = [];\r\n    const struct = new Struct();\r\n    struct.add(from, to);\r\n    list.push(struct);\r\n    const params = buildNativeCodeScript(list);\r\n    const tx = makeNativeContractTx('allowance', params, new Address(contract), '0', '0');\r\n    return tx;\r\n}\r\n\r\n/**\r\n * Creates transaction to query balance.\r\n * @param asset Token type,ont or ong\r\n * @param address Address to query balance\r\n */\r\nexport function makeQueryBalanceTx(asset: string,  address: Address): Transaction {\r\n    asset = asset.toLowerCase();\r\n    if (asset !== 'ont' && asset !== 'ong') {\r\n        throw ERROR_CODE.INVALID_PARAMS;\r\n    }\r\n    let contract = '';\r\n    if (asset === 'ong') {\r\n        contract = ONG_CONTRACT;\r\n    } else {\r\n        contract = ONT_CONTRACT;\r\n    }\r\n    const params = hex2VarBytes(address.serialize());\r\n    const tx = makeNativeContractTx('balanceOf', params, new Address(contract), '0', '0');\r\n    return tx;\r\n}\r\n\r\nexport function deserializeTransferTx(str: string): Transfer {\r\n    const tx: Transfer = Transaction.deserialize(str) as any;\r\n    const code = tx.payload.serialize();\r\n    const contractIndex1 = code.lastIndexOf('14' + '000000000000000000000000000000000000000');\r\n    const contractIndex2 = code.lastIndexOf('14' + '0000000000000000000000000000000000000002');\r\n    if (contractIndex1 > 0 && code.substr(contractIndex1 + 41, 1) === '1') {\r\n        tx.tokenType = 'ONT';\r\n    } else if (contractIndex1 > 0 && code.substr(contractIndex1 + 41, 1) === '2') {\r\n        tx.tokenType = 'ONG';\r\n    } else {\r\n        throw new Error('Not a transfer tx');\r\n    }\r\n    const contractIndex = Math.max(contractIndex1, contractIndex2);\r\n    const params = code.substring(0, contractIndex);\r\n    const paramsEnd = params.indexOf('6a7cc86c') + 8;\r\n    if (params.substr(paramsEnd, 4) === '51c1') { // transfer\r\n        const methodStr = params.substring(paramsEnd + 6);\r\n        tx.method = hexstr2str(methodStr);\r\n    } else {\r\n        const methodStr = params.substring(paramsEnd + 2);\r\n        tx.method = hexstr2str(methodStr);\r\n    }\r\n\r\n    if (tx.method === 'transfer') {\r\n        const sr = new StringReader(params);\r\n        // const codeLength = sr.readNextLen();\r\n        // const bytes = sr.read(4);\r\n        sr.pos += 10;\r\n        const from = new Address(sr.read(20));\r\n        tx.from = from;\r\n        // const bytes2 = sr.read(4);\r\n        sr.pos += 8;\r\n        const to = new Address(sr.read(20));\r\n        tx.to = to;\r\n        // const bytes3 = sr.read(3);\r\n        sr.pos += 6;\r\n        const numTmp = parseInt(sr.read(1), 16);\r\n        if (sr.str.substr(sr.pos, 6) === '6a7cc8') {\r\n            tx.amount = numTmp - 80;\r\n        } else {\r\n            const amount = BigInt.fromHexstr(sr.read(numTmp)).value;\r\n            tx.amount = new BigNumber(amount).toString();\r\n        }\r\n    } else if (tx.method === 'transferFrom') {\r\n        const sr = new StringReader(params);\r\n        // const codeLength = sr.readNextLen();\r\n        // const bytes = sr.read(4);\r\n        sr.pos += 10;\r\n        const from = new Address(sr.read(20));\r\n        tx.from = from;\r\n        // const bytes1 = sr.read(4);\r\n        // const contract = new Address(sr.read(20));\r\n        // const bytes2 = sr.read(4);\r\n        sr.pos += 56;\r\n        const to = new Address(sr.read(20));\r\n        tx.to = to;\r\n        // const bytes3 = sr.read(3);\r\n        sr.pos += 6;\r\n        const numTmp = parseInt(sr.read(1), 16);\r\n        if (sr.str.substr(sr.pos, 6) === '6a7cc8') {\r\n            tx.amount = numTmp - 80;\r\n        } else {\r\n            const amount = BigInt.fromHexstr(sr.read(numTmp)).value;\r\n            tx.amount = new BigNumber(amount).toString();\r\n        }\r\n    } else {\r\n        throw new Error('Not a transfer tx');\r\n    }\r\n\r\n    return tx;\r\n}\r\n","/*\r\n* Copyright (C) 2018 The ontology Authors\r\n* This file is part of The ontology library.\r\n*\r\n* The ontology is free software: you can redistribute it and/or modify\r\n* it under the terms of the GNU Lesser General Public License as published by\r\n* the Free Software Foundation, either version 3 of the License, or\r\n* (at your option) any later version.\r\n*\r\n* The ontology is distributed in the hope that it will be useful,\r\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n* GNU Lesser General Public License for more details.\r\n*\r\n* You should have received a copy of the GNU Lesser General Public License\r\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\nimport { Address, PublicKey } from '../../crypto';\r\nimport { DDOAttribute } from '../../transaction/ddo';\r\nimport { Transaction } from '../../transaction/transaction';\r\nimport { makeNativeContractTx } from '../../transaction/transactionUtils';\r\nimport { num2hexstring, str2hexstr } from '../../utils';\r\nimport { buildNativeCodeScript } from '../abi/nativeVmParamsBuilder';\r\nimport Struct from '../abi/struct';\r\n\r\n/**\r\n * Address of ONT ID contract\r\n */\r\nexport const ONTID_CONTRACT = '0000000000000000000000000000000000000003';\r\n\r\n/**\r\n * Method names in ONT ID contract\r\n */\r\nconst ONTID_METHOD  = {\r\n    regIDWithPublicKey: 'regIDWithPublicKey',\r\n    regIDWithAttributes: 'regIDWithAttributes',\r\n    addAttributes: 'addAttributes',\r\n    removeAttribute: 'removeAttribute',\r\n    getAttributes: 'getAttributes',\r\n    getDDO: 'getDDO',\r\n    addKey: 'addKey',\r\n    removeKey: 'removeKey',\r\n    getPublicKeys: 'getPublicKeys',\r\n    addRecovery: 'addRecovery',\r\n    changeRecovery: 'changeRecovery',\r\n    getKeyState: 'getKeyState'\r\n};\r\n\r\n/**\r\n * Registers Identity.\r\n *\r\n * GAS calculation: gasLimit * gasPrice is equal to the amount of gas consumed.\r\n *\r\n * @param ontid User's ONT ID\r\n * @param publicKey Public key\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n * @param payer Payer\r\n */\r\nexport function buildRegisterOntidTx(\r\n    ontid: string,\r\n    publicKey: PublicKey,\r\n    gasPrice: string,\r\n    gasLimit: string,\r\n    payer?: Address\r\n): Transaction {\r\n    const method = ONTID_METHOD.regIDWithPublicKey;\r\n\r\n    if (ontid.substr(0, 3) === 'did') {\r\n        ontid = str2hexstr(ontid);\r\n    }\r\n    const struct = new Struct();\r\n    struct.add(ontid, publicKey.serializeHex());\r\n    const list = [struct];\r\n    const params = buildNativeCodeScript(list);\r\n\r\n    const tx = makeNativeContractTx(\r\n        method,\r\n        params,\r\n        new Address(ONTID_CONTRACT),\r\n        gasPrice,\r\n        gasLimit,\r\n        payer\r\n    );\r\n\r\n    return tx;\r\n}\r\n\r\n/**\r\n * Registers Identity with initial attributes.\r\n *\r\n * @param ontid User's ONT ID\r\n * @param attributes Array of DDOAttributes\r\n * @param publicKey User's public key\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n * @param payer Payer\r\n */\r\nexport function buildRegIdWithAttributes(\r\n    ontid: string,\r\n    attributes: DDOAttribute[],\r\n    publicKey: PublicKey,\r\n    gasPrice: string,\r\n    gasLimit: string,\r\n    payer?: Address\r\n) {\r\n    const method = ONTID_METHOD.regIDWithAttributes;\r\n    if (ontid.substr(0, 3) === 'did') {\r\n        ontid = str2hexstr(ontid);\r\n    }\r\n\r\n    // let attrs = '';\r\n    // for (const a of attributes) {\r\n    //     attrs += a.serialize();\r\n    // }\r\n\r\n    // const p1 = new Parameter(f.parameters[0].getName(), ParameterType.ByteArray, ontid);\r\n    // const p2 = new Parameter(f.parameters[1].getName(), ParameterType.ByteArray, publicKey.serializeHex());\r\n    // const p3 = new Parameter(f.parameters[2].getName(), ParameterType.ByteArray, attrs);\r\n    // f.setParamsValue(p1, p2, p3);\r\n    const attrLen = attributes.length;\r\n    const struct = new Struct();\r\n    struct.add(ontid, publicKey.serializeHex(), attrLen);\r\n    for (const a of attributes) {\r\n        const key = str2hexstr(a.key);\r\n        const type = str2hexstr(a.type);\r\n        const value = str2hexstr(a.value);\r\n        struct.add(key, type, value);\r\n    }\r\n    const params = buildNativeCodeScript([struct]);\r\n    const tx = makeNativeContractTx(\r\n        method,\r\n        params,\r\n        new Address(ONTID_CONTRACT),\r\n        gasPrice,\r\n        gasLimit,\r\n        payer\r\n    );\r\n\r\n    return tx;\r\n}\r\n\r\n/**\r\n * Adds attributes to ONT ID.\r\n *\r\n * @param ontid User's ONT ID\r\n * @param attributes Array of DDOAttributes\r\n * @param publicKey User's public key\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n * @param payer Payer\r\n */\r\nexport function buildAddAttributeTx(\r\n    ontid: string,\r\n    attributes: DDOAttribute[],\r\n    publicKey: PublicKey,\r\n    gasPrice: string,\r\n    gasLimit: string,\r\n    payer?: Address\r\n): Transaction {\r\n    const method = ONTID_METHOD.addAttributes;\r\n\r\n    if (ontid.substr(0, 3) === 'did') {\r\n        ontid = str2hexstr(ontid);\r\n    }\r\n    const struct = new Struct();\r\n    struct.add(ontid, attributes.length);\r\n    for (const a of attributes) {\r\n        const key = str2hexstr(a.key);\r\n        const type = str2hexstr(a.type);\r\n        const value = str2hexstr(a.value);\r\n        struct.add(key, type, value);\r\n    }\r\n    struct.list.push(publicKey.serializeHex());\r\n    const params = buildNativeCodeScript([struct]);\r\n\r\n    const tx = makeNativeContractTx(\r\n        method,\r\n        params,\r\n        new Address(ONTID_CONTRACT),\r\n        gasPrice,\r\n        gasLimit,\r\n        payer\r\n    );\r\n    return tx;\r\n}\r\n\r\n/**\r\n * Removes attribute from ONT ID.\r\n *\r\n * @param ontid User's ONT ID\r\n * @param key Key of attribute to remove\r\n * @param publicKey User's public key\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n * @param payer Payer\r\n *\r\n */\r\nexport function buildRemoveAttributeTx(\r\n    ontid: string,\r\n    key: string,\r\n    publicKey: PublicKey,\r\n    gasPrice: string,\r\n    gasLimit: string,\r\n    payer?: Address\r\n): Transaction {\r\n    const method = ONTID_METHOD.removeAttribute;\r\n\r\n    if (ontid.substr(0, 3) === 'did') {\r\n        ontid = str2hexstr(ontid);\r\n    }\r\n\r\n    const struct = new Struct();\r\n    struct.add(ontid, str2hexstr(key), publicKey.serializeHex());\r\n    const params = buildNativeCodeScript([struct]);\r\n    const tx = makeNativeContractTx(\r\n        method,\r\n        params,\r\n        new Address(ONTID_CONTRACT),\r\n        gasPrice,\r\n        gasLimit,\r\n        payer\r\n    );\r\n    return tx;\r\n}\r\n\r\n/**\r\n * Queries attributes attached to ONT ID.\r\n *\r\n * @param ontid User's ONT ID\r\n */\r\nexport function buildGetAttributesTx(ontid: string) {\r\n    const method = ONTID_METHOD.getAttributes;\r\n\r\n    if (ontid.substr(0, 3) === 'did') {\r\n        ontid = str2hexstr(ontid);\r\n    }\r\n\r\n    const struct = new Struct();\r\n    struct.add(ontid);\r\n    const params = buildNativeCodeScript([struct]);\r\n\r\n    const tx = makeNativeContractTx(method, params, new Address(ONTID_CONTRACT));\r\n    return tx;\r\n}\r\n\r\n/**\r\n * Queries Description Object of ONT ID(DDO).\r\n *\r\n * @param ontid User's ONT ID\r\n */\r\nexport function buildGetDDOTx(ontid: string) {\r\n    const method = ONTID_METHOD.getDDO;\r\n    if (ontid.substr(0, 3) === 'did') {\r\n        ontid = str2hexstr(ontid);\r\n    }\r\n\r\n    const struct = new Struct();\r\n    struct.add(ontid);\r\n    const params = buildNativeCodeScript([struct]);\r\n    const tx = makeNativeContractTx(method, params, new Address(ONTID_CONTRACT));\r\n    return tx;\r\n}\r\n/**\r\n * Adds a new public key to ONT ID.\r\n *\r\n * @param ontid User's ONT ID\r\n * @param newPk New public key to be added\r\n * @param userKey User's public key or address\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n * @param payer Payer\r\n */\r\nexport function buildAddControlKeyTx(\r\n    ontid: string,\r\n    newPk: PublicKey,\r\n    userKey: PublicKey | Address,\r\n    gasPrice: string,\r\n    gasLimit: string,\r\n    payer?: Address\r\n): Transaction {\r\n    const method = ONTID_METHOD.addKey;\r\n\r\n    if (ontid.substr(0, 3) === 'did') {\r\n        ontid = str2hexstr(ontid);\r\n    }\r\n\r\n    const p1 = ontid;\r\n    const p2 = newPk.serializeHex();\r\n    let p3;\r\n    if (userKey instanceof PublicKey) {\r\n        p3 = userKey.serializeHex();\r\n    } else if (userKey instanceof Address) {\r\n        p3 = userKey.serialize();\r\n    }\r\n    const struct = new Struct();\r\n    struct.add(p1, p2, p3);\r\n    const params = buildNativeCodeScript([struct]);\r\n    const tx = makeNativeContractTx(\r\n        method,\r\n        params,\r\n        new Address(ONTID_CONTRACT),\r\n        gasPrice,\r\n        gasLimit,\r\n        payer\r\n    );\r\n\r\n    return tx;\r\n}\r\n\r\n/**\r\n * Revokes a public key from ONT ID.\r\n *\r\n * @param ontid User's ONT ID\r\n * @param pk2Remove Public key to be removed\r\n * @param sender User's public key or address\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n * @param payer Payer\r\n */\r\nexport function buildRemoveControlKeyTx(\r\n    ontid: string,\r\n    pk2Remove: PublicKey,\r\n    sender: PublicKey | Address,\r\n    gasPrice: string,\r\n    gasLimit: string,\r\n    payer?: Address\r\n): Transaction {\r\n    const method = ONTID_METHOD.removeKey;\r\n\r\n    if (ontid.substr(0, 3) === 'did') {\r\n        ontid = str2hexstr(ontid);\r\n    }\r\n\r\n    const p1 = ontid;\r\n    const p2 = pk2Remove.serializeHex();\r\n    let p3;\r\n    if (sender instanceof PublicKey) {\r\n        p3 = sender.serializeHex();\r\n    } else if (sender instanceof Address) {\r\n        p3 = sender.serialize();\r\n    }\r\n    const struct = new Struct();\r\n    struct.add(p1, p2, p3);\r\n    const params = buildNativeCodeScript([struct]);\r\n\r\n    const tx = makeNativeContractTx(\r\n        method,\r\n        params,\r\n        new Address(ONTID_CONTRACT),\r\n        gasPrice,\r\n        gasLimit,\r\n        payer\r\n    );\r\n    return tx;\r\n}\r\n\r\n/**\r\n * Queries public keys attached to ONT ID.\r\n *\r\n * @param ontid User's ONT ID\r\n */\r\nexport function buildGetPublicKeysTx(ontid: string) {\r\n    const method = ONTID_METHOD.getPublicKeys;\r\n\r\n    if (ontid.substr(0, 3) === 'did') {\r\n        ontid = str2hexstr(ontid);\r\n    }\r\n    const struct = new Struct();\r\n    struct.add(ontid);\r\n    const params = buildNativeCodeScript([struct]);\r\n\r\n    const tx = makeNativeContractTx(method, params, new Address(ONTID_CONTRACT));\r\n    return tx;\r\n}\r\n\r\n/**\r\n * Adds recovery address to ONT ID.\r\n *\r\n * @param ontid User's ONT ID\r\n * @param recovery Recovery address, must have not be set\r\n * @param publicKey User's public key, must be user's existing public key\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n * @param payer Payer\r\n */\r\nexport function buildAddRecoveryTx(\r\n    ontid: string,\r\n    recovery: Address,\r\n    publicKey: PublicKey,\r\n    gasPrice: string,\r\n    gasLimit: string,\r\n    payer?: Address\r\n): Transaction {\r\n    const method = ONTID_METHOD.addRecovery;\r\n\r\n    if (ontid.substr(0, 3) === 'did') {\r\n        ontid = str2hexstr(ontid);\r\n    }\r\n\r\n    const p1 = ontid;\r\n    const p2 = recovery;\r\n    const p3 = publicKey.serializeHex();\r\n    const struct = new Struct();\r\n    struct.add(p1, p2, p3);\r\n    const params = buildNativeCodeScript([struct]);\r\n    const tx = makeNativeContractTx(method, params, new Address(ONTID_CONTRACT), gasPrice, gasLimit, payer);\r\n    return tx;\r\n}\r\n\r\n/**\r\n * Changes recovery address of ONT ID.\r\n *\r\n * This contract call must be initiated by the original recovery address.\r\n *\r\n * @param ontid user's ONT ID\r\n * @param newrecovery New recovery address\r\n * @param oldrecovery Original recoevery address\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n * @param payer Payer\r\n */\r\nexport function buildChangeRecoveryTx(\r\n    ontid: string,\r\n    newrecovery: Address,\r\n    oldrecovery: Address,\r\n    gasPrice: string,\r\n    gasLimit: string,\r\n    payer?: Address\r\n): Transaction {\r\n    const method = ONTID_METHOD.changeRecovery;\r\n\r\n    if (ontid.substr(0, 3) === 'did') {\r\n        ontid = str2hexstr(ontid);\r\n    }\r\n\r\n    const p1 = ontid;\r\n    const p2 = newrecovery;\r\n    const p3 = oldrecovery;\r\n    const struct = new Struct();\r\n    struct.add(p1, p2, p3);\r\n    const params = buildNativeCodeScript([struct]);\r\n\r\n    const tx = makeNativeContractTx(method, params, new Address(ONTID_CONTRACT),\r\n    gasPrice, gasLimit);\r\n    tx.payer = payer || oldrecovery;\r\n    return tx;\r\n}\r\n\r\n/**\r\n * Queries the state of the public key associated with ONT ID.\r\n *\r\n * @param ontid user's ONT ID\r\n * @param pkId User's public key Id\r\n */\r\nexport function buildGetPublicKeyStateTx(ontid: string, pkId: number) {\r\n    const method = ONTID_METHOD.getKeyState;\r\n\r\n    if (ontid.substr(0, 3) === 'did') {\r\n        ontid = str2hexstr(ontid);\r\n    }\r\n\r\n    // tslint:disable-next-line:no-console\r\n    console.log('did: ' + ontid);\r\n\r\n    const index = num2hexstring(pkId, 4, true);\r\n\r\n    // tslint:disable-next-line:no-console\r\n    console.log('index: ' + index);\r\n\r\n    const struct = new Struct();\r\n    struct.add(ontid, pkId);\r\n    const params = buildNativeCodeScript([struct]);\r\n\r\n    const tx = makeNativeContractTx(method, params, new Address(ONTID_CONTRACT));\r\n    return tx;\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\nimport Fixed64 from '../common/fixed64';\r\nimport { REST_API, TX_MAX_SIG_SIZE } from '../consts';\r\nimport { Address, PrivateKey, SignatureScheme } from '../crypto';\r\nimport { PublicKey } from '../crypto/PublicKey';\r\nimport { ERROR_CODE } from '../error';\r\nimport AbiFunction from '../smartcontract/abi/abiFunction';\r\nimport { Parameter } from '../smartcontract/abi/parameter';\r\n\r\nimport {\r\n    num2hexstring,\r\n    reverseHex,\r\n    str2hexstr\r\n} from '../utils';\r\nimport { ParameterType } from './../smartcontract/abi/parameter';\r\nimport opcode from './opcode';\r\nimport DeployCode from './payload/deployCode';\r\nimport InvokeCode from './payload/invokeCode';\r\nimport { comparePublicKeys } from './program';\r\nimport { buildWasmContractParam, createCodeParamsScript, serializeAbiFunction, writeVarBytes } from './scriptBuilder';\r\nimport { Transaction, TxType } from './transaction';\r\n\r\nimport { makeTransferTx } from '../smartcontract/nativevm/ontAssetTxBuilder';\r\nimport { buildGetDDOTx, buildRegisterOntidTx } from '../smartcontract/nativevm/ontidContractTxBuilder';\r\nimport { VmType } from './payload/deployCode';\r\nimport { TxSignature } from './txSignature';\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const Default_params = {\r\n    Action: 'sendrawtransaction',\r\n    Version: '1.0.0',\r\n    Type: '',\r\n    Op: 'test'\r\n};\r\n\r\n/**\r\n * Signs the transaction object.\r\n *\r\n * If there is already a signature, the new one will replace existing.\r\n * If the signature schema is not provided, default schema for Private key type is used.\r\n *\r\n * @param tx Transaction to sign\r\n * @param privateKey Private key to sign with\r\n * @param schema Signature Schema to use\r\n */\r\nexport const signTransaction = (tx: Transaction, privateKey: PrivateKey, schema?: SignatureScheme) => {\r\n    const signature = TxSignature.create(tx, privateKey, schema);\r\n\r\n    tx.sigs = [signature];\r\n};\r\n\r\n/**\r\n * Signs the transaction object asynchroniously.\r\n *\r\n * If there is already a signature, the new one will replace existing.\r\n * If the signature schema is not provided, default schema for Private key type is used.\r\n *\r\n * @param tx Transaction to sign\r\n * @param privateKey Private key to sign with\r\n * @param schema Signature Schema to use\r\n */\r\nexport const signTransactionAsync = async (tx: Transaction, privateKey: PrivateKey, schema?: SignatureScheme) => {\r\n    const signature = await TxSignature.createAsync(tx, privateKey, schema);\r\n\r\n    tx.sigs = [signature];\r\n};\r\n\r\n/**\r\n * Signs the transaction object.\r\n *\r\n * If there is already a signature, the new one will be added to the end.\r\n * If the signature schema is not provided, default schema for Private key type is used.\r\n *\r\n * @param tx Transaction to sign\r\n * @param privateKey Private key to sign with\r\n * @param schema Signature Schema to use\r\n */\r\nexport const addSign = (tx: Transaction, privateKey: PrivateKey, schema?: SignatureScheme) => {\r\n    const signature = TxSignature.create(tx, privateKey, schema);\r\n\r\n    tx.sigs.push(signature);\r\n};\r\n\r\nconst equalPks = (pks1: PublicKey[], pks2: PublicKey[]): boolean => {\r\n    if (pks1 === pks2) {\r\n        return true;\r\n    }\r\n    pks1.sort(comparePublicKeys);\r\n    pks2.sort(comparePublicKeys);\r\n    if (pks1.length !== pks2.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < pks1.length ; i++) {\r\n        if (pks1[i].key !== pks2[i].key) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n};\r\n\r\n/**\r\n * Signs the transaction with multiple signatures with multi-sign keys.\r\n *\r\n * If there is already a signature, the new ones will be added to the end.\r\n * If the signature schema is not provided, default schema for Private key type is used.\r\n *\r\n * @param tx Transaction to sign\r\n * @param M m of the (m ,n) multi sign address threshold\r\n * @param pubKeys Array of Public keys of (m,n) multi sign address, the number is n\r\n * @param privateKey Private key to sign the tx.\r\n * @param scheme Signature scheme to use\r\n */\r\nexport const signTx = (tx: Transaction, M: number, pubKeys: PublicKey[],\r\n                       privateKey: PrivateKey, scheme?: SignatureScheme) => {\r\n\r\n    if (tx.sigs.length === 0) {\r\n        tx.sigs = [];\r\n    } else {\r\n        if (tx.sigs.length > TX_MAX_SIG_SIZE || M > pubKeys.length || M <= 0 || pubKeys.length === 0) {\r\n            throw ERROR_CODE.INVALID_PARAMS;\r\n        }\r\n        // tslint:disable-next-line:prefer-for-of\r\n        for (let i = 0; i < tx.sigs.length; i++) {\r\n            if (equalPks(tx.sigs[i].pubKeys, pubKeys)) {\r\n                if (tx.sigs[i].sigData.length + 1 > pubKeys.length) {\r\n                    throw new Error('Too many sigData');\r\n                }\r\n                const signData = privateKey.sign(tx, scheme).serializeHex();\r\n                tx.sigs[i].sigData.push(signData);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    const sig = new TxSignature();\r\n    sig.M = M;\r\n    sig.pubKeys = pubKeys;\r\n    sig.sigData = [privateKey.sign(tx, scheme).serializeHex()];\r\n    tx.sigs.push(sig);\r\n};\r\n\r\n/**\r\n * Creates transaction to inovke smart contract\r\n * @param funcName Function name of smart contract\r\n * @param params Array of Parameters or serialized parameters\r\n * @param contractAddr Address of contract\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n * @param payer Address to pay for gas\r\n */\r\nexport const makeInvokeTransaction = (\r\n    funcName: string,\r\n    params: Parameter[] | string,\r\n    contractAddr: Address,\r\n    gasPrice?: string,\r\n    gasLimit?: string,\r\n    payer?: Address,\r\n    ledgerCompatible: boolean = true\r\n) => {\r\n    const tx = new Transaction();\r\n    tx.type = TxType.Invoke;\r\n\r\n    let args = '';\r\n    if (typeof params === 'string') {\r\n        args = params;\r\n    } else {\r\n        const abiFunc = new AbiFunction(funcName, '', params);\r\n        args = serializeAbiFunction(abiFunc, ledgerCompatible);\r\n    }\r\n\r\n    let code = args + num2hexstring(opcode.APPCALL);\r\n    code += contractAddr.serialize();\r\n\r\n    const payload = new InvokeCode();\r\n    payload.code = code;\r\n    tx.payload = payload;\r\n\r\n    if (gasLimit) {\r\n        tx.gasLimit = new Fixed64(gasLimit);\r\n    }\r\n    if (gasPrice) {\r\n        tx.gasPrice = new Fixed64(gasPrice);\r\n    }\r\n    if (payer) {\r\n        tx.payer = payer;\r\n    }\r\n    return tx;\r\n};\r\n\r\nexport function buildWasmVmInvokeCode(contractaddress: Address, params: Parameter[]): string {\r\n    let result = '';\r\n    result += contractaddress.serialize();\r\n    const args = buildWasmContractParam(params);\r\n    result += writeVarBytes(args);\r\n    return result;\r\n}\r\n\r\n/**\r\n * Creates transaction to inovke wasm vm smart contract\r\n * @param funcName Function name of smart contract\r\n * @param params Array of Parameters or serialized parameters\r\n * @param contractAddress Address of contract\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n * @param payer Address to pay for gas\r\n */\r\nexport function makeWasmVmInvokeTransaction(\r\n    funcName: string,\r\n    params: Parameter[],\r\n    contractAddress: Address,\r\n    gasPrice: string,\r\n    gasLimit: string,\r\n    payer?: Address\r\n): Transaction {\r\n    const tx = new Transaction();\r\n    tx.type = TxType.InvokeWasm;\r\n\r\n    const paramFunc = new Parameter('method', ParameterType.String, funcName);\r\n    const paramsAll = [paramFunc, ...params];\r\n    const code = buildWasmVmInvokeCode(contractAddress, paramsAll);\r\n    const payload = new InvokeCode();\r\n    payload.code = code;\r\n    tx.payload = payload;\r\n\r\n    if (gasLimit) {\r\n        tx.gasLimit = new Fixed64(gasLimit);\r\n    }\r\n    if (gasPrice) {\r\n        tx.gasPrice = new Fixed64(gasPrice);\r\n    }\r\n    if (payer) {\r\n        tx.payer = payer;\r\n    }\r\n    return tx;\r\n}\r\n\r\n/**\r\n * Creates transaction to deploy smart contract\r\n * @param code Avm code of contract to deploy\r\n * @param name Name of contract\r\n * @param codeVersion version of contract\r\n * @param author Author of contract\r\n * @param email Email of author\r\n * @param desp Description of contract\r\n * @param vmType Decides the vm type\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n * @param payer Address to pay for gas\r\n */\r\nexport function makeDeployCodeTransaction(\r\n    code: string,\r\n    name: string= '',\r\n    codeVersion: string= '1.0',\r\n    author: string= '',\r\n    email: string= '',\r\n    desp: string= '', vmType: VmType | boolean, gasPrice: string, gasLimit: string, payer?: Address) {\r\n    const dc = new DeployCode();\r\n    dc.author = author;\r\n    // const vmCode = new VmCode();\r\n    // vmCode.code = code;\r\n    // vmCode.vmType = vmType;\r\n    // dc.code = vmCode;\r\n    dc.code = code;\r\n    dc.version = codeVersion;\r\n    dc.description = desp;\r\n    dc.email = email;\r\n    dc.name = name;\r\n    if (typeof vmType === 'boolean') { // to be compatible with old api\r\n        dc.vmType = VmType.NEOVM_TYPE;\r\n    } else {\r\n        dc.vmType = vmType;\r\n    }\r\n\r\n    const tx = new Transaction();\r\n    tx.version = 0x00;\r\n\r\n    tx.payload = dc;\r\n\r\n    tx.type = TxType.Deploy;\r\n    // gas\r\n    // if (DEFAULT_GAS_LIMIT === Number(0)) {\r\n    //     tx.gasPrice = new Fixed64();\r\n    // } else {\r\n    //     const price = new BigNumber(gas).multipliedBy(1e9).dividedBy(new BigNumber(DEFAULT_GAS_LIMIT)).toString();\r\n    //     tx.gasPrice = new Fixed64(price);\r\n    // }\r\n    tx.gasLimit = new Fixed64(gasLimit);\r\n    tx.gasPrice = new Fixed64(gasPrice);\r\n    if (payer) {\r\n        tx.payer = payer;\r\n    }\r\n\r\n    return tx;\r\n\r\n}\r\n\r\n/**\r\n * @deprecated\r\n * Creates params from transaction to send with websocket\r\n * @param tx Transactio to send\r\n * @param isPreExec Decides if it is pre-execute transaction\r\n */\r\nexport function buildTxParam(tx: Transaction, isPreExec: boolean = false) {\r\n    const op = isPreExec ? { PreExec: '1'} : {};\r\n    const serialized = tx.serialize();\r\n\r\n    return JSON.stringify(Object.assign({}, Default_params, { Data: serialized }, op));\r\n}\r\n\r\n/**\r\n * @deprecated\r\n * Creates params from transaction to send with rpc\r\n * @param tx Transaction\r\n * @param method Method name\r\n */\r\nexport function buildRpcParam(tx: Transaction, method?: string) {\r\n    const param = tx.serialize();\r\n    const result = {\r\n        jsonrpc: '2.0',\r\n        method: method || 'sendrawtransaction',\r\n        params: [param],\r\n        id: 10\r\n    };\r\n    return result;\r\n}\r\n\r\n/**\r\n * @deprecated\r\n * Creates params from transaction to send with restful\r\n * @param tx Transaction\r\n */\r\nexport function buildRestfulParam(tx: Transaction) {\r\n    const param = tx.serialize();\r\n    return {\r\n        Action : 'sendrawtransaction',\r\n        Version : '1.0.0',\r\n        Data : param\r\n    };\r\n}\r\n\r\n/**\r\n * @deprecated\r\n * @param url Url of blochchain node\r\n * @param preExec Decides if is a pre-execute request\r\n */\r\nexport function sendRawTxRestfulUrl(url: string, preExec: boolean = false) {\r\n    if (url.charAt(url.length - 1) === '/') {\r\n        url = url.substring(0, url.length - 1);\r\n    }\r\n\r\n    let restUrl = url + REST_API.sendRawTx;\r\n    if (preExec) {\r\n        restUrl += '?preExec=1';\r\n    }\r\n\r\n    return restUrl;\r\n}\r\n\r\nexport function transferStringParameter(value: string): Parameter {\r\n    const strs = value.split(':');\r\n    if (strs.length < 2) {\r\n        throw new Error('Invalid parameter. ' + value);\r\n    }\r\n    const pType = value.substring(0, value.indexOf(':'));\r\n    const pVal = value.substring(value.indexOf(':') + 1);\r\n    const p = new Parameter('', pType as ParameterType, pVal);\r\n    if (p.type === ParameterType.Address) {\r\n        p.type = ParameterType.ByteArray;\r\n        p.value = new Address(p.value).serialize();\r\n    }\r\n    return p;\r\n}\r\n\r\nexport function transformMapParameter(value: any) {\r\n    const map: any = {};\r\n    for (const k of Object.keys(value)) {\r\n        const v = value[k];\r\n        if (typeof v === 'number') {\r\n            map[k] = new Parameter('', ParameterType.Integer, v);\r\n        } else if (typeof v === 'boolean') {\r\n            map[k] = new Parameter('', ParameterType.Boolean, v);\r\n        } else if (Array.isArray(v)) {\r\n            map[k] = new Parameter('', ParameterType.Array, transformArrayParameter(v));\r\n        } else if (typeof v === 'object') {\r\n            map[k] = new Parameter('', ParameterType.Map, transformMapParameter(v));\r\n        } else if (typeof v === 'string') {\r\n            map[k] = transferStringParameter(v);\r\n        }\r\n    }\r\n    return map;\r\n}\r\n\r\nexport function transformArrayParameter(val: any) {\r\n    const list = [];\r\n    for (const v of val) {\r\n        let p = new Parameter('', ParameterType.ByteArray, v);\r\n        if (typeof v === 'number') {\r\n            p.type = ParameterType.Integer;\r\n        } else if (typeof v === 'boolean') {\r\n            p.type = ParameterType.Boolean;\r\n        } else if (Array.isArray(v)) {\r\n            p.type = ParameterType.Array;\r\n            p.value = transformArrayParameter(v);\r\n        } else if (typeof v === 'object') {\r\n            p.type = ParameterType.Map;\r\n            p.value = transformMapParameter(v);\r\n        } else if (typeof v === 'string') {\r\n            p = transferStringParameter(v);\r\n        }\r\n        list.push(p);\r\n    }\r\n    return list;\r\n}\r\n\r\nexport function transformParameter(arg: any) {\r\n    const name = arg.name;\r\n    const value = arg.value;\r\n    let p = new Parameter(name, ParameterType.ByteArray, value);\r\n    if (typeof value === 'number') {\r\n        p.type = ParameterType.Integer;\r\n        p.value = Number(value);\r\n    } else if (typeof value === 'boolean') {\r\n        p.type = ParameterType.Boolean;\r\n        p.value = Boolean(value);\r\n    } else if (Array.isArray(value)) {\r\n        p.type = ParameterType.Array;\r\n        p.value = transformArrayParameter(value);\r\n    } else if (typeof value === 'object') {\r\n        p.type = ParameterType.Map;\r\n        p.value = transformMapParameter(value);\r\n    } else if (typeof value === 'string') {\r\n        p = transferStringParameter(value);\r\n    }\r\n    return p;\r\n}\r\n\r\nexport function buildParamsByJson(json: any) {\r\n    const paramsList = [];\r\n    const functions = json.functions;\r\n    for (const obj of functions) {\r\n        const { operation, args } = obj;\r\n        const list = [];\r\n        list.push(str2hexstr(operation));\r\n        const temp = [];\r\n        for (const arg of args) {\r\n            temp.push(transformParameter(arg));\r\n        }\r\n        list.push(temp);\r\n        paramsList.push(list);\r\n    }\r\n    return paramsList;\r\n}\r\n\r\nexport function makeTransactionsByJson(json: any, ledgerCompatible: boolean = true) {\r\n    if (!json) {\r\n        throw new Error('Invalid parameter. Expect JSON object');\r\n    }\r\n    if (!json.action ||\r\n        (json.action !== 'invoke' &&\r\n        json.action !== 'invokeRead' &&\r\n        json.action !== 'invokePasswordFree')) {\r\n        throw new Error('Invalid parameter. The action type must be \"invoke or invokeRead\"');\r\n    }\r\n    if (!json.params || !json.params.invokeConfig) {\r\n        throw new Error('Invalid parameter. The params can not be empty.');\r\n    }\r\n    const invokeConfig = json.params.invokeConfig;\r\n    // tslint:disable-next-line:prefer-const\r\n    let { payer, gasPrice, gasLimit, contractHash } = invokeConfig;\r\n    if (!contractHash) {\r\n        throw new Error('Invalid parameter. The contractHash can not be empty.');\r\n    }\r\n    const contractAddr = new Address(reverseHex(contractHash));\r\n    payer = payer ? new Address(payer) : null;\r\n    gasPrice = gasPrice + '' || '500';\r\n    gasLimit = gasLimit + '' || '200000';\r\n    const txList = [];\r\n    if (contractHash.indexOf('00000000000000000000000000000000000000') > -1) { // native contract\r\n        const tx = buildNativeTxFromJson(invokeConfig);\r\n        txList.push(tx);\r\n    } else {\r\n        const parameters = buildParamsByJson(invokeConfig);\r\n        for (const list of parameters) {\r\n            const params = createCodeParamsScript(list, ledgerCompatible);\r\n            const tx = makeInvokeTransaction('', params, contractAddr, gasPrice, gasLimit, payer, ledgerCompatible);\r\n            txList.push(tx);\r\n        }\r\n    }\r\n\r\n    return txList;\r\n}\r\n\r\nexport function buildNativeTxFromJson(json: any) {\r\n    const funcArgs = json.functions[0];\r\n    const args = funcArgs.args;\r\n    if (json.contractHash.indexOf('02') > -1 || json.contractHash.indexOf('01') > -1) { // ONT ONG contract\r\n        const tokenType = json.contractHash.indexOf('02') > -1 ? 'ONG' : 'ONT';\r\n        if (funcArgs.operation === 'transfer') {\r\n            const from = new Address(args[0].value.split(':')[1]);\r\n            const to = new Address(args[1].value.split(':')[1]);\r\n            const amount = args[2].value.split(':')[1] + ''; // convert to string\r\n            const payer = new Address(json.payer);\r\n            const tx = makeTransferTx(tokenType, from, to, amount, json.gasPrice, json.gasLimit, payer);\r\n            return tx;\r\n        }\r\n    } else if (json.contractHash.indexOf('03') > -1) { // ONT ID contract\r\n        if (funcArgs.operation === 'regIDWithPublicKey') {\r\n            const ontid = args[0].value.substr(args[0].value.indexOf(':') + 1);\r\n            const pk = new PublicKey(args[1].value.split(':')[1]);\r\n            const payer = new Address(json.payer);\r\n            const tx = buildRegisterOntidTx(ontid, pk, json.gasPrice, json.gasLimit, payer);\r\n            return tx;\r\n        } else if (funcArgs.operation === 'getDDO') {\r\n            const ontid = args[0].value.substr(args[0].value.indexOf(':') + 1);\r\n            const tx = buildGetDDOTx(ontid);\r\n            return tx;\r\n        }\r\n    }\r\n}","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\nimport * as bip39 from 'bip39';\r\nimport { ONT_BIP44_PATH } from './consts';\r\nimport { Address, PrivateKey } from './crypto';\r\nimport { deserializeFromJson } from './crypto/PrivateKeyFactory';\r\nimport { ERROR_CODE } from './error';\r\nimport { ScryptParams } from './scrypt';\r\nimport { Transaction } from './transaction/transaction';\r\nimport { signTransaction } from './transaction/transactionBuilder';\r\nimport { ab2hexstring, generateRandomArray, randomBytes } from './utils';\r\n\r\n// tslint:disable-next-line:no-var-requires\r\nconst HDKey = require('@ont-community/hdkey-secp256r1');\r\n\r\nexport class Account {\r\n    /**\r\n     * Import account\r\n     * @param label Account's label\r\n     * @param encryptedPrivateKey Encrypted private key\r\n     * @param password User's password to decrypt private key\r\n     * @param address Account's address\r\n     * @param saltBase64 Salt to decrypt\r\n     * @param params Params used to decrypt\r\n     */\r\n    static importAccount(\r\n        label: string ,\r\n        encryptedPrivateKey: PrivateKey,\r\n        password: string,\r\n        address: Address,\r\n        saltBase64: string,\r\n        params?: ScryptParams\r\n    ): Account {\r\n        const account = new Account();\r\n        const salt = Buffer.from(saltBase64, 'base64').toString('hex');\r\n        const privateKey = encryptedPrivateKey.decrypt(password, address, salt, params);\r\n\r\n        if (!label) {\r\n            label = ab2hexstring(generateRandomArray(4));\r\n        }\r\n        account.label = label;\r\n        account.lock = false;\r\n        account.isDefault = false;\r\n        account.salt = saltBase64;\r\n\r\n        account.encryptedKey = encryptedPrivateKey;\r\n\r\n        const publicKey = privateKey.getPublicKey();\r\n        account.publicKey = publicKey.key;\r\n\r\n        account.address = Address.fromPubKey(publicKey);\r\n\r\n        return account;\r\n    }\r\n\r\n    /**\r\n     * Import account with mnemonic\r\n     * @param label Account's label\r\n     * @param mnemonic User's mnemonic\r\n     * @param password user's password to encrypt the private key\r\n     * @param params Params used to encrypt the private key.\r\n     */\r\n    static importWithMnemonic(\r\n        label: string,\r\n        mnemonic: string,\r\n        password: string,\r\n        params?: ScryptParams\r\n    ): Account {\r\n        mnemonic = mnemonic.trim();\r\n        if (!bip39.validateMnemonic(mnemonic)) {\r\n            throw ERROR_CODE.INVALID_PARAMS;\r\n        }\r\n        const seed = bip39.mnemonicToSeedHex(mnemonic);\r\n        const hdkey = HDKey.fromMasterSeed(Buffer.from(seed, 'hex'));\r\n        const pri = hdkey.derive(ONT_BIP44_PATH);\r\n        const key = Buffer.from(pri.privateKey).toString('hex');\r\n        const privateKey = new PrivateKey(key);\r\n        const account = Account.create(privateKey, password, label, params);\r\n        return account;\r\n    }\r\n\r\n    /**\r\n     * Creates Account object encrypting specified private key.\r\n     *\r\n     * The account does not need to be registered on blockchain.\r\n     *\r\n     * @param privateKey Private key associated with the account\r\n     * @param password Password use to encrypt the private key\r\n     * @param label Custom label\r\n     * @param params Optional scrypt params\r\n     */\r\n    static create(\r\n        privateKey: PrivateKey,\r\n        password: string,\r\n        label?: string,\r\n        params?: ScryptParams\r\n    ): Account {\r\n        const account = new Account();\r\n        if (!label) {\r\n            label = ab2hexstring(generateRandomArray(4));\r\n        }\r\n        account.label = label;\r\n        account.lock = false;\r\n        account.isDefault = false;\r\n\r\n        const salt = randomBytes(16);\r\n        const publicKey = privateKey.getPublicKey();\r\n        const address = Address.fromPubKey(publicKey);\r\n        account.publicKey = publicKey.serializeHex();\r\n        account.address = address;\r\n        account.encryptedKey = privateKey.encrypt(password, address, salt, params);\r\n        account.salt = Buffer.from(salt, 'hex').toString('base64');\r\n        return account;\r\n    }\r\n\r\n    static parseJson(json: string): Account {\r\n        return Account.parseJsonObj(JSON.parse(json));\r\n    }\r\n\r\n    /**\r\n     * Deserializes JSON object.\r\n     *\r\n     * Object should be real object, not stringified.\r\n     *\r\n     * @param obj JSON object\r\n     */\r\n    static parseJsonObj(obj: any): Account {\r\n        const account = new Account();\r\n        account.address = new Address(obj.address);\r\n        account.label = obj.label;\r\n        account.lock = obj.lock;\r\n        account.isDefault = obj.isDefault;\r\n        account.publicKey = obj.publicKey;\r\n        account.hash = obj.hash;\r\n        account.salt = obj.salt;\r\n        account.encryptedKey = deserializeFromJson({\r\n            algorithm: obj.algorithm,\r\n            parameters: obj.parameters,\r\n            key: obj.key,\r\n            external: obj.external\r\n        });\r\n        // account.contract = obj.contract\r\n        account.extra = obj.extra;\r\n        return account;\r\n    }\r\n\r\n    address: Address;\r\n    label: string;\r\n    lock: boolean;\r\n    encryptedKey: PrivateKey;\r\n    extra: null;\r\n\r\n    // to compatible with cli wallet\r\n    'enc-alg': string = 'aes-256-gcm';\r\n    hash: string = 'sha256';\r\n    salt: string;\r\n\r\n    publicKey: string;\r\n    isDefault: boolean;\r\n\r\n    toJson(): string {\r\n        return JSON.stringify(this.toJsonObj());\r\n    }\r\n\r\n    /**\r\n     * Serializes to JSON object.\r\n     *\r\n     * Returned object will not be stringified.\r\n     *\r\n     */\r\n    toJsonObj(): any {\r\n        const obj = {\r\n            'address': this.address.toBase58(),\r\n            'label': this.label,\r\n            'lock': this.lock,\r\n            ...this.encryptedKey.serializeJson(),\r\n            'enc-alg': this['enc-alg'],\r\n            'hash': this.hash,\r\n            'salt': this.salt,\r\n            'isDefault': this.isDefault,\r\n            'publicKey': this.publicKey,\r\n            'signatureScheme': this.encryptedKey.algorithm.defaultSchema.label\r\n        };\r\n        return obj;\r\n    }\r\n\r\n    exportPrivateKey(password: string, params?: ScryptParams) {\r\n        return this.encryptedKey.decrypt(password, this.address, this.salt, params);\r\n    }\r\n\r\n    signTransaction(password: string, tx: Transaction, params?: ScryptParams) {\r\n        const pri = this.exportPrivateKey(password, params);\r\n        signTransaction(tx, pri, pri.algorithm.defaultSchema);\r\n        return tx;\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\n/**\r\n * Restful api\r\n */\r\nexport default {\r\n    Url_send_transaction : '/api/v1/transaction',\r\n    Url_get_transaction : '/api/v1/transaction/',\r\n    Url_get_generate_block_time : '/api/v1/node/generateblocktime',\r\n    Url_get_node_count : '/api/v1/node/connectioncount',\r\n    Url_get_block_height : '/api/v1/block/height',\r\n    Url_get_block_by_height : '/api/v1/block/details/height/',\r\n    Url_get_block_by_hash : '/api/v1/block/details/hash/',\r\n    Url_get_account_balance : '/api/v1/balance/',\r\n    Url_get_contract_state : '/api/v1/contract/',\r\n    Url_get_smartcodeevent_txs_by_height : '/api/v1/smartcode/event/transactions/',\r\n    Url_get_smartcodeevent_by_txhash : '/api/v1/smartcode/event/txhash/',\r\n    Url_get_block_height_by_txhash : '/api/v1/block/height/txhash/',\r\n    Url_get_storage : '/api/v1/storage/',\r\n    Url_get_merkleproof : '/api/v1/merkleproof/',\r\n    Url_get_allowance: '/api/v1/allowance/',\r\n    Url_get_block_txs_by_height: '/api/v1/block/transactions/height/',\r\n    Url_get_unbound_ong: '/api/v1/unboundong/',\r\n    Url_get_grant_ong: '/api/v1/grantong/',\r\n    Url_get_mempool_txcount: '/api/v1/mempool/txcount',\r\n    Url_get_mempool_txstate: '/api/v1/mempool/txstate/',\r\n    Url_get_version: '/api/v1/version',\r\n    Url_get_networkid: '/api/v1/networkid',\r\n    Url_get_gasprice: '/api/v1/gasprice'\r\n};\r\n","import { ERROR_CODE } from './../../error';\r\n/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport axios from 'axios';\r\nimport { TEST_ONT_URL } from '../../consts';\r\nimport { Address } from '../../crypto/address';\r\nimport UrlConsts from './urlConsts';\r\n\r\n/**\r\n * Wrapper class for restful api.\r\n */\r\nexport default class RestClient {\r\n    /**\r\n     * Url of the blockchain node\r\n     */\r\n    url: string;\r\n\r\n    /**\r\n     * Version of restful api\r\n     */\r\n    version: string = 'v1.0.0';\r\n\r\n    /**\r\n     * Action name of the request\r\n     */\r\n    action: string = 'sendrawtransaction';\r\n\r\n    constructor(url ?: string) {\r\n        this.url = url || TEST_ONT_URL.REST_URL;\r\n        if (this.url[this.url.length - 1] === '/') {\r\n            this.url = this.url.substring(0, this.url.length - 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Concat params as the query part\r\n     * @param params\r\n     */\r\n    concatParams(params: Map<string, string>) {\r\n        let result = '';\r\n        if (params.size === 0) {\r\n            return '';\r\n        }\r\n\r\n        for (const key of params.keys()) {\r\n            let value = params.get(key);\r\n            if (value) {\r\n                value = encodeURIComponent(value);\r\n            }\r\n            result += `&${key}=${value}`;\r\n        }\r\n\r\n        return '?' + result.substr(1);\r\n    }\r\n\r\n    /**\r\n     * Get the current blockchain node url\r\n     */\r\n    getUrl() {\r\n        return this.url;\r\n    }\r\n\r\n    /**\r\n     * To send raw transaction to blockchian\r\n     * @param hexData Hex encoded data\r\n     * @param preExec Decides if it is a pre-execute transaction\r\n     * @param userId User's id\r\n     */\r\n    sendRawTransaction(hexData: string, preExec: boolean = false, userId ?: string): Promise<any> {\r\n        const param = new Map<string, string>();\r\n\r\n        if (userId) {\r\n            param.set('userid', userId);\r\n        }\r\n\r\n        if (preExec) {\r\n            param.set('preExec', '1');\r\n        }\r\n\r\n        let url = this.url + UrlConsts.Url_send_transaction;\r\n        url += this.concatParams(param);\r\n\r\n        const body = {\r\n            Action  : this.action,\r\n            Version : this.version,\r\n            Data    : hexData\r\n        };\r\n\r\n        return axios.post(url, body).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get raw transaction by transaction hash.\r\n     * The result is hex encoded transaction.\r\n     * @param txHash Transactin hash.Always use the reversed value of transaction hash to query.\r\n     *\r\n     * @example\r\n     *\r\n     * ```typescript\r\n     * import { utils, Transaction } from 'ontology-ts-sdk';\r\n     * const txHash = tx.getHash(); // tx is an instance of Transaction\r\n     * restClient.getRawTransaction(utils.reverseHex(txHash)).then(res => {\r\n     *   const tx = Transaction.deserialize(res.Result)\r\n     * })\r\n     *\r\n     * ````\r\n     */\r\n    getRawTransaction(txHash: string): Promise<any> {\r\n        const param = new Map<string, string>();\r\n\r\n        param.set('raw', '1');\r\n        let url = this.url + UrlConsts.Url_get_transaction + txHash;\r\n        url += this.concatParams(param);\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get transaction by transaction hash.\r\n     * The result is transaction in json.\r\n     * @param txHash Reversed transaction hash\r\n     */\r\n    getRawTransactionJson(txHash: string): Promise<any> {\r\n        const param = new Map<string, string>();\r\n        param.set('raw', '0');\r\n        let url = this.url + UrlConsts.Url_get_transaction + txHash;\r\n        url += this.concatParams(param);\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /** Deprecated\r\n     * Get the generation time for each block.\r\n     * If the blockchain node runs in vbft, the result is null.\r\n     */\r\n    // getGenerateBlockTime(): Promise<any> {\r\n    //     const url = this.url + UrlConsts.Url_get_generate_block_time;\r\n    //     return axios.get(url).then((res) => {\r\n    //         return res.data;\r\n    //     });\r\n    // }\r\n\r\n    /**\r\n     * Get the nodes count of the blockchain.\r\n     */\r\n    getNodeCount(): Promise<any> {\r\n        const url = this.url + UrlConsts.Url_get_node_count;\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the current height of the blockchain.\r\n     */\r\n    getBlockHeight(): Promise<any> {\r\n        const url = this.url + UrlConsts.Url_get_block_height;\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get block by block's height or hash\r\n     * @param value Block height or block hash\r\n     */\r\n    getBlock(value: number | string): Promise<any> {\r\n        const params = new Map<string, string>();\r\n        params.set('raw', '1');\r\n\r\n        let url = '';\r\n        if (typeof value === 'number') {\r\n            url = this.url + UrlConsts.Url_get_block_by_height + value;\r\n        } else if (typeof value === 'string') {\r\n            url = this.url + UrlConsts.Url_get_block_by_hash + value;\r\n        }\r\n        url += this.concatParams(params);\r\n\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get contract info by code hash.The result is hex encoded string.\r\n     * @param codeHash Code hash of contract.The value is reversed contract address.\r\n     */\r\n    getContract(codeHash: string): Promise<any> {\r\n        const params = new Map<string, string>();\r\n        params.set('raw', '1');\r\n\r\n        let url = this.url + UrlConsts.Url_get_contract_state + codeHash;\r\n        url += this.concatParams(params);\r\n\r\n            // console.log('url: '+url);\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get contract info by code hash. The result is json.\r\n     * @param codeHash Code hash of contract.\r\n     */\r\n    getContractJson(codeHash: string): Promise<any> {\r\n        const params = new Map<string, string>();\r\n        params.set('raw', '0');\r\n        let url = this.url + UrlConsts.Url_get_contract_state + codeHash;\r\n        url += this.concatParams(params);\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get smart contract event by Block height or reversed transaction hash.\r\n     * If the parameter is block height, the result includes all the transaction event of that block;\r\n     * If the parameter is transaction hash, the result is the event of that transaction.\r\n     * @param value Block height or reversed transaction hash\r\n     */\r\n    getSmartCodeEvent(value: string | number): Promise<any> {\r\n        let url = '';\r\n        if (typeof value === 'string') {\r\n            url = this.url + UrlConsts.Url_get_smartcodeevent_by_txhash + value;\r\n        } else if (typeof value === 'number') {\r\n            url = this.url + UrlConsts.Url_get_smartcodeevent_txs_by_height + value;\r\n        }\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the block height by reversed transaction hash.\r\n     * @param hash Reversed transaction hash.\r\n     */\r\n    getBlockHeightByTxHash(hash: string): Promise<any> {\r\n        const url = this.url + UrlConsts.Url_get_block_height_by_txhash + hash;\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the stored value in smart contract by the code hash and key.\r\n     * @param codeHash Code hash of the smart contract\r\n     * @param key Key of the stored value\r\n     */\r\n    getStorage(codeHash: string, key: string): Promise<any> {\r\n        const url = this.url + UrlConsts.Url_get_storage + codeHash + '/' + key;\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the merkle proof by transaction hash\r\n     * @param hash Reversed transaction hash\r\n     */\r\n    getMerkleProof(hash: string): Promise<any> {\r\n        const url = this.url + UrlConsts.Url_get_merkleproof + hash;\r\n\r\n            // tslint:disable-next-line:no-console\r\n        console.log('url: ' + url);\r\n\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get balance of some address\r\n     * The result contains balance of ONT and ONG\r\n     * @param address Address\r\n     */\r\n    getBalance(address: Address): Promise<any> {\r\n        const url = this.url + UrlConsts.Url_get_account_balance + address.toBase58();\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get block info by block's height or hash.\r\n     * @param value Block's height or hash\r\n     */\r\n    getBlockJson(value: number | string): Promise<any> {\r\n        let url = '';\r\n        if (typeof value === 'number') {\r\n            url = this.url + UrlConsts.Url_get_block_by_height + value;\r\n        } else if (typeof value === 'string') {\r\n            url = this.url + UrlConsts.Url_get_block_by_hash + value;\r\n        }\r\n\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get allowance by address\r\n     * @param asset Asset type. Only ONT or ONG.\r\n     * @param from Address of allowance sender.\r\n     * @param to Address of allowance receiver.\r\n     */\r\n    getAllowance(asset: string, from: Address, to: Address): Promise<any> {\r\n        asset = asset.toLowerCase();\r\n        if (asset !== 'ont' && asset !== 'ong') {\r\n            throw ERROR_CODE.INVALID_PARAMS;\r\n        }\r\n        const url = this.url + UrlConsts.Url_get_allowance +\r\n                    asset.toLowerCase() + '/' + from.toBase58() + '/' + to.toBase58();\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    getUnboundOng(address: Address): Promise<any> {\r\n        const url = this.url + UrlConsts.Url_get_unbound_ong + address.toBase58();\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    getBlockTxsByHeight(height: number): Promise<any> {\r\n        const url = this.url + UrlConsts.Url_get_block_txs_by_height + height;\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    getGasPrice(): Promise<any> {\r\n        const url = this.url + UrlConsts.Url_get_gasprice ;\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    getGrantOng(address: Address): Promise<any> {\r\n        const url = this.url + UrlConsts.Url_get_grant_ong + address.toBase58();\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    getMempoolTxCount(): Promise<any> {\r\n        const url = this.url + UrlConsts.Url_get_mempool_txcount;\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    getMempoolTxState(hash: string): Promise<any> {\r\n        const url = this.url + UrlConsts.Url_get_mempool_txstate + hash;\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    getVersion(): Promise<any> {\r\n        const url = this.url + UrlConsts.Url_get_version;\r\n        return axios.get(url).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\n// tslint:disable:variable-name\r\nexport class Deferred<T> {\r\n    private _promise: Promise<T>;\r\n    private _resolve: (value?: T | PromiseLike<T>) => void;\r\n    private _reject: (reason?: any) => void;\r\n\r\n    constructor() {\r\n        this._promise = new Promise<T>((resolve, reject) => {\r\n            this._resolve = resolve;\r\n            this._reject = reject;\r\n        });\r\n    }\r\n\r\n    get promise(): Promise<T> {\r\n        return this._promise;\r\n    }\r\n\r\n    public resolve = (value?: T | PromiseLike<T>): void => {\r\n        this._resolve(value);\r\n    }\r\n\r\n    public reject = (reason?: any): void => {\r\n        this._reject(reason);\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport { Address } from '../../crypto/address';\r\n\r\n// const generateReqId = () => {\r\n//     return Math.floor(Math.random() * 10e8);\r\n// };\r\n\r\nexport function sendHeartBeat() {\r\n    const param = {\r\n        Action : 'heartbeat',\r\n        Version : 'V1.0.0'\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function sendSubscribe(\r\n    subscribeEvent: boolean = false,\r\n    subscribeJsonBlock: boolean = false,\r\n    subscribeRawBlock: boolean = false,\r\n    subscribeBlockTxHashes: boolean = false\r\n) {\r\n    const param = {\r\n        Action: 'subscribe',\r\n        Version: '1.0.0',\r\n        SubscribeEvent: subscribeEvent, // optional\r\n        SubscribeJsonBlock: subscribeJsonBlock, // optional\r\n        SubscribeRawBlock: subscribeRawBlock, // optional\r\n        SubscribeBlockTxHashs: subscribeBlockTxHashes // optional\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function sendRawTransaction(hexData: string, preExec: boolean = false) {\r\n    let param = {\r\n        Action: 'sendrawtransaction',\r\n        Version: '1.0.0',\r\n        Data: hexData\r\n    };\r\n    if (preExec) {\r\n        param = Object.assign(param, { PreExec : '1' });\r\n    }\r\n    return param;\r\n}\r\n\r\nexport function getRawTransaction(txHash: string) {\r\n    const param = {\r\n        Action: 'gettransaction',\r\n        Version: '1.0.0',\r\n        Hash: txHash,\r\n        Raw : '1'\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function getRawTransactionJson(txHash: string) {\r\n    const param = {\r\n        Action: 'gettransaction',\r\n        Version: '1.0.0',\r\n        Hash: txHash,\r\n        Raw: '0'\r\n    };\r\n    return param;\r\n}\r\n\r\n// export function getGenerateBlockTime() {\r\n//     const param = {\r\n//         Action: 'getgenerateblocktime',\r\n//         Version: '1.0.0'\r\n//     };\r\n//     return param;\r\n// }\r\n\r\nexport function getNodeCount() {\r\n    const param = {\r\n        Action: 'getconnectioncount',\r\n        Version: '1.0.0'\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function getBlockHeight() {\r\n    const param = {\r\n        Action: 'getblockheight',\r\n        Version: '1.0.0'\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function getBlock(value: number | string) {\r\n    let param = {};\r\n    if (typeof value === 'number') {\r\n        param = {\r\n            Action: 'getblockbyheight',\r\n            Version: '1.0.0',\r\n            Height: value,\r\n            Raw: '1'\r\n        };\r\n    } else if (typeof value === 'string') {\r\n        param = {\r\n            Action: 'getblockbyhash',\r\n            Version: '1.0.0',\r\n            Hash: value,\r\n            Raw: '1'\r\n        };\r\n    }\r\n    return param;\r\n}\r\n\r\nexport function getBlockJson(value: number | string) {\r\n    let param = {};\r\n    if (typeof value === 'number') {\r\n        param = {\r\n            Action: 'getblockbyheight',\r\n            Version: '1.0.0',\r\n            Height: value\r\n        };\r\n    } else if (typeof value === 'string') {\r\n        param = {\r\n            Action: 'getblockbyhash',\r\n            Version: '1.0.0',\r\n            Hash: value\r\n        };\r\n    }\r\n    return param;\r\n}\r\n\r\nexport function getBalance(address: Address) {\r\n    const param = {\r\n        Action: 'getbalance',\r\n        Version: '1.0.0',\r\n        Addr: address.toBase58()\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function getUnboundOng(address: Address) {\r\n    const param = {\r\n        Action: 'getunboundong',\r\n        Version: '1.0.0',\r\n        Addr: address.toBase58()\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function getContract(hash: string) {\r\n    const param = {\r\n        Action: 'getcontract',\r\n        Version: '1.0.0',\r\n        Hash: hash,\r\n        Raw: '1'\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function getContractJson(hash: string) {\r\n    const param = {\r\n        Action: 'getcontract',\r\n        Version: '1.0.0',\r\n        Hash: hash,\r\n        Raw: '0'\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function getSmartCodeEvent(value: number | string) {\r\n    let param = {};\r\n    if (typeof value === 'number') {\r\n        param = {\r\n            Action: 'getsmartcodeeventbyheight',\r\n            Version: '1.0.0',\r\n            Height: value\r\n        };\r\n    } else if (typeof value === 'string') {\r\n        param = {\r\n            Action: 'getsmartcodeeventbyhash',\r\n            Version: '1.0.0',\r\n            Hash: value\r\n        };\r\n    }\r\n    return param;\r\n}\r\n\r\nexport function getBlockHeightByTxHash(hash: string) {\r\n    const param = {\r\n        Action: 'getblockheightbytxhash',\r\n        Version: '1.0.0',\r\n        Hash: hash\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function getStorage(codeHash: string, key: string) {\r\n    const param = {\r\n        Action: 'getstorage',\r\n        Version: '1.0.0',\r\n        Hash: codeHash,\r\n        Key : key\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function getMerkleProof(hash: string) {\r\n    const param = {\r\n        Action: 'getmerkleproof',\r\n        Version: '1.0.0',\r\n        Hash: hash\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function getAllowance(asset: string, from: Address, to: Address) {\r\n    const param = {\r\n        Action: 'getallowance',\r\n        Version: '1.0.0',\r\n        Asset: asset,\r\n        From: from.toBase58(),\r\n        To: to.toBase58()\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function getBlockHash(value: number) {\r\n    const param = {\r\n        Action: 'getblockhash',\r\n        Version: '1.0.0',\r\n        Height: value\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function getBlockTxsByHeight(value: number) {\r\n    const param = {\r\n        Action: 'getblocktxsbyheight',\r\n        Version: '1.0.0',\r\n        Height: value\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function getGasPrice() {\r\n    const param = {\r\n        Action: 'getgasprice',\r\n        Version: '1.0.0'\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function getGrantOng(address: Address) {\r\n    const param = {\r\n        Action: 'getgrantong',\r\n        Version: '1.0.0',\r\n        Addr: address.toBase58()\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function getMempoolTxCount() {\r\n    const param = {\r\n        Action: 'getmempooltxcount',\r\n        Version: '1.0.0'\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function getMempoolTxState(txHash: string) {\r\n    const param = {\r\n        Action: 'getmempooltxstate',\r\n        Version: '1.0.0',\r\n        Hash: txHash\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function getVersion() {\r\n    const param = {\r\n        Action: 'getversion',\r\n        Version: '1.0.0'\r\n    };\r\n    return param;\r\n}\r\n\r\nexport function getNetworkId() {\r\n    const param = {\r\n        Action: 'getnetworkid',\r\n        Version: '1.0.0'\r\n    };\r\n    return param;\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\nimport * as Html5WebSocket from '@ont-community/html5-websocket';\r\nimport * as WebSocketAsPromised from 'websocket-as-promised';\r\nimport { TEST_ONT_URL } from '../../consts';\r\n\r\n/**\r\n * We can import html5-websocket directly, because webpack will use html5-websocket/browser.js\r\n * in browser environment, which does not require 'ws'.\r\n */\r\n\r\n /**\r\n  * Websocket sender for send messages and handle notify.\r\n  */\r\nexport class WebsocketSender {\r\n    private static generateReqId() {\r\n        return Math.floor(Math.random() * 10e8);\r\n    }\r\n\r\n    debug: boolean;\r\n\r\n    private wsp: any;    // WebSocketAsPromised\r\n\r\n    constructor(url = TEST_ONT_URL.SOCKET_URL, debug = false) {\r\n        this.debug = debug;\r\n        this.wsp = new WebSocketAsPromised(url, {\r\n            createWebSocket: (socketUrl: string) => new Html5WebSocket(socketUrl),\r\n            attachRequestId: (data: any, id: number) => ({ Id: id, ...data }),\r\n            extractRequestId: (data: any) => data && data.Id,\r\n            packMessage: (data: any) => JSON.stringify(data),\r\n            unpackMessage: (message: string) => JSON.parse(message)\r\n        });\r\n\r\n        this.wsp.onOpen.addListener(() => {\r\n            if (this.debug) {\r\n                // tslint:disable-next-line:no-console\r\n                console.log('connected');\r\n            }\r\n        });\r\n\r\n        this.wsp.onClose.addListener(() => {\r\n            if (this.debug) {\r\n                // tslint:disable-next-line:no-console\r\n                console.log('disconnected');\r\n            }\r\n        });\r\n\r\n        this.wsp.onSend.addListener((message: any) => {\r\n            if (this.debug) {\r\n                // tslint:disable-next-line:no-console\r\n                console.log('sent: ', message);\r\n            }\r\n        });\r\n\r\n        this.wsp.onMessage.addListener((message: any) => {\r\n            if (this.debug) {\r\n                // tslint:disable-next-line:no-console\r\n                console.log('received: ', message);\r\n            }\r\n        });\r\n\r\n        this.wsp.onError.addListener((event: any) => {\r\n            if (this.debug) {\r\n                // tslint:disable-next-line:no-console\r\n                console.log('error: ', event);\r\n            }\r\n        });\r\n    }\r\n\r\n    async send<T extends object>(param: T, close: boolean = true) {\r\n        try {\r\n            if (!param) {\r\n                return;\r\n            }\r\n\r\n            await this.wsp.open();\r\n            const response = await this.wsp.sendRequest(param, { requestId: WebsocketSender.generateReqId() });\r\n\r\n            return response;\r\n        } finally {\r\n            if (close) {\r\n                await this.wsp.close();\r\n            }\r\n        }\r\n    }\r\n\r\n    addListener(listener: (result: any) => void) {\r\n        this.wsp.onUnpackedMessage.addListener(listener);\r\n    }\r\n\r\n    close() {\r\n        this.wsp.close();\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport { TEST_ONT_URL } from '../../consts';\r\nimport { Address } from '../../crypto/address';\r\nimport { Deferred } from './deferred';\r\nimport * as Builder from './websocketBuilder';\r\nimport { WebsocketSender } from './websocketSender';\r\n\r\n/**\r\n * Websocket client.\r\n *\r\n * TODO: correlate request and response with id, so socket can be reused.\r\n */\r\nexport class WebsocketClient {\r\n    sender: WebsocketSender;\r\n\r\n    autoClose: boolean;\r\n\r\n    promises: Map<string, Deferred<any>>;\r\n\r\n    constructor(url = TEST_ONT_URL.SOCKET_URL, debug = false, autoClose = true) {\r\n        this.autoClose = autoClose;\r\n        this.promises = new Map();\r\n        this.sender = new WebsocketSender(url, debug);\r\n        this.sender.addListener(this.notifyListener.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Send heart beat request\r\n     */\r\n    async sendHeartBeat(): Promise<any> {\r\n        const raw = Builder.sendHeartBeat();\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Send subscribe request\r\n     * @param subscribeEvent\r\n     * @param subscribeJsonBlock\r\n     * @param subscribeRawBlock\r\n     * @param subscribeBlockTxHashes\r\n     */\r\n    async sendSubscribe(\r\n            subscribeEvent = false,\r\n            subscribeJsonBlock = false,\r\n            subscribeRawBlock = false,\r\n            subscribeBlockTxHashes = false\r\n        ): Promise<any> {\r\n        const raw = Builder.sendSubscribe(\r\n                subscribeEvent,\r\n                subscribeJsonBlock,\r\n                subscribeRawBlock,\r\n                subscribeBlockTxHashes\r\n            );\r\n\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Send raw transaction\r\n     * @param hexData Hex encoded data\r\n     * @param preExec Decides if it is a pre-executed transaction\r\n     * @param waitNotify Decides if client waits for notify from blockchain before closing\r\n     */\r\n    async sendRawTransaction(hexData: string, preExec = false, waitNotify = false) {\r\n        const raw = Builder.sendRawTransaction(hexData, preExec);\r\n        const sendResult = await this.send(raw, this.autoClose && !waitNotify);\r\n\r\n        if (sendResult.Error !== 0) {\r\n            // tslint:disable-next-line:no-console\r\n            console.log(sendResult);\r\n            throw new Error(JSON.stringify(sendResult));\r\n        }\r\n\r\n        if (waitNotify) {\r\n            const txHash: string = sendResult.Result;\r\n\r\n            const deferred = new Deferred<any>();\r\n            this.promises.set(txHash, deferred);\r\n            return deferred.promise;\r\n        } else {\r\n            return sendResult;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get raw transaction by transaction hash.\r\n     * The result is hex encoded transaction.\r\n     * @param txHash Reversed transaction hash\r\n     */\r\n    async getRawTransaction(txHash: string): Promise<any> {\r\n        const raw = Builder.getRawTransaction(txHash);\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Get transaction info by transaction hash.\r\n     * The result is json.\r\n     * @param txHash Reversed transaction hash\r\n     */\r\n    async getRawTransactionJson(txHash: string): Promise<any> {\r\n        const raw = Builder.getRawTransactionJson(txHash);\r\n        return this.send(raw);\r\n    }\r\n\r\n    /** Deprecated\r\n     * Get the generation time for each block.\r\n     * If the blockchain node runs in vbft, the result is null.\r\n     */\r\n    // async getGenerateBlockTime(): Promise<any> {\r\n    //     const raw = Builder.getGenerateBlockTime();\r\n    //     return this.send(raw);\r\n    // }\r\n\r\n    /**\r\n     * Get Nodes count\r\n     */\r\n    async getNodeCount(): Promise<any> {\r\n        const raw = Builder.getNodeCount();\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Get current block height\r\n     */\r\n    async getBlockHeight(): Promise<any> {\r\n        const raw = Builder.getBlockHeight();\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Get block's info by block's height or hash.\r\n     * The result is hex encoded string.\r\n     * @param value Block's height or hash\r\n     */\r\n    async getBlock(value: number | string): Promise<any> {\r\n        const raw = Builder.getBlock(value);\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Get block's info by block's height or hash.\r\n     * The result is json.\r\n     * @param value Block's height or hash\r\n     */\r\n    async getBlockJson(value: number | string): Promise<any> {\r\n        const raw = Builder.getBlockJson(value);\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Get the balance of some address.\r\n     * The result contains ONT and ONG.\r\n     * @param address Address\r\n     */\r\n    async getBalance(address: Address): Promise<any> {\r\n        const raw = Builder.getBalance(address);\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Get unbound ong of this address\r\n     * The result contains ONG.\r\n     * @param address Address\r\n     */\r\n    async getUnboundong(address: Address): Promise<any> {\r\n        const raw = Builder.getUnboundOng(address);\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Get contract info by code hash.\r\n     * The result is hex encoded string.\r\n     * @param hash Contract's code hash.\r\n     */\r\n    async getContract(hash: string): Promise<any> {\r\n        const raw = Builder.getContract(hash);\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Get contract's info by code hash\r\n     * The result is json.\r\n     * @param hash Contract's code hash\r\n     */\r\n    async getContractJson(hash: string): Promise<any> {\r\n        const raw = Builder.getContractJson(hash);\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Get smart conde event by transaction hash or block's height.\r\n     * If parameter is transaction hash, the result is the event of that transaction.\r\n     * If parameter is block's height, the result is all the events of that block.\r\n     * @param value Reversed transaction hash or block's height\r\n     */\r\n    async getSmartCodeEvent(value: number | string): Promise<any> {\r\n        const raw = Builder.getSmartCodeEvent(value);\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Get block's height by transaction hash\r\n     * @param hash Reversed transaction hash\r\n     */\r\n    async getBlockHeightByTxHash(hash: string): Promise<any> {\r\n        const raw = Builder.getBlockHeightByTxHash(hash);\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Get stored value in smart contract by contract's code hash and the key.\r\n     * @param codeHash Contract's code hash\r\n     * @param key Key of stored value\r\n     */\r\n    async getStorage(codeHash: string, key: string): Promise<any> {\r\n        const raw = Builder.getStorage(codeHash, key);\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Get merkle proof by transaction hash.\r\n     * @param hash Reversed transaction hash\r\n     */\r\n    async getMerkleProof(hash: string): Promise<any> {\r\n        const raw = Builder.getMerkleProof(hash);\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Get allowanece\r\n     * @param asset Asset's type.Only ONT and ONG supported.\r\n     * @param from Address of allowance's sender.\r\n     * @param to Address of allowance's receiver.\r\n     */\r\n    async getAllowance(asset: string, from: Address, to: Address) {\r\n        const raw = Builder.getAllowance(asset, from, to);\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Get block hash by block height\r\n     * @param height Height of the block\r\n     */\r\n    async getBlockHash(height: number): Promise<any> {\r\n        const raw = Builder.getBlockHash(height);\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Return all transaction hash contained in the block corresponding to this height\r\n     * @param height Height of the block\r\n     */\r\n    async getBlockTxsByHeight(height: number): Promise<any> {\r\n        const raw = Builder.getBlockTxsByHeight(height);\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Return the state of transaction locate in memory\r\n     */\r\n    async getGasPrice(): Promise<any> {\r\n        const raw = Builder.getGasPrice();\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Get grant ong\r\n     * @param address Address\r\n     */\r\n    async getGrantOng(address: Address): Promise<any> {\r\n        const raw = Builder.getGrantOng(address);\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Query the transaction count in the memory pool\r\n     */\r\n    async getMempoolTxCount(): Promise<any> {\r\n        const raw = Builder.getMempoolTxCount();\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Query the transaction state in the memory pool\r\n     */\r\n    async getMempoolTxState(txHash: string): Promise<any> {\r\n        const raw = Builder.getMempoolTxState(txHash);\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Get the version information of the node\r\n     */\r\n    async getVersion(): Promise<any> {\r\n        const raw = Builder.getVersion();\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Get the network id\r\n     */\r\n    async getNetworkId(): Promise<any> {\r\n        const raw = Builder.getNetworkId();\r\n        return this.send(raw);\r\n    }\r\n\r\n    /**\r\n     * Adds listener for Notify messages.\r\n     *\r\n     * Be careful to not set autoClose = true and close the websocket on your own.\r\n     * @param listener Listener\r\n     */\r\n    addNotifyListener(listener: (result: any) => void) {\r\n        this.sender.addListener((result: any) => {\r\n            if (result.Action === 'Notify') {\r\n                listener(result);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Close the websocket manually.\r\n     */\r\n    close() {\r\n        this.sender.close();\r\n    }\r\n\r\n    /**\r\n     * Send msg to blockchain\r\n     * @param raw Message to send\r\n     * @param close Automaticly close connection if also autoClose is specified\r\n     */\r\n    private async send<T extends object>(raw: T, close: boolean = this.autoClose): Promise<any> {\r\n        return this.sender.send(raw, close);\r\n    }\r\n\r\n    private notifyListener(result: any) {\r\n         // Fixme: Log message cause Notify message to disappear\r\n        if (result.Action === 'Notify' || result.Action === 'Log') {\r\n            const txHash: string | undefined = result.Result.TxHash;\r\n\r\n            if (txHash !== undefined) {\r\n                const promise = this.promises.get(txHash);\r\n\r\n                if (promise !== undefined) {\r\n                    this.promises.delete(txHash);\r\n                    promise.resolve(result);\r\n                } else {\r\n                    // tslint:disable-next-line:no-console\r\n                    console.warn('Received Notify event for unknown transaction');\r\n                }\r\n\r\n                if (this.autoClose) {\r\n                    this.sender.close();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","\r\n/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\nimport AbiFunction from './abiFunction';\r\nimport { Parameter } from './parameter';\r\n\r\n/**\r\n * Decribes the Abi info.\r\n */\r\nexport default class AbiInfo {\r\n    static parseJson(json: string): AbiInfo {\r\n        const a = new AbiInfo();\r\n        const obj = JSON.parse(json);\r\n        a.hash = obj.hash;\r\n        a.entrypoint = obj.entrypoint;\r\n        a.functions = obj.functions;\r\n\r\n        return a;\r\n    }\r\n\r\n    hash: string;\r\n    entrypoint: string;\r\n    functions: AbiFunction[] = [];\r\n\r\n    getHash(): string {\r\n        return this.hash;\r\n    }\r\n\r\n    getEntryPoint(): string {\r\n        return this.entrypoint;\r\n    }\r\n\r\n    getFunction(name: string): AbiFunction {\r\n        for (const v of this.functions) {\r\n            if (v.name === name) {\r\n                const parameters = v.parameters.map((p: any) => new Parameter(p.name, p.type, ''));\r\n                return new AbiFunction(v.name, v.returntype, parameters);\r\n            }\r\n        }\r\n        throw Error('not found');\r\n    }\r\n}\r\n","/*\r\n* Copyright (C) 2018 The ontology Authors\r\n* This file is part of The ontology library.\r\n*\r\n* The ontology is free software: you can redistribute it and/or modify\r\n* it under the terms of the GNU Lesser General Public License as published by\r\n* the Free Software Foundation, either version 3 of the License, or\r\n* (at your option) any later version.\r\n*\r\n* The ontology is distributed in the hope that it will be useful,\r\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n* GNU Lesser General Public License for more details.\r\n*\r\n* You should have received a copy of the GNU Lesser General Public License\r\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nimport { Address  } from '../../crypto';\r\nimport AbiInfo from '../../smartcontract/abi/abiInfo';\r\nimport { Parameter, ParameterType } from '../../smartcontract/abi/parameter';\r\n\r\nimport { makeInvokeTransaction } from '../../transaction/transactionBuilder';\r\nimport { reverseHex, str2hexstr } from '../../utils';\r\nimport { Transaction } from './../../transaction/transaction';\r\n\r\nimport abiJson from '../data/attestClaim';\r\nconst abiInfo = AbiInfo.parseJson(JSON.stringify(abiJson));\r\nconst contractHash = abiInfo.getHash().replace('0x', '');\r\nconst contractAddress = new Address(reverseHex(contractHash));\r\n/* TODO : Test */\r\n\r\n/**\r\n * Attests the claim.\r\n *\r\n * @param claimId Unique id of the claim\r\n * @param issuer Issuer's ONT ID\r\n * @param subject Subject's ONT ID\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n * @param payer Payer's address\r\n */\r\nexport function buildCommitRecordTx(claimId: string, issuer: string, subject: string,\r\n                                    gasPrice: string, gasLimit: string, payer: Address)  {\r\n    const f = abiInfo.getFunction('Commit');\r\n    if (issuer.substr(0, 3) === 'did') {\r\n        issuer = str2hexstr(issuer);\r\n    }\r\n    if (subject.substr(0, 3) === 'did') {\r\n        subject = str2hexstr(issuer);\r\n    }\r\n    const p1 = new Parameter(f.parameters[0].getName(), ParameterType.ByteArray, str2hexstr(claimId));\r\n    const p2 = new Parameter(f.parameters[1].getName(), ParameterType.ByteArray, issuer);\r\n    const p3 = new Parameter(f.parameters[2].getName(), ParameterType.ByteArray, subject);\r\n\r\n    let tx = new Transaction();\r\n    tx = makeInvokeTransaction(f.name, [p1, p2, p3], contractAddress, gasPrice, gasLimit, payer);\r\n    return tx;\r\n}\r\n\r\n/**\r\n * Revokes the claim.\r\n *\r\n * @param claimId Unique id of the claim\r\n * @param revokerOntid Revoker's ONT ID\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n * @param payer Payer's address\r\n */\r\nexport function buildRevokeRecordTx(claimId: string, revokerOntid: string,\r\n                                    gasPrice: string, gasLimit: string, payer: Address) {\r\n    const f = abiInfo.getFunction('Revoke');\r\n\r\n    const name1 = f.parameters[0].getName();\r\n    const type1 = ParameterType.ByteArray;\r\n\r\n    if (revokerOntid.substr(0, 3) === 'did') {\r\n        revokerOntid = str2hexstr(revokerOntid);\r\n    }\r\n\r\n    const p1 = new Parameter(name1, type1, str2hexstr(claimId));\r\n    const p2 = new Parameter(f.parameters[1].getName(), ParameterType.ByteArray, revokerOntid);\r\n\r\n    return makeInvokeTransaction(f.name, [p1, p2], contractAddress, gasPrice, gasLimit, payer);\r\n}\r\n\r\n/**\r\n * Queries the state of attest.\r\n *\r\n * @param claimId Unique id of the claim\r\n */\r\nexport function buildGetRecordStatusTx(claimId: string) {\r\n    const f = abiInfo.getFunction('GetStatus');\r\n    const p1 = new Parameter(f.parameters[0].getName(), ParameterType.ByteArray, str2hexstr(claimId));\r\n    const tx = makeInvokeTransaction(f.name, [p1], contractAddress);\r\n    return tx;\r\n}\r\n","export default {\r\n    hash: '36bb5c053b6b839c8f6b923fe852f91239b9fccc',\r\n    entrypoint: 'Main',\r\n    functions: [{\r\n        name: 'Main',\r\n        parameters: [{\r\n            name: 'operation',\r\n            type: 'String'\r\n        }, {\r\n            name: 'args',\r\n            type: 'Array'\r\n        }],\r\n        returntype: 'Any'\r\n    }, {\r\n        name: 'Commit',\r\n        parameters: [{\r\n            name: 'claimId',\r\n            type: 'ByteArray'\r\n        }, {\r\n            name: 'commiterId',\r\n            type: 'ByteArray'\r\n        }, {\r\n            name: 'ownerId',\r\n            type: 'ByteArray'\r\n        }],\r\n        returntype: 'Boolean'\r\n    }, {\r\n        name: 'Revoke',\r\n        parameters: [{\r\n            name: 'claimId',\r\n            type: 'ByteArray'\r\n        }, {\r\n            name: 'ontId',\r\n            type: 'ByteArray'\r\n        }],\r\n        returntype: 'Boolean'\r\n    }, {\r\n        name: 'GetStatus',\r\n        parameters: [{\r\n            name: 'claimId',\r\n            type: 'ByteArray'\r\n        }],\r\n        returntype: 'ByteArray'\r\n    }],\r\n    events: [{\r\n        name: 'ErrorMsg',\r\n        parameters: [{\r\n            name: 'arg1',\r\n            type: 'ByteArray'\r\n        }, {\r\n            name: 'arg2',\r\n            type: 'String'\r\n        }],\r\n        returntype: 'Void'\r\n    }, {\r\n        name: 'Push',\r\n        parameters: [{\r\n            name: 'arg1',\r\n            type: 'ByteArray'\r\n        }, {\r\n            name: 'arg2',\r\n            type: 'String'\r\n        }, {\r\n            name: 'arg3',\r\n            type: 'ByteArray'\r\n        }],\r\n        returntype: 'Void'\r\n    }]\r\n};\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport { hexstr2str } from '../utils';\r\n\r\n/**\r\n * Represents Notify event of attest creation of revocation.\r\n */\r\nexport class AttestNotifyEvent {\r\n    /**\r\n     * Deserializes Notify event.\r\n     *\r\n     * States in events are hex encoded.\r\n     *\r\n     * @param e encoded event\r\n     */\r\n    static deserialize(e: any): AttestNotifyEvent {\r\n        const event = new AttestNotifyEvent();\r\n\r\n        event.Action = e.Action;\r\n        event.Error = e.Error;\r\n        event.Desc = e.Desc;\r\n        event.Result = Result.deserialize(e.Result);\r\n\r\n        return event;\r\n    }\r\n\r\n    Action: string = 'Notify';\r\n    Desc: string;\r\n    Error: number;\r\n    Result: Result;\r\n}\r\n\r\n/**\r\n * Result of Notify event.\r\n */\r\nexport class Result {\r\n    /**\r\n     * Deserializes result from event.\r\n     *\r\n     * States are hex encoded.\r\n     *\r\n     * @param r encoded result\r\n     */\r\n    static deserialize(r: any): Result {\r\n        const result = new Result();\r\n\r\n        result.TxHash = r.TxHash;\r\n        result.State = r.State;\r\n        result.GasConsumed = r.GasConsumed;\r\n        result.Notify = r.Notify.map((n: any) => {\r\n            return {\r\n                ContractAddress: n.ContractAddress,\r\n                States: n.States.map( (s: any) => typeof s === 'string' ? hexstr2str(s) : s)\r\n            };\r\n        });\r\n        result.Version = r.Version;\r\n        return result;\r\n    }\r\n\r\n    TxHash: string;\r\n    /**\r\n     * State = 1 : smartcontract executation success\r\n     * State = 0 : smartcontract executation failure\r\n     */\r\n    State: number;\r\n    GasConsumed: number;\r\n    Notify: [{\r\n        ContractAddress: string;\r\n        /**\r\n         * The value of States are usually hex string\r\n         */\r\n        States: any[];\r\n    }];\r\n    Version: string;\r\n}\r\n","/*\r\n* Copyright (C) 2018 The ontology Authors\r\n* This file is part of The ontology library.\r\n*\r\n* The ontology is free software: you can redistribute it and/or modify\r\n* it under the terms of the GNU Lesser General Public License as published by\r\n* the Free Software Foundation, either version 3 of the License, or\r\n* (at your option) any later version.\r\n*\r\n* The ontology is distributed in the hope that it will be useful,\r\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n* GNU Lesser General Public License for more details.\r\n*\r\n* You should have received a copy of the GNU Lesser General Public License\r\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nimport * as b64 from 'base64-url';\r\nimport { Address, PrivateKey, Signature, SignatureScheme } from '../crypto';\r\nimport RestClient from '../network/rest/restClient';\r\nimport { WebsocketClient } from '../network/websocket/websocketClient';\r\nimport {\r\n    buildCommitRecordTx,\r\n    buildGetRecordStatusTx,\r\n    buildRevokeRecordTx\r\n} from '../smartcontract/neovm/attestClaimTxBuilder';\r\nimport { signTransactionAsync } from '../transaction/transactionBuilder';\r\nimport { hexstr2str, StringReader } from '../utils';\r\nimport { AttestNotifyEvent } from './attestNotifyEvent';\r\nimport { ClaimProof } from './claimProof';\r\nimport { Message, Metadata } from './message';\r\n\r\n/**\r\n * Type of revocation.\r\n */\r\nexport enum RevocationType {\r\n    AttestContract = 'AttestContract',\r\n    RevocationList = 'RevocationList'\r\n}\r\n\r\n/**\r\n * Revocation definition.\r\n */\r\nexport interface Revocation {\r\n    /**\r\n     * Type of revocation.\r\n     */\r\n    type: RevocationType;\r\n\r\n    /**\r\n     * Url of revocation list if type is RevocationList\r\n     */\r\n    url?: string;\r\n\r\n    /**\r\n     * Address of attest contract if type is AttestContract\r\n     */\r\n    addr?: string;\r\n}\r\n\r\n/**\r\n * Verifiable claim.\r\n *\r\n * TODO: override verify to add claim proof verification.\r\n */\r\nexport class Claim extends Message {\r\n    static deserialize(jwt: string): Claim {\r\n        return super.deserializeInternal(jwt, (m: any, s: any) => new Claim(m, s));\r\n    }\r\n\r\n    version: string;\r\n    context: string;\r\n    content: any;\r\n    revocation?: Revocation;\r\n\r\n    useProof: boolean;\r\n    proof?: ClaimProof;\r\n\r\n    constructor(metadata: Metadata, signature?: Signature | undefined, useProof?: boolean) {\r\n        super(metadata, signature);\r\n        this.useProof = useProof === true;\r\n    }\r\n\r\n    /**\r\n     * Overrides default message verification with added attest verification.\r\n     *\r\n     * TODO: return more than boolean\r\n     *\r\n     * const VerifyOntidClaimResult = {\r\n     *   CLAIM_NOT_ONCHAIN : 'CLAIM_NOT_ONCHAIN',\r\n     *   INVALID_SIGNATURE : 'INVALID_SIGNATURE',\r\n     *   PK_IN_REVOKED     : 'PK_IN_REVOKED',\r\n     *   NO_ISSUER_PK      : 'NO_ISSUER_PK',\r\n     *   EXPIRED_CLAIM     : 'EXPIRED_CLAIM',\r\n     *   REVOKED_CLAIM     : 'REVOKED_CLAIM',\r\n     *   VALID_CLAIM       : 'VALID_CLAIM'\r\n     * };\r\n     *\r\n     * @param url Restful endpoint of Ontology node\r\n     * @param checkAttest Should be the attest tested\r\n     */\r\n    async verify(url: string, checkAttest = true): Promise<boolean> {\r\n        const result = await super.verify(url);\r\n\r\n        if (result && checkAttest) {\r\n            return this.getStatus(url);\r\n        } else {\r\n            return result;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Serializes the claim into JWT/JWT-X format.\r\n     *\r\n     * Override default implementation by adding proof if available.\r\n     */\r\n    serialize(): string {\r\n        if (this.useProof) {\r\n            const jwt = super.serialize();\r\n            const proof = this.serializeProof();\r\n\r\n            return jwt + '.' + proof;\r\n        } else {\r\n            return super.serialize();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Attests the claim onto blockchain.\r\n     *\r\n     * @param url Websocket endpoint of Ontology node\r\n     * @param privateKey Private key to sign the transaction\r\n     * @param gasPrice gasPrice\r\n     * @param gasLimit gasLimit\r\n     * @param payer payer\r\n     */\r\n    async attest(url: string, gasPrice: string, gasLimit: string,\r\n                 payer: Address, privateKey: PrivateKey): Promise<boolean> {\r\n        const attesterId = this.metadata.issuer;\r\n        const subjectId = this.metadata.subject;\r\n        const claimId = this.metadata.messageId;\r\n        if (claimId === undefined) {\r\n            throw new Error('Claim id not specified.');\r\n        }\r\n\r\n        const client = new WebsocketClient(url);\r\n        const tx = buildCommitRecordTx(claimId, attesterId, subjectId, gasPrice, gasLimit, payer);\r\n        await signTransactionAsync(tx, privateKey);\r\n        const response = await client.sendRawTransaction(tx.serialize(), false, true);\r\n\r\n        const event = AttestNotifyEvent.deserialize(response);\r\n        // tslint:disable-next-line:no-console\r\n        console.log(JSON.stringify(event));\r\n        return event.Result.Notify[0].States[0] === 'Push';\r\n    }\r\n\r\n    /**\r\n     * Revokes claim attest from blockchain.\r\n     *\r\n     * @param gas the cost of the transactoin\r\n     * @param payer the payer of the cost\r\n     * @param privateKey Private key to sign the transaction\r\n     * @param url Websocket endpoint of Ontology node\r\n     * @param gasPrice gasPrice\r\n     * @param gasLimit gasLimit\r\n     * @param payer payer\r\n     */\r\n    async revoke(url: string, gasPrice: string,\r\n                 gasLimit: string, payer: Address, privateKey: PrivateKey): Promise<boolean> {\r\n        const attesterId = this.metadata.issuer;\r\n        const claimId = this.metadata.messageId;\r\n        if (claimId === undefined) {\r\n            throw new Error('Claim id not specified.');\r\n        }\r\n        const client = new WebsocketClient(url);\r\n        const tx = buildRevokeRecordTx(claimId, attesterId, gasPrice, gasLimit, payer);\r\n        await signTransactionAsync(tx, privateKey);\r\n        const response = await client.sendRawTransaction(tx.serialize(), false, true);\r\n\r\n        const event = AttestNotifyEvent.deserialize(response);\r\n\r\n        return event.Result.Notify[0].States[0] === 'Push';\r\n    }\r\n\r\n    /**\r\n     * Gets status of the claim attest.\r\n     *\r\n     * @param url Restful endpoint of Ontology node\r\n     */\r\n    async getStatus(url: string): Promise<boolean> {\r\n        const attesterId = this.metadata.issuer;\r\n        const claimId = this.metadata.messageId;\r\n        if (claimId === undefined) {\r\n            throw new Error('Claim id not specified.');\r\n        }\r\n\r\n        const client = new RestClient(url);\r\n        const tx = buildGetRecordStatusTx(claimId);\r\n\r\n        const response = await client.sendRawTransaction(tx.serialize(), true);\r\n\r\n        const result = GetStatusResponse.deserialize(response);\r\n        // tslint:disable-next-line:no-console\r\n        console.log(result);\r\n\r\n        return result.status === Status.ATTESTED && result.issuerId === attesterId;\r\n    }\r\n\r\n    protected payloadToJSON(): any {\r\n        return {\r\n            'ver': this.version,\r\n            '@context': this.context,\r\n            'clm': this.content,\r\n            'clm-rev': this.revocation\r\n        };\r\n    }\r\n\r\n    protected payloadFromJSON(json: any): void {\r\n        this.version = json.ver;\r\n        this.context = json['@context'];\r\n        this.content = json.clm;\r\n        this.revocation = json['clm-rev'];\r\n    }\r\n\r\n    /**\r\n     * Serializes the header into JWT/JWT-X encoded header.\r\n     *\r\n     * Override default implementation by adding proof if available.\r\n     *\r\n     * @param algorithm Signature algorithm used\r\n     * @param publicKeyId The ID of a signature public key\r\n     */\r\n    protected serializeHeader(algorithm: SignatureScheme | undefined, publicKeyId: string | undefined): string {\r\n        if (this.useProof) {\r\n            if (algorithm === undefined || publicKeyId === undefined) {\r\n                throw new Error('Signature is needed fow JWT-X.');\r\n            } else {\r\n                const header = {\r\n                    alg: algorithm.labelJWS,\r\n                    typ: 'JWT-X',\r\n                    kid: publicKeyId\r\n                };\r\n\r\n                const stringified = JSON.stringify(header);\r\n                return b64.encode(stringified, 'utf-8');\r\n            }\r\n        } else {\r\n            return super.serializeHeader(algorithm, publicKeyId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Serializes the proof into JWT-X.\r\n     */\r\n    protected serializeProof(): string {\r\n        const stringified = JSON.stringify(this.proof);\r\n        return b64.encode(stringified, 'utf-8');\r\n    }\r\n}\r\n\r\n/**\r\n * Helper class for deserializing GetStatus response.\r\n * fixme: Ontology node changed the response\r\n */\r\nexport class GetStatusResponse {\r\n    static deserialize(r: any): GetStatusResponse {\r\n        const response = new GetStatusResponse();\r\n\r\n        if (r.Result !== undefined && r.Result.Result === '') {\r\n            response.status = Status.NOTFOUND;\r\n            return response;\r\n        }\r\n        const sr = new StringReader(r.Result.Result);\r\n        sr.read(1); // data type\r\n        sr.readNextLen(); // data length\r\n        sr.read(1); // data type\r\n        const claimId = hexstr2str(sr.readNextBytes());\r\n        sr.read(1); // data type\r\n        const issuerId = hexstr2str(sr.readNextBytes());\r\n        sr.read(1); // data type\r\n        const subjectId = hexstr2str(sr.readNextBytes());\r\n        sr.read(1); // data type\r\n        let status = sr.readNextBytes();\r\n        response.claimId = claimId;\r\n        response.issuerId = issuerId;\r\n        response.subjectId = subjectId;\r\n        if (!status) {// status is revoked\r\n            status = '00';\r\n        }\r\n        response.status =  status as Status;\r\n        return response;\r\n    }\r\n\r\n    claimId: string;\r\n    issuerId: string;\r\n    subjectId: string;\r\n    status: Status;\r\n    // status: Status;\r\n    // attesterId: string;\r\n    // time: string;\r\n}\r\n\r\nexport enum Status {\r\n    REVOKED = '00',\r\n    ATTESTED = '01',\r\n    NOTFOUND = '-1'\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport { PublicKey } from '../crypto';\r\nimport { hexstr2str, str2VarBytes, StringReader } from '../utils';\r\n\r\n/**\r\n * Public key representation with recorded id from blockchain.\r\n *\r\n */\r\nexport class PublicKeyWithId {\r\n    /**\r\n     * Deserialize from hex string to PublicKeyWithId\r\n     * @param hexstr\r\n     */\r\n    static deserialize(hexstr: string): PublicKeyWithId[] {\r\n        const sr = new StringReader(hexstr);\r\n\r\n        const result: PublicKeyWithId[] = [];\r\n        while (!sr.isEmpty()) {\r\n            const index = sr.readUint32();\r\n            const data = sr.readNextBytes();\r\n            const p = new PublicKeyWithId();\r\n            p.id = index;\r\n            p.pk = PublicKey.deserializeHex(new StringReader(data));\r\n            result.push(p);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Id of the public key.\r\n     *\r\n     * Only numeric part is recorded. Full PublicKeyId will be constucted as follows:\r\n     * <ONTID>#keys-<id>\r\n     */\r\n    id: number;\r\n    pk: PublicKey;\r\n}\r\n\r\n/**\r\n * Description attribute of ONT ID\r\n */\r\nexport class DDOAttribute {\r\n    static deserialize(hexstr: string) {\r\n        const sr = new StringReader(hexstr);\r\n\r\n        const result: DDOAttribute[] = [];\r\n        while (!sr.isEmpty()) {\r\n            const key = hexstr2str(sr.readNextBytes());\r\n            const type = hexstr2str(sr.readNextBytes());\r\n            const value = hexstr2str(sr.readNextBytes());\r\n            const d = new DDOAttribute();\r\n            d.key = key;\r\n            d.type = type;\r\n            d.value = value;\r\n            result.push(d);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Key of the attribute\r\n     */\r\n    key: string;\r\n    /**\r\n     * Type of the attribute\r\n     */\r\n    type: string;\r\n    /**\r\n     * Value of the attribute\r\n     */\r\n    value: string;\r\n\r\n    /**\r\n     * Serialize DDO to hex string\r\n     */\r\n    serialize(): string {\r\n        let result = '';\r\n        result += str2VarBytes(this.key);\r\n        result += str2VarBytes(this.type);\r\n        result += str2VarBytes(this.value);\r\n        return result;\r\n    }\r\n}\r\n\r\n/**\r\n * Description object of ONT ID\r\n */\r\nexport class DDO {\r\n    /**\r\n     * Deserialize from hex string to DDO\r\n     * @param hexstr Hex encoded string\r\n     */\r\n    static deserialize(hexstr: string): DDO {\r\n        const ss = new StringReader(hexstr);\r\n\r\n        const ddo = new DDO();\r\n        const pkLen = ss.readNextLen();\r\n\r\n        if (pkLen > 0) {\r\n            ddo.publicKeys = PublicKeyWithId.deserialize(ss.read(pkLen));\r\n        }\r\n\r\n        const attrLen = ss.readNextLen();\r\n        if (attrLen > 0) {\r\n            ddo.attributes = DDOAttribute.deserialize(ss.read(attrLen));\r\n        }\r\n\r\n        const recoveryLen = ss.readNextLen();\r\n        if (recoveryLen > 0) {\r\n            ddo.recovery = ss.read(recoveryLen);\r\n        }\r\n        return ddo;\r\n    }\r\n\r\n    /**\r\n     * Array of public keys\r\n     */\r\n    publicKeys: PublicKeyWithId[] = [];\r\n    /**\r\n     * Array of attributes\r\n     */\r\n    attributes: DDOAttribute[] = [];\r\n    /**\r\n     * Recovery of DDO\r\n     */\r\n    recovery: string = '';\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport * as b64 from 'base64-url';\r\nimport * as uuid from 'uuid';\r\nimport { PrivateKey, PublicKey, PublicKeyStatus, Signature, SignatureScheme } from '../crypto';\r\nimport RestClient from '../network/rest/restClient';\r\nimport { buildGetDDOTx, buildGetPublicKeyStateTx } from '../smartcontract/nativevm/ontidContractTxBuilder';\r\nimport { DDO } from '../transaction/ddo';\r\nimport { now } from '../utils';\r\n\r\n/**\r\n * Factory method type used for creating concrete instances of Message.\r\n */\r\nexport type MessageFactory<T extends Message> = (\r\n    metadata: Metadata,\r\n    signature: Signature | undefined\r\n) => T;\r\n\r\n/**\r\n * Metadata about the message.\r\n */\r\nexport interface Metadata {\r\n    /**\r\n     * Message id.\r\n     *\r\n     * Will be assigned if not provided.\r\n     */\r\n    messageId?: string;\r\n\r\n    /**\r\n     * Issuer.\r\n     */\r\n    issuer: string;\r\n\r\n    /**\r\n     * Recipient.\r\n     */\r\n    subject: string;\r\n\r\n    /**\r\n     * Creation time.\r\n     */\r\n    issuedAt: number;\r\n\r\n    /**\r\n     * Expiration time.\r\n     */\r\n    expireAt?: number;\r\n}\r\n\r\n/**\r\n * Common representation of Message in JWT form.\r\n */\r\nexport abstract class Message {\r\n\r\n    /**\r\n     * Deserializes the message from JWT format.\r\n     *\r\n     * A concrete instance will be creater through the message factory method. This method\r\n     * is called from concrete class.\r\n     *\r\n     * @param jwt Encoded message\r\n     * @param creator Factory method\r\n     */\r\n    protected static deserializeInternal<T extends Message>(jwt: string, creator: MessageFactory<T>): T {\r\n        const parts = jwt.split('.', 3);\r\n\r\n        if (parts.length < 2) {\r\n            throw new Error('Invalid message.');\r\n        }\r\n\r\n        const header = Message.deserializeHeader(parts[0]);\r\n        const payload = Message.deserializePayload(parts[1]);\r\n        let signature: Signature | undefined;\r\n\r\n        if (parts.length > 2) {\r\n            if (header.algorithm !== undefined && header.publicKeyId !== undefined) {\r\n                signature = Signature.deserializeJWT(parts[2], header.algorithm, header.publicKeyId);\r\n            } else {\r\n                throw new Error('Signature scheme was not specified.');\r\n            }\r\n        }\r\n\r\n        const msg = creator(payload.metadata, signature);\r\n        msg.payloadFromJSON(payload.rest);\r\n        return msg;\r\n    }\r\n\r\n    /**\r\n     * Deserializes payload part of JWT message.\r\n     *\r\n     * @param encoded JWT encoded payload\r\n     */\r\n    private static deserializePayload(encoded: string) {\r\n        const stringified = b64.decode(encoded);\r\n        const { jti, iss, sub, iat, exp, ...rest } = JSON.parse(stringified);\r\n\r\n        return {\r\n            metadata: {\r\n                messageId: jti,\r\n                issuer: iss,\r\n                subject: sub,\r\n                issuedAt: iat,\r\n                expireAt: exp\r\n            } as Metadata,\r\n            rest\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Deserializes the header from JWT encoded header.\r\n     *\r\n     * @param encoded JWT encoded header\r\n     */\r\n    private static deserializeHeader(encoded: string) {\r\n        const stringified = b64.decode(encoded);\r\n        const header = JSON.parse(stringified);\r\n\r\n        return {\r\n            algorithm: header.alg !== undefined ? SignatureScheme.fromLabelJWS(header.alg) : undefined,\r\n            publicKeyId: header.kid\r\n        };\r\n    }\r\n\r\n    metadata: Metadata;\r\n    signature?: Signature;\r\n\r\n    constructor(metadata: Metadata, signature: Signature | undefined) {\r\n        this.metadata = metadata;\r\n        this.signature = signature;\r\n\r\n        if (this.metadata.messageId === undefined) {\r\n            this.metadata.messageId = uuid();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Signs the message and store the signature inside the request.\r\n     *\r\n     * If the algorithm is not specified, then default algorithm for Private key type is used.\r\n     *\r\n     * @param url Restful endpoint of Ontology node\r\n     * @param publicKeyId The ID of a signature public key\r\n     * @param privateKey Private key to sign the request with\r\n     * @param algorithm Signature algorithm used\r\n     */\r\n    async sign(\r\n        url: string,\r\n        publicKeyId: string,\r\n        privateKey: PrivateKey,\r\n        algorithm?: SignatureScheme\r\n    ): Promise<void> {\r\n        await retrievePublicKey(publicKeyId, url);\r\n\r\n        if (algorithm === undefined) {\r\n            algorithm = privateKey.algorithm.defaultSchema;\r\n        }\r\n\r\n        const msg = this.serializeUnsigned(algorithm, publicKeyId);\r\n        this.signature = await privateKey.signAsync(msg, algorithm, publicKeyId);\r\n    }\r\n\r\n    /**\r\n     * Verifies the signature and check ownership of specified ONT ID through smart contract call.\r\n     *\r\n     * @param url Restful endpoint of Ontology node\r\n     * @returns Boolean if the ownership is confirmed\r\n     */\r\n    async verify(url: string): Promise<boolean> {\r\n        const signature = this.signature;\r\n\r\n        if (signature !== undefined && signature.publicKeyId !== undefined) {\r\n            try {\r\n                if (!this.verifyKeyOwnership()) {\r\n                    return false;\r\n                }\r\n\r\n                if (!this.verifyExpiration()) {\r\n                    return false;\r\n                }\r\n\r\n                const state = await retrievePublicKeyState(signature.publicKeyId, url);\r\n                if (state === PublicKeyStatus.REVOKED) {\r\n                    return false;\r\n                }\r\n\r\n                const publicKey = await retrievePublicKey(signature.publicKeyId, url);\r\n\r\n                const msg = this.serializeUnsigned(signature.algorithm, signature.publicKeyId);\r\n                return publicKey.verify(msg, signature);\r\n            } catch (e) {\r\n                return false;\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Serializes the message without signature into JWT format.\r\n     *\r\n     * Header might contain algorithm and public key id.\r\n     *\r\n     * @param algorithm Signature algorithm used\r\n     * @param publicKeyId The ID of a signature public key\r\n     */\r\n    serializeUnsigned(algorithm?: SignatureScheme, publicKeyId?: string): string {\r\n        const headerEncoded = this.serializeHeader(algorithm, publicKeyId);\r\n        const payloadEncoded = this.serializePayload();\r\n\r\n        return headerEncoded + '.' + payloadEncoded;\r\n    }\r\n\r\n    /**\r\n     * Serializes the message into JWT format.\r\n     *\r\n     */\r\n    serialize(): string {\r\n        const signature = this.signature;\r\n\r\n        if (signature !== undefined) {\r\n            const signatureEncoded = signature.serializeJWT();\r\n            return this.serializeUnsigned(signature.algorithm, signature.publicKeyId) + '.' + signatureEncoded;\r\n        } else {\r\n            return this.serializeUnsigned();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Serializes the header into JWT encoded header.\r\n     *\r\n     * @param algorithm Signature algorithm used\r\n     * @param publicKeyId The ID of a signature public key\r\n     */\r\n    protected serializeHeader(\r\n        algorithm: SignatureScheme | undefined,\r\n        publicKeyId: string | undefined\r\n    ): string {\r\n        let header;\r\n        if (algorithm !== undefined) {\r\n            header = {\r\n                alg: algorithm.labelJWS,\r\n                typ: 'JWT',\r\n                kid: publicKeyId\r\n            };\r\n        } else {\r\n            header = {\r\n                typ: 'JWT'\r\n            };\r\n        }\r\n\r\n        const stringified = JSON.stringify(header);\r\n        return b64.encode(stringified, 'utf-8');\r\n    }\r\n\r\n    /**\r\n     * Converts claim data to JSON for serialization.\r\n     */\r\n    protected abstract payloadToJSON(): any;\r\n\r\n    /**\r\n     * Retrieves data from JSON.\r\n     *\r\n     * @param json JSON object with data\r\n     */\r\n    protected abstract payloadFromJSON(json: any): void;\r\n\r\n    /**\r\n     * Verifies if the expiration date has passed\r\n     */\r\n    private verifyExpiration(): boolean {\r\n        if (this.metadata.expireAt !== undefined) {\r\n            return now() < this.metadata.expireAt;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Verifies if the declared public key id belongs to issuer.\r\n     */\r\n    private verifyKeyOwnership(): boolean {\r\n        const signature = this.signature;\r\n\r\n        if (signature !== undefined && signature.publicKeyId !== undefined) {\r\n            const ontId = extractOntId(signature.publicKeyId);\r\n\r\n            return ontId === this.metadata.issuer;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Serializes payload part of JWT message.\r\n     */\r\n    private serializePayload(): string {\r\n        const metadata = {\r\n            jti: this.metadata.messageId,\r\n            iss: this.metadata.issuer,\r\n            sub: this.metadata.subject,\r\n            iat: this.metadata.issuedAt,\r\n            exp: this.metadata.expireAt\r\n        };\r\n        const rest = this.payloadToJSON();\r\n\r\n        const stringified = JSON.stringify({...metadata, ...rest});\r\n        return b64.encode(stringified, 'utf-8');\r\n    }\r\n}\r\n\r\n/**\r\n * Gets the public key associated with ONT ID from blockchain.\r\n *\r\n * @param publicKeyId The ID of a signature public key\r\n * @param url Restful endpoint of Ontology node\r\n */\r\nexport async function retrievePublicKey(publicKeyId: string, url: string): Promise<PublicKey> {\r\n    const ontId = extractOntId(publicKeyId);\r\n    const keyId = extractKeyId(publicKeyId);\r\n\r\n    const client = new RestClient(url);\r\n    const tx = buildGetDDOTx(ontId);\r\n    const response = await client.sendRawTransaction(tx.serialize(), true);\r\n\r\n    if (response.Result && response.Result.Result) {\r\n        const ddo = DDO.deserialize(response.Result.Result);\r\n\r\n        const publicKey = ddo.publicKeys.find((pk) => pk.id === keyId);\r\n\r\n        if (publicKey === undefined) {\r\n            throw new Error('Not found');\r\n        }\r\n\r\n        return publicKey.pk;\r\n    } else {\r\n        throw new Error('Not found');\r\n    }\r\n}\r\n\r\n/**\r\n * Gets the state of public key associated with ONT ID from blockchain.\r\n *\r\n * @param publicKeyId The ID of a signature public key\r\n * @param url Restful endpoint of Ontology node\r\n */\r\nexport async function retrievePublicKeyState(publicKeyId: string, url: string): Promise<PublicKeyStatus> {\r\n    const ontId = extractOntId(publicKeyId);\r\n    const keyId = extractKeyId(publicKeyId);\r\n\r\n    const client = new RestClient(url);\r\n    const tx = buildGetPublicKeyStateTx(ontId, keyId);\r\n    const response = await client.sendRawTransaction(tx.serialize(), true);\r\n\r\n    if (response.Result && response.Result.Result) {\r\n        return PublicKeyStatus.fromHexLabel(response.Result.Result);\r\n    } else {\r\n        throw new Error('Not found');\r\n    }\r\n}\r\n\r\n/**\r\n * Extracts ONT ID from public key Id.\r\n *\r\n * @param publicKeyId The ID of a signature public key\r\n */\r\nexport function extractOntId(publicKeyId: string): string {\r\n    const index = publicKeyId.indexOf('#keys-');\r\n\r\n    if (index === -1) {\r\n        throw new Error('Is not a publicKeId.');\r\n    }\r\n\r\n    return publicKeyId.substr(0, index);\r\n}\r\n\r\n/**\r\n * Extracts key id from public key Id.\r\n *\r\n * @param publicKeyId The ID of a signature public key\r\n */\r\nexport function extractKeyId(publicKeyId: string): number {\r\n    const index = publicKeyId.indexOf('#keys-');\r\n\r\n    if (index === -1) {\r\n        throw new Error('Is not a publicKeId.');\r\n    }\r\n\r\n    // return num2hexstring(\r\n    //     Number(publicKeyId.substr(index + '#keys-'.length))\r\n    // );\r\n    return Number(publicKeyId.substr(index + '#keys-'.length));\r\n}\r\n","/*\r\n* Copyright (C) 2018 The ontology Authors\r\n* This file is part of The ontology library.\r\n*\r\n* The ontology is free software: you can redistribute it and/or modify\r\n* it under the terms of the GNU Lesser General Public License as published by\r\n* the Free Software Foundation, either version 3 of the License, or\r\n* (at your option) any later version.\r\n*\r\n* The ontology is distributed in the hope that it will be useful,\r\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n* GNU Lesser General Public License for more details.\r\n*\r\n* You should have received a copy of the GNU Lesser General Public License\r\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\nimport { Address, JsonKey, PrivateKey } from './crypto';\r\nimport { deserializeFromJson } from './crypto/PrivateKeyFactory';\r\nimport { ScryptParams } from './scrypt';\r\nimport { Transaction } from './transaction/transaction';\r\nimport { signTransaction } from './transaction/transactionBuilder';\r\nimport { ab2hexstring, generateRandomArray, randomBytes } from './utils';\r\n\r\n/**\r\n * Control data of identity\r\n */\r\nexport class ControlData {\r\n    static fromJson(json: any): ControlData {\r\n        const privateKey = deserializeFromJson(json as JsonKey);\r\n        const cd = new ControlData(json.id, privateKey, new Address(json.address), json.salt);\r\n        cd.publicKey = json.publicKey;\r\n        cd.hash = json.hash;\r\n        return cd;\r\n    }\r\n\r\n    /**\r\n     * Id of control data\r\n     */\r\n    id: string;\r\n    /**\r\n     * Encrypted private key\r\n     */\r\n    encryptedKey: PrivateKey;\r\n    /**\r\n     * Address of control data\r\n     */\r\n    address: Address;\r\n    /**\r\n     * Salt of control data\r\n     */\r\n    salt: string;\r\n    /**\r\n     * hash type\r\n     */\r\n    hash: string = 'sha256';\r\n    /**\r\n     * The public key\r\n     */\r\n    publicKey: string;\r\n\r\n    constructor(id: string, encryptedKey: PrivateKey, address: Address, salt: string) {\r\n        this.id = id;\r\n        this.encryptedKey = encryptedKey;\r\n        this.address = address;\r\n        this.salt = salt;\r\n    }\r\n\r\n    toJson(): object {\r\n        return {\r\n            id: this.id,\r\n            ...this.encryptedKey.serializeJson(),\r\n            address: this.address.toBase58(),\r\n            salt: this.salt,\r\n            ['enc-alg']: 'aes-256-gcm',\r\n            hash: this.hash,\r\n            publicKey: this.publicKey\r\n        };\r\n    }\r\n}\r\n\r\nexport class Identity {\r\n    /**\r\n     * Import identity\r\n     * @param label Name of identity\r\n     * @param encryptedPrivateKey Encrypted private key\r\n     * @param password User's password to decrypt\r\n     * @param address Address to decrypt\r\n     * @param saltBase64 Salt to decrypt\r\n     * @param params Optional params to decrypt\r\n     */\r\n    static importIdentity(\r\n        label: string,\r\n        encryptedPrivateKey: PrivateKey,\r\n        password: string,\r\n        address: Address,\r\n        saltBase64: string,\r\n        params?: ScryptParams\r\n    ): Identity {\r\n        // create identity\r\n        const identity = new Identity();\r\n        const salt = Buffer.from(saltBase64, 'base64').toString('hex');\r\n        const privateKey = encryptedPrivateKey.decrypt(password, address, salt, params);\r\n        if (!label) {\r\n            label = ab2hexstring (generateRandomArray(4));\r\n        }\r\n\r\n        // generate ontid from p\r\n        const publicKey = privateKey.getPublicKey();\r\n        identity.ontid = Address.generateOntid(publicKey);\r\n        identity.label = label;\r\n        identity.lock = false;\r\n        identity.isDefault = false;\r\n\r\n        // control\r\n        const control = new ControlData('1', encryptedPrivateKey, Address.fromOntid(identity.ontid), saltBase64);\r\n        control.publicKey = publicKey.serializeHex();\r\n        identity.controls.push(control);\r\n\r\n        return identity;\r\n    }\r\n\r\n    /**\r\n     * Creates Identity object encrypting specified private key.\r\n     *\r\n     * The identity is not registered on the blockchain. Caller needs to register it.\r\n     *\r\n     * @param privateKey Private key associated with the identity\r\n     * @param keyphrase Password use to encrypt the private key\r\n     * @param label Custom label\r\n     * @param params Optional scrypt params\r\n     */\r\n    static create(privateKey: PrivateKey, keyphrase: string, label: string, params?: ScryptParams) {\r\n        const identity = new Identity();\r\n        identity.ontid = '';\r\n        identity.label = label;\r\n        identity.lock = false;\r\n        identity.isDefault = false;\r\n\r\n        // ontid\r\n        const publicKey = privateKey.getPublicKey();\r\n        identity.ontid = Address.generateOntid(publicKey);\r\n        const address = Address.fromOntid(identity.ontid);\r\n        const salt = randomBytes(16);\r\n        const encryptedPrivateKey = privateKey.encrypt(keyphrase, address, salt, params);\r\n        // start from 1\r\n        const saltBase64 = Buffer.from(salt, 'hex').toString('base64');\r\n        const control = new ControlData('1', encryptedPrivateKey, address, saltBase64);\r\n        control.publicKey = publicKey.serializeHex();\r\n        identity.controls.push(control);\r\n\r\n        return identity;\r\n    }\r\n\r\n    static parseJson(json: string): Identity {\r\n        return Identity.parseJsonObj(JSON.parse(json));\r\n    }\r\n\r\n    /**\r\n     * Deserializes JSON object.\r\n     *\r\n     * Object should be real object, not stringified.\r\n     *\r\n     * @param obj JSON object\r\n     */\r\n    static parseJsonObj(obj: any): Identity {\r\n        const id = new Identity();\r\n        id.ontid = obj.ontid;\r\n        id.label = obj.label;\r\n        id.lock = obj.lock;\r\n        id.isDefault = obj.isDefault;\r\n        id.controls = (obj.controls as any[]).map((c) => ControlData.fromJson(c));\r\n        id.extra = obj.extra;\r\n        return id;\r\n    }\r\n\r\n    ontid: string;\r\n    label: string;\r\n    lock: boolean;\r\n    isDefault: boolean;\r\n    controls: ControlData[] = [];\r\n    extra: null;\r\n\r\n    addControl(control: ControlData) {\r\n        for (const c of this.controls) {\r\n            if (c.address.toBase58() === control.address.toBase58()) {\r\n                return;\r\n            }\r\n        }\r\n        control.id = (this.controls.length + 1).toString();\r\n        this.controls.push(control);\r\n    }\r\n\r\n    toJson(): string {\r\n        return JSON.stringify(this.toJsonObj());\r\n    }\r\n\r\n    /**\r\n     * Serializes to JSON object.\r\n     *\r\n     * Returned object will not be stringified.\r\n     *\r\n     */\r\n    toJsonObj(): any {\r\n        const obj = {\r\n            ontid: this.ontid,\r\n            label: this.label,\r\n            lock: this.lock,\r\n            isDefault: this.isDefault,\r\n            controls: this.controls.map((c) => c.toJson()),\r\n            extra: this.extra\r\n        };\r\n        return obj;\r\n    }\r\n\r\n    exportPrivateKey(password: string, params?: ScryptParams) {\r\n        const encryptedKey = this.controls[0].encryptedKey;\r\n        const address = this.controls[0].address;\r\n        const salt = this.controls[0].salt;\r\n        return encryptedKey.decrypt(password, address, salt, params);\r\n    }\r\n\r\n    signTransaction(password: string, tx: Transaction, params?: ScryptParams) {\r\n        const pri = this.exportPrivateKey(password, params);\r\n        signTransaction(tx, pri, pri.algorithm.defaultSchema);\r\n        return tx;\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport * as cryptoJS from 'crypto-js';\r\nimport { Signable } from '../crypto/index';\r\nimport { PrivateKey } from '../crypto/PrivateKey';\r\nimport { TxType } from '../transaction/transaction';\r\nimport { SignatureScheme } from './../crypto/SignatureScheme';\r\nimport { TransactionAttribute } from './../transaction/txAttribute';\r\nimport { num2hexstring, num2VarInt } from './../utils';\r\nimport { Program } from './Program';\r\nimport { TransactionInput } from './TransactionInput';\r\nimport { TransactionOutput } from './TransactionOutput';\r\n\r\n/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nexport class TransactionNeo implements Signable {\r\n    /**\r\n     * Transaction type\r\n     */\r\n    type: TxType;\r\n\r\n    version: number = 0;\r\n\r\n    nonce: string;\r\n\r\n    attributes: TransactionAttribute[];\r\n\r\n    inputs: TransactionInput[];\r\n\r\n    outputs: TransactionOutput[];\r\n\r\n    scripts: Program[];\r\n\r\n    serialize() {\r\n        let result = this.serializeUnsigned();\r\n        result += num2VarInt(this.scripts.length);\r\n        for (const s of this.scripts) {\r\n            result += s.serialize();\r\n        }\r\n\r\n        return result;\r\n\r\n    }\r\n\r\n    serializeUnsigned() {\r\n        let result = '';\r\n        result += num2hexstring(this.type);\r\n        result += num2hexstring(this.version);\r\n\r\n        result += this.serializeExclusiveData();\r\n        result += num2VarInt(this.attributes.length);\r\n        for (const a of this.attributes) {\r\n            result += a.serialize();\r\n        }\r\n\r\n        result += num2VarInt(this.inputs.length);\r\n        for (const i of this.inputs) {\r\n            result += i.serialize();\r\n        }\r\n\r\n        result += num2VarInt(this.outputs.length);\r\n        for (const o of this.outputs) {\r\n            result += o.serialize();\r\n        }\r\n        return result;\r\n    }\r\n\r\n    getHash() {\r\n        const data = this.serializeUnsigned();\r\n\r\n        const ProgramHexString = cryptoJS.enc.Hex.parse(data);\r\n        const ProgramSha256 = cryptoJS.SHA256(ProgramHexString).toString();\r\n        const ProgramSha2562 = cryptoJS.SHA256(cryptoJS.enc.Hex.parse(ProgramSha256)).toString();\r\n\r\n        return ProgramSha2562;\r\n    }\r\n\r\n    getSignContent() {\r\n        return this.getHashData();\r\n    }\r\n\r\n    serializeUnsignedData() {\r\n        return this.getHashData();\r\n    }\r\n\r\n    getHashData() {\r\n        return this.serializeUnsigned();\r\n    }\r\n\r\n    sign(privateKey: PrivateKey, scheme: SignatureScheme = SignatureScheme.ECDSAwithSHA256) {\r\n        const sig = privateKey.sign(this.getHashData(), scheme).serializeHex();\r\n        const signature = sig.substring(2);\r\n        return signature;\r\n    }\r\n\r\n    protected serializeExclusiveData() {\r\n        return '';\r\n    }\r\n\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport { hex2VarBytes } from '../utils';\r\nimport { TxType } from './../transaction/transaction';\r\nimport { num2hexstring } from './../utils';\r\nimport { TransactionNeo } from './TransactionNeo';\r\n\r\nexport class InvocationTransaction extends TransactionNeo {\r\n    script: string;\r\n    gas: number;\r\n    constructor() {\r\n        super();\r\n        this.type = TxType.Invoke;\r\n    }\r\n\r\n    serializeExclusiveData() {\r\n        let result = '';\r\n        result += hex2VarBytes(this.script);\r\n        result += num2hexstring(this.gas, 8, true);\r\n        return result;\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport axios from 'axios';\r\nimport { Address } from './../crypto/address';\r\n\r\nexport class NeoRpc {\r\n\r\n    static sendRawTransaction(url: string, data: string) {\r\n        const req = this.makeRequest('sendrawtransaction', data);\r\n        return axios.post(url, req).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    static makeRequest(method: string, ...params: any[]) {\r\n        const request = {\r\n            jsonrpc: '2.0',\r\n            method,\r\n            params,\r\n            id: 1\r\n        };\r\n\r\n        return request;\r\n    }\r\n\r\n    static getBalance(url: string, contractAddr: Address, address: Address) {\r\n        const req = this.makeRequest('getstorage', contractAddr.toHexString(), address.serialize());\r\n        return axios.post(url, req).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport { PublicKey } from '../crypto/PublicKey';\r\nimport { programFromMultiPubKey, programFromParams, programFromPubKey } from '../transaction/program';\r\nimport { hex2VarBytes, StringReader } from '../utils';\r\n\r\nexport class Program {\r\n    static deserialize(hexstring: string) {\r\n        const sr = new StringReader();\r\n        const program = new Program();\r\n        program.parameter = sr.readNextBytes();\r\n        program.code = sr.readNextBytes();\r\n        return program;\r\n    }\r\n\r\n    static programFromParams(sigData: string[]) {\r\n        return programFromParams(sigData);\r\n    }\r\n\r\n    static programFromPubKey(publicKey: PublicKey) {\r\n        return programFromPubKey(publicKey);\r\n    }\r\n\r\n    static programFromMultiPubKey(m: number, pks: PublicKey[]) {\r\n        return programFromMultiPubKey(pks, m);\r\n    }\r\n\r\n    parameter: string;\r\n\r\n    code: string;\r\n\r\n    serialize() {\r\n        let result = '';\r\n        result += hex2VarBytes(this.parameter);\r\n        result += hex2VarBytes(this.code);\r\n        return result;\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport AbiFunction from '../smartcontract/abi/abiFunction';\r\nimport { serializeAbiFunction } from '../transaction/scriptBuilder';\r\nimport { num2hexstring, randomBytes } from '../utils';\r\nimport { Address } from './../crypto/address';\r\nimport { TransactionAttribute, TransactionAttributeUsage } from './../transaction/txAttribute';\r\nimport { InvocationTransaction } from './InvocationTransaction';\r\nexport class SmartContract {\r\n    static makeInvokeTransaction(contractAddr: Address, addr: Address, abiFunction: AbiFunction) {\r\n        let params = serializeAbiFunction(abiFunction);\r\n        params += num2hexstring(0x67);\r\n        params += contractAddr.serialize();\r\n        const tx = this.makeInvocationTransaction(params, addr);\r\n        return tx;\r\n    }\r\n\r\n    static makeInvocationTransaction(params: string, addr: Address) {\r\n        const tx = new InvocationTransaction();\r\n        tx.version = 1;\r\n        tx.attributes = [];\r\n        const attr1 = new TransactionAttribute();\r\n        attr1.usage = TransactionAttributeUsage.Script;\r\n        attr1.data = addr.serialize();\r\n        tx.attributes[0] = attr1;\r\n        const attr2 = new TransactionAttribute();\r\n        attr2.usage = TransactionAttributeUsage.DescriptionUrl;\r\n        attr2.data = randomBytes(16);\r\n        tx.attributes[1] = attr2;\r\n        tx.inputs = [];\r\n        tx.outputs = [];\r\n        tx.script = params;\r\n        tx.gas = 0;\r\n        return tx;\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport { reverseHex } from '../utils';\r\nimport { num2hexstring, StringReader } from './../utils';\r\n\r\nexport class TransactionInput {\r\n\r\n    static deserialize(hexstr: string) {\r\n        const sr = new StringReader(hexstr);\r\n        const input = new TransactionInput();\r\n        input.prevHash = sr.read(20);\r\n        input.prevIndex = parseInt(reverseHex(sr.read(2)), 16);\r\n        return input;\r\n    }\r\n    /**\r\n     * 32 bytes\r\n     */\r\n    prevHash: string;\r\n\r\n    prevIndex: number;\r\n\r\n    equals(o: any) {\r\n        if (o === this) {\r\n            return true;\r\n        }\r\n        if (null === o) {\r\n            return false;\r\n        }\r\n        if (!(o instanceof TransactionInput)) {\r\n            return false;\r\n        }\r\n        return this.prevHash === o.prevHash && this.prevIndex === o.prevIndex;\r\n    }\r\n\r\n    hashCode() {\r\n        return parseInt(reverseHex(this.prevHash) , 16) + this.prevIndex;\r\n    }\r\n\r\n    serialize() {\r\n        let result = '';\r\n        result += this.prevHash;\r\n        result += num2hexstring(this.prevIndex, 2, true);\r\n        return result;\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport { Address } from './../crypto/address';\r\nimport { num2hexstring, StringReader } from './../utils';\r\nexport class TransactionOutput {\r\n\r\n    static deserialize(hexstring: string) {\r\n        const sr = new StringReader(hexstring);\r\n        const output = new TransactionOutput();\r\n        output.assetId = sr.read(32);\r\n        output.value = sr.readLong();\r\n        output.scriptHash = new Address(sr.read(20));\r\n        return output;\r\n    }\r\n\r\n    /**\r\n     * 32 bytes\r\n     */\r\n    assetId: string;\r\n\r\n    // long\r\n    value: number;\r\n\r\n    scriptHash: Address;\r\n\r\n    serialize() {\r\n        let result = '';\r\n        result += this.assetId;\r\n        result += num2hexstring(this.value, 8, true);\r\n        result += this.scriptHash.serialize();\r\n        return result;\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport axios from 'axios';\r\nimport { TEST_ONT_URL } from '../../consts';\r\nimport { Address } from '../../crypto/address';\r\nimport { ERROR_CODE } from '../../error';\r\n\r\n/**\r\n * Wrapper class for RPC apis.\r\n */\r\nexport default class RpcClient {\r\n    /**\r\n     * Url of the blockchain node\r\n     */\r\n    url: string;\r\n\r\n    constructor( url ?: string ) {\r\n        this.url = url || TEST_ONT_URL.RPC_URL;\r\n    }\r\n\r\n    /**\r\n     * Get the current blockchain node url.\r\n     */\r\n    getUrl() {\r\n        return this.url;\r\n    }\r\n\r\n    /**\r\n     * Make request base on method and parameters\r\n     * @param method Method's name\r\n     * @param params Parameters\r\n     */\r\n    makeRequest(method: string, ...params: any[]) {\r\n        const request = {\r\n            jsonrpc: '2.0',\r\n            method,\r\n            params,\r\n            id: 1\r\n        };\r\n\r\n        return request;\r\n    }\r\n\r\n    /**\r\n     * Get the balance of some address.\r\n     * The result contains ONT and ONG.\r\n     * @param address Address\r\n     */\r\n    getBalance(address: Address): Promise<any> {\r\n        const req = this.makeRequest('getbalance', address.toBase58());\r\n\r\n        return axios.post(this.url, req).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Send ran transaction to blockchain.\r\n     * @param data Hex encoded data.\r\n     * @param preExec Decides if it is a pre-execute transaction.\r\n     */\r\n    sendRawTransaction(data: string, preExec: boolean = false): Promise<any> {\r\n        let req;\r\n\r\n        if (preExec) {\r\n            req = this.makeRequest('sendrawtransaction', data, 1);\r\n        } else {\r\n            req = this.makeRequest('sendrawtransaction', data);\r\n        }\r\n\r\n        return axios.post(this.url, req).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get raw transaction by transaction hash.\r\n     * The result is hex encoded string.\r\n     * @param txHash Reversed transaction hash\r\n     */\r\n    getRawTransaction(txHash: string): Promise<any> {\r\n        const req = this.makeRequest('getrawtransaction', txHash);\r\n\r\n        return axios.post(this.url, req).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get transaction info by transaction hash.\r\n     * The result is json.\r\n     * @param txHash Reversed transaction hash.\r\n     */\r\n    getRawTransactionJson(txHash: string): Promise<any> {\r\n        const req = this.makeRequest('getrawtransaction', txHash, 1);\r\n\r\n        return axios.post(this.url, req).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /** Deprecated\r\n     * Get the generation time for each block.\r\n     * If the blockchain node runs in vbft, the result is null cause the time is not fixed.\r\n     */\r\n    // getGenerateBlockTime(): Promise<any> {\r\n    //     const req = this.makeRequest('getgenerateblocktime');\r\n\r\n    //     return axios.post(this.url, req).then((res) => {\r\n    //         return res.data;\r\n    //     });\r\n    // }\r\n\r\n    /**\r\n     * Get the nodes count.\r\n     */\r\n    getNodeCount(): Promise<any> {\r\n        const req = this.makeRequest('getconnectioncount');\r\n\r\n        return axios.post(this.url, req).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the current block height.\r\n     */\r\n    getBlockHeight(): Promise<any> {\r\n        const req = this.makeRequest('getblockcount');\r\n\r\n        return axios.post(this.url, req).then((res) => {\r\n            if (res.data && res.data.result) {\r\n                return res.data.result - 1;\r\n            } else {\r\n                return 0;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the all blocks count.\r\n     */\r\n    getBlockCount(): Promise<any> {\r\n        const req = this.makeRequest('getblockcount');\r\n\r\n        return axios.post(this.url, req).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get block info by block's height or hash.\r\n     * The result is json.\r\n     * @param value Block's hash or height\r\n     */\r\n    getBlockJson(value: string | number): Promise<any> {\r\n        const req = this.makeRequest('getblock', value, 1);\r\n\r\n        return axios.post(this.url, req).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get contract info by contract' code hash.\r\n     * The result is hex encoded string.\r\n     * @param hash Contract's code hash.\r\n     */\r\n    getContract(hash: string): Promise<any> {\r\n        const req = this.makeRequest('getcontractstate', hash);\r\n\r\n        return axios.post(this.url, req).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get contract info by contract's code hash.\r\n     * The result is json.\r\n     * @param codeHash Contract's code hash.\r\n     */\r\n    getContractJson(codeHash: string): Promise<any> {\r\n        const req = this.makeRequest('getcontractstate', codeHash, 1);\r\n\r\n        return axios.post(this.url, req).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get block info by block's height or hash.\r\n     * The result is hex encoded string.\r\n     *\r\n     * @param value Block's height or hash\r\n     */\r\n    getBlock(value: string | number): Promise<any> {\r\n        const req = this.makeRequest('getblock', value);\r\n\r\n        return axios.post(this.url, req).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get smart contract event.\r\n     * If parameter is transaction's hash, the result is the event of that transaction.\r\n     * If parameter is block's height, the result is all the events of that block.\r\n     *\r\n     * @param value Transaction's hash or block's height\r\n     */\r\n    getSmartCodeEvent(value: string | number): Promise<any> {\r\n        const req = this.makeRequest('getsmartcodeevent', value);\r\n\r\n        return axios.post(this.url, req).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get block height by transaction hash\r\n     * @param txHash Reversed transaction hash\r\n     */\r\n    getBlockHeightByTxHash(txHash: string): Promise<any> {\r\n        const req = this.makeRequest('getblockheightbytxhash', txHash);\r\n\r\n        return axios.post(this.url, req).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get stored value in smart contract by contract's code hash and the key.\r\n     * @param codeHash Contract's code hash\r\n     * @param key Key of stored value\r\n     */\r\n    getStorage(codeHash: string, key: string): Promise<any> {\r\n        const req = this.makeRequest('getstorage', codeHash, key);\r\n\r\n        // tslint:disable-next-line:no-console\r\n        console.log(req);\r\n\r\n        return axios.post(this.url, req).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get merkle proof by transaction hash.\r\n     * @param hash Reversed transaction hash\r\n     */\r\n    getMerkleProof(hash: string): Promise<any> {\r\n        const req = this.makeRequest('getmerkleproof', hash);\r\n\r\n        // tslint:disable-next-line:no-console\r\n        console.log(this.url);\r\n        // tslint:disable-next-line:no-console\r\n        console.log(req);\r\n\r\n        return axios.post(this.url, req).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get allowanece\r\n     * @param asset Asset's type.Only ONT and ONG supported.\r\n     * @param from Address of allowance's sender.\r\n     * @param to Address of allowance's receiver.\r\n     */\r\n    getAllowance(asset: string, from: Address, to: Address): Promise<any> {\r\n        if (asset !== 'ont' && asset !== 'ong') {\r\n            throw ERROR_CODE.INVALID_PARAMS;\r\n        }\r\n        const req = this.makeRequest('getallowance', asset, from.toBase58(), to.toBase58());\r\n        return axios.post(this.url, req).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    getUnboundOng(address: Address): Promise<any> {\r\n        const req = this.makeRequest('getunboundong', 'ong', address.toBase58(), address.toBase58());\r\n        return axios.post(this.url, req).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    getBlockTxsByHeight(height: number): Promise<any> {\r\n        const req = this.makeRequest('getblocktxsbyheight', height);\r\n        return axios.post(this.url, req).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    getGasPrice(): Promise<any> {\r\n        const req = this.makeRequest('getgasprice');\r\n        return axios.post(this.url, req).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    getGrantOng(address: Address): Promise<any> {\r\n        const req = this.makeRequest('getgrantong', address.toBase58());\r\n        return axios.post(this.url, req).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    getMempoolTxCount(): Promise<any> {\r\n        const req = this.makeRequest('getmempooltxcount');\r\n        return axios.post(this.url, req).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    getMempoolTxState(txHash: string): Promise<any> {\r\n        const req = this.makeRequest('getmempooltxstate', txHash);\r\n        return axios.post(this.url, req).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n    getVersion(): Promise<any> {\r\n        const req = this.makeRequest('getversion');\r\n        return axios.post(this.url, req).then((res) => {\r\n            return res.data;\r\n        });\r\n    }\r\n\r\n}\r\n","/*\r\n* Copyright (C) 2018 The ontology Authors\r\n* This file is part of The ontology library.\r\n*\r\n* The ontology is free software: you can redistribute it and/or modify\r\n* it under the terms of the GNU Lesser General Public License as published by\r\n* the Free Software Foundation, either version 3 of the License, or\r\n* (at your option) any later version.\r\n*\r\n* The ontology is distributed in the hope that it will be useful,\r\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n* GNU Lesser General Public License for more details.\r\n*\r\n* You should have received a copy of the GNU Lesser General Public License\r\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\nimport { BigNumber } from 'bignumber.js';\r\nimport { createCodeParamsScript } from '../../transaction/scriptBuilder';\r\nimport { Transaction } from '../../transaction/transaction';\r\nimport { str2hexstr } from '../../utils';\r\nimport { Address } from './../../crypto/address';\r\nimport { makeInvokeTransaction } from './../../transaction/transactionBuilder';\r\nimport { num2hexstring } from './../../utils';\r\nimport { Parameter, ParameterType } from './../abi/parameter';\r\n\r\nexport class Oep8State {\r\n    public from: string;\r\n    public to: string;\r\n    public tokenId: string;\r\n    public value: BigNumber;\r\n\r\n    public constructor(from: Address, to: Address, tokenId: number, value: string) {\r\n        this.from = from.serialize();\r\n        this.to = to.serialize();\r\n        this.tokenId = num2hexstring(tokenId);\r\n        this.value = new BigNumber(value);\r\n    }\r\n}\r\n\r\nexport class TransferFrom {\r\n    spender: string;\r\n    from: string;\r\n    to: string;\r\n    tokenId: string;\r\n    value: BigNumber;\r\n    constructor(spender: Address, from: Address, to: Address, tokenId: number, value: string) {\r\n        this.spender = spender.serialize();\r\n        this.from = from.serialize();\r\n        this.to = to.serialize();\r\n        this.tokenId = num2hexstring(tokenId);\r\n        this.value = new BigNumber(value);\r\n    }\r\n}\r\n\r\nconst FunctionNames = {\r\n    Name: 'name',\r\n    Symbol: 'symbol',\r\n    TotalSupply: 'totalSupply',\r\n    BalanceOf: 'balanceOf',\r\n    Transfer: 'transfer',\r\n    TransferMulti: 'transferMulti',\r\n    Approve: 'approve',\r\n    ApproveMulti: 'approveMulti',\r\n    Allowance: 'allowance',\r\n    TransferFrom: 'transferFrom',\r\n    TransferFromMulti: 'transferFromMulti',\r\n    Compound: 'compound',\r\n    Concatkey: 'concatkey',\r\n    Init: 'init',\r\n    CreateMultiKindsPumpkin: 'createMultiKindsPumpkin',\r\n    CheckTokenPrefix: 'checkTokenPrefix',\r\n    BalancesOf: 'balancesOf',\r\n    TotalBalanceOf: 'totalBalanceOf',\r\n    CheckTokenId: 'checkTokenId'\r\n};\r\n\r\nexport class Oep8TxBuilder {\r\n    contractAddr: Address;\r\n\r\n    constructor(contractAddr: Address) {\r\n        this.contractAddr = contractAddr;\r\n    }\r\n\r\n    makeInitTx(\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: Address\r\n    ): Transaction {\r\n        const func = FunctionNames.Init;\r\n        return makeInvokeTransaction(func, [], this.contractAddr, gasPrice, gasLimit, payer);\r\n    }\r\n\r\n    makeTransferTx(\r\n        sendAddr: Address,\r\n        recvAddr: Address,\r\n        tokenId: number,\r\n        amount: string,\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: Address\r\n    ): Transaction {\r\n        const func = FunctionNames.Transfer;\r\n        const params = [\r\n            new Parameter('sender', ParameterType.ByteArray, sendAddr.serialize()),\r\n            new Parameter('recv', ParameterType.ByteArray, recvAddr.serialize()),\r\n            new Parameter('tokenId', ParameterType.ByteArray, tokenId),\r\n            new Parameter('amount', ParameterType.Long, amount)\r\n        ];\r\n        return makeInvokeTransaction(func, params, this.contractAddr, gasPrice, gasLimit, payer);\r\n    }\r\n\r\n    makeTransferMultiTx(\r\n        states: Oep8State[],\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: Address\r\n    ): Transaction {\r\n        const list = [];\r\n        list.push(str2hexstr(FunctionNames.TransferMulti));\r\n        const temp = [];\r\n        for (const state of states) {\r\n            temp.push([\r\n                state.from,\r\n                state.to,\r\n                state.tokenId,\r\n                state.value\r\n            ]);\r\n        }\r\n        list.push(temp);\r\n        const params = createCodeParamsScript(list);\r\n        return makeInvokeTransaction('', params, this.contractAddr, gasPrice, gasLimit, payer);\r\n    }\r\n\r\n    makeApproveTx(\r\n        owner: Address,\r\n        spender: Address,\r\n        tokenId: number,\r\n        amount: string,\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: Address\r\n    ): Transaction {\r\n        const func = FunctionNames.Approve;\r\n        const params = [\r\n            new Parameter('owner', ParameterType.ByteArray, owner.serialize()),\r\n            new Parameter('spender', ParameterType.ByteArray, spender.serialize()),\r\n            new Parameter('tokenId', ParameterType.ByteArray, num2hexstring(tokenId)),\r\n            new Parameter('amount', ParameterType.Long, amount)\r\n        ];\r\n        return makeInvokeTransaction(func, params, this.contractAddr, gasPrice, gasLimit, payer);\r\n    }\r\n\r\n    makeApproveMulti(\r\n        states: Oep8State[],\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: Address\r\n    ): Transaction {\r\n        const func = FunctionNames.ApproveMulti;\r\n        const list = [];\r\n        list.push(str2hexstr(func));\r\n        const temp = [];\r\n        for (const state of states) {\r\n            temp.push([\r\n                state.from,\r\n                state.to,\r\n                state.tokenId,\r\n                state.value\r\n            ]);\r\n        }\r\n        list.push(temp);\r\n        const params = createCodeParamsScript(list);\r\n        return makeInvokeTransaction('', params, this.contractAddr, gasPrice, gasLimit, payer);\r\n    }\r\n\r\n    makeTransferFromMulti(\r\n        states: TransferFrom[],\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: Address\r\n    ): Transaction {\r\n        const func = FunctionNames.TransferFromMulti;\r\n        const list = [];\r\n        list.push(str2hexstr(func));\r\n        const temp = [];\r\n        for (const state of states) {\r\n            temp.push([\r\n                state.spender,\r\n                state.from,\r\n                state.to,\r\n                state.tokenId,\r\n                state.value\r\n            ]);\r\n        }\r\n        list.push(temp);\r\n        const params = createCodeParamsScript(list);\r\n        return makeInvokeTransaction('', params, this.contractAddr, gasPrice, gasLimit, payer);\r\n    }\r\n\r\n    makeTransferFromTx(\r\n        sender: Address,\r\n        from: Address,\r\n        to: Address,\r\n        tokenId: number,\r\n        amount: string,\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: Address\r\n    ): Transaction {\r\n        const func = FunctionNames.TransferFrom;\r\n        const params = [\r\n            new Parameter('sender', ParameterType.ByteArray, sender.serialize()),\r\n            new Parameter('from', ParameterType.ByteArray, from.serialize()),\r\n            new Parameter('to', ParameterType.ByteArray, to.serialize()),\r\n            new Parameter('tokenId', ParameterType.ByteArray, num2hexstring(tokenId)),\r\n            new Parameter('amount', ParameterType.Long, amount)\r\n        ];\r\n        return makeInvokeTransaction(func, params, this.contractAddr, gasPrice, gasLimit, payer);\r\n    }\r\n\r\n    /**\r\n     * Compound tokens\r\n     * @param account User's address\r\n     * @param compoundNum 0 - compound all tokens that can be compounded; 1 - compound 1 token of each type.\r\n     * @param gasPrice Gas price\r\n     * @param gasLimit Gas limit\r\n     * @param payer Payer to pay for gas\r\n     */\r\n    makeCompoundTx(\r\n        account: Address,\r\n        compoundNum: number,\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: Address\r\n    ): Transaction {\r\n        const func = FunctionNames.Compound;\r\n        const params = [\r\n            new Parameter('account', ParameterType.ByteArray, account.serialize()),\r\n            new Parameter('compoundNum', ParameterType.Integer, compoundNum)\r\n        ];\r\n        return makeInvokeTransaction(func, params, this.contractAddr, gasPrice, gasLimit, payer);\r\n    }\r\n\r\n    makeQueryAllowanceTx(\r\n        owner: Address,\r\n        spender: Address,\r\n        tokenId: number\r\n    ): Transaction {\r\n        const func = FunctionNames.Allowance;\r\n        const params = [\r\n            new Parameter('owner', ParameterType.ByteArray, owner.serialize()),\r\n            new Parameter('spender', ParameterType.ByteArray, spender.serialize()),\r\n            new Parameter('tokenId', ParameterType.ByteArray, num2hexstring(tokenId))\r\n        ];\r\n        return makeInvokeTransaction(func, params, this.contractAddr);\r\n    }\r\n\r\n    makeQueryBalanceOfTx(\r\n        addr: Address,\r\n        tokenId: number\r\n    ): Transaction {\r\n        const func = FunctionNames.BalanceOf;\r\n        const params = [\r\n            new Parameter('addr', ParameterType.ByteArray, addr.serialize()),\r\n            new Parameter('tokenId', ParameterType.ByteArray, num2hexstring(tokenId))\r\n        ];\r\n        return makeInvokeTransaction(func, params, this.contractAddr);\r\n    }\r\n\r\n    makeQueryTotalSupplyTx(\r\n        tokenId: number\r\n    ): Transaction {\r\n        const func = FunctionNames.TotalSupply;\r\n        const params = [\r\n            new Parameter('tokenId', ParameterType.ByteArray, num2hexstring(tokenId))\r\n        ];\r\n        return makeInvokeTransaction(func, params, this.contractAddr);\r\n    }\r\n\r\n    makeQueryNameTx(\r\n        tokenId: number\r\n    ): Transaction {\r\n        const func = FunctionNames.Name;\r\n        const params = [\r\n            new Parameter('tokenId', ParameterType.ByteArray, num2hexstring(tokenId))\r\n        ];\r\n        return makeInvokeTransaction(func, params, this.contractAddr);\r\n    }\r\n\r\n    makeQueryDecimalsTx(): Transaction {\r\n        const func = FunctionNames.Symbol;\r\n        return makeInvokeTransaction(func, [], this.contractAddr);\r\n    }\r\n\r\n    makeQuerySymbolTx(\r\n        tokenId: number\r\n    ): Transaction {\r\n        const func = FunctionNames.Symbol;\r\n        const params = [\r\n            new Parameter('tokenId', ParameterType.ByteArray, num2hexstring(tokenId))\r\n        ];\r\n        return makeInvokeTransaction(func, params, this.contractAddr);\r\n    }\r\n\r\n    makeQueryBalancesTx(\r\n        account: Address\r\n    ): Transaction {\r\n        const func = FunctionNames.BalancesOf;\r\n        const params = [\r\n            new Parameter('account', ParameterType.ByteArray, account.serialize())\r\n        ];\r\n        return makeInvokeTransaction(func, params, this.contractAddr);\r\n    }\r\n\r\n    makeQueryTotalBalanceTx(\r\n        account: Address\r\n    ): Transaction {\r\n        const func = FunctionNames.TotalBalanceOf;\r\n        const params = [\r\n            new Parameter('account', ParameterType.ByteArray, account.serialize())\r\n        ];\r\n        return makeInvokeTransaction(func, params, this.contractAddr);\r\n    }\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\nimport { Account } from './account';\r\nimport { DEFAULT_SCRYPT } from './consts';\r\nimport { Identity } from './identity';\r\n\r\n/**\r\n * Class to manage Accounts and Identity\r\n */\r\nexport class Wallet {\r\n\r\n    static parseJson(json: string): Wallet {\r\n        return Wallet.parseJsonObj(JSON.parse(json));\r\n    }\r\n\r\n    /**\r\n     * Deserializes JSON object.\r\n     *\r\n     * Object should be real object, not stringified.\r\n     *\r\n     * @param obj JSON object\r\n     */\r\n    static parseJsonObj(obj: any): Wallet {\r\n        const wallet = new Wallet();\r\n        wallet.name = obj.name;\r\n        wallet.defaultOntid = obj.defaultOntid;\r\n        wallet.defaultAccountAddress = obj.defaultAccountAddress;\r\n        wallet.createTime = obj.createTime;\r\n        wallet.version = obj.version;\r\n        wallet.scrypt = obj.scrypt;\r\n        wallet.identities = obj.identities && (obj.identities as any[]).map((i) => Identity.parseJsonObj(i));\r\n        wallet.accounts = obj.accounts && (obj.accounts as any[]).map((a) => Account.parseJsonObj(a));\r\n        wallet.extra = obj.extra;\r\n        return wallet;\r\n    }\r\n\r\n    static fromWalletFile(obj: any): Wallet {\r\n        const wallet = Wallet.parseJsonObj(obj);\r\n        return wallet;\r\n    }\r\n\r\n    /**\r\n     * @example\r\n     * ```typescript\r\n     *\r\n     * import { Wallet } from 'ontology-ts-sdk';\r\n     * const wallet = Wallet.create('test');\r\n     * ```\r\n     *\r\n     * @param name Wallet's name\r\n     */\r\n    static create(name: string): Wallet {\r\n        const wallet = new Wallet();\r\n        wallet.name = name;\r\n\r\n        // createtime\r\n        wallet.createTime = (new Date()).toISOString();\r\n        wallet.version = '1.0';\r\n        wallet.scrypt = {\r\n            n: DEFAULT_SCRYPT.cost,\r\n            r: DEFAULT_SCRYPT.blockSize,\r\n            p: DEFAULT_SCRYPT.parallel,\r\n            dkLen: DEFAULT_SCRYPT.size\r\n        };\r\n\r\n        return wallet;\r\n    }\r\n\r\n    name: string;\r\n    defaultOntid: string = '';\r\n    defaultAccountAddress: string = '';\r\n    createTime: string;\r\n    version: string;\r\n    scrypt: {\r\n        n: number;\r\n        r: number;\r\n        p: number;\r\n        dkLen: number;\r\n    };\r\n    identities: Identity[] = [];\r\n    accounts: Account[] = [];\r\n    extra: null;\r\n\r\n    addAccount(account: Account): void {\r\n        for (const ac of this.accounts) {\r\n            if (ac.address.toBase58() === account.address.toBase58()) {\r\n                return;\r\n            }\r\n        }\r\n        this.accounts.push(account);\r\n    }\r\n\r\n    addIdentity(identity: Identity): void {\r\n        for (const item of this.identities) {\r\n            if (item.ontid === identity.ontid) {\r\n                return;\r\n            }\r\n        }\r\n        this.identities.push(identity);\r\n    }\r\n\r\n    setDefaultAccount(address: string): void {\r\n        this.defaultAccountAddress = address;\r\n    }\r\n\r\n    setDefaultIdentity(ontid: string): void {\r\n        this.defaultOntid = ontid;\r\n    }\r\n\r\n    toJson(): string {\r\n        return JSON.stringify(this.toJsonObj());\r\n    }\r\n\r\n    /**\r\n     * Serializes to JSON object.\r\n     *\r\n     * Returned object will not be stringified.\r\n     *\r\n     */\r\n    toJsonObj(): any {\r\n        const obj = {\r\n            name: this.name,\r\n            defaultOntid: this.defaultOntid,\r\n            defaultAccountAddress: this.defaultAccountAddress,\r\n            createTime: this.createTime,\r\n            version: this.version,\r\n            scrypt: this.scrypt,\r\n            identities: this.identities.map((i) => i.toJsonObj()),\r\n            accounts: this.accounts.map((a) => a.toJsonObj()),\r\n            extra: null\r\n        };\r\n\r\n        return obj;\r\n    }\r\n\r\n    signatureData(): string {\r\n        return '';\r\n    }\r\n\r\n    /*\r\n    *generate a wallet file that is compatible with cli wallet.\r\n    */\r\n    toWalletFile(): any {\r\n        const obj = this.toJsonObj();\r\n        return obj;\r\n    }\r\n}\r\n","/*\r\n* Copyright (C) 2018 The ontology Authors\r\n* This file is part of The ontology library.\r\n*\r\n* The ontology is free software: you can redistribute it and/or modify\r\n* it under the terms of the GNU Lesser General Public License as published by\r\n* the Free Software Foundation, either version 3 of the License, or\r\n* (at your option) any later version.\r\n*\r\n* The ontology is distributed in the hope that it will be useful,\r\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n* GNU Lesser General Public License for more details.\r\n*\r\n* You should have received a copy of the GNU Lesser General Public License\r\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\nimport * as Long from 'long';\r\nimport { createCodeParamsScript } from '../../transaction/scriptBuilder';\r\nimport { Transaction } from '../../transaction/transaction';\r\nimport { bigIntToBytes, str2hexstr } from '../../utils';\r\nimport { Parameter, ParameterType } from '../abi/parameter';\r\nimport { Address } from './../../crypto/address';\r\nimport { makeInvokeTransaction } from './../../transaction/transactionBuilder';\r\n\r\nconst functionNames = {\r\n    Init: 'init',\r\n    Transfer: 'transfer',\r\n    TransferMulti: 'transferMulti',\r\n    Approve: 'approve',\r\n    TransferFromm: 'transferFrom',\r\n    Allowance: 'allowance',\r\n    BalanceOf: 'balanceOf',\r\n    TotalSupply: 'totalSupply',\r\n    Symbol: 'symbol',\r\n    Decimals: 'decimals',\r\n    Name: 'name'\r\n};\r\n\r\nexport const formatBigNumParameter = (amount: string): Parameter => {\r\n    // let val = new BigNumber(amount).toString(16);\r\n    // if (val.length % 2 === 1) {\r\n    //     val = '0' + val;\r\n    // }\r\n    // const valHex = reverseHex(val);\r\n    const valHex = bigIntToBytes(Long.fromString(amount));\r\n    const p = new Parameter('value', ParameterType.ByteArray, valHex);\r\n    return p;\r\n};\r\n\r\nexport class Oep4State  {\r\n    from: string;\r\n    to: string;\r\n    amount: string;\r\n\r\n    constructor(from: Address, to: Address, amount: string) {\r\n        this.from = from.serialize();\r\n        this.to = to.serialize();\r\n        this.amount = formatBigNumParameter(amount).value;\r\n    }\r\n}\r\n/**\r\n * Transaction builder for oep-4 contracts\r\n */\r\nexport class Oep4TxBuilder {\r\n\r\n    contractAddr: Address;\r\n\r\n    constructor(contractAddr: Address) {\r\n        this.contractAddr = contractAddr;\r\n    }\r\n\r\n    /**\r\n     * Init the oep-4 smart contract\r\n     * @param gasPrice Gas price\r\n     * @param gasLimit Gas limit\r\n     * @param payer Payer's address to pay for gas\r\n     */\r\n    init(gasPrice: string, gasLimit: string, payer?: Address): Transaction {\r\n        const funcName = functionNames.Init;\r\n        return makeInvokeTransaction(funcName, [], this.contractAddr, gasPrice, gasLimit, payer);\r\n    }\r\n\r\n    /**\r\n     * Make transaction for transfer\r\n     * @param from Sender's address\r\n     * @param to Receiver's address\r\n     * @param amount Amountof asset to transfer\r\n     * @param gasPrice Gas price\r\n     * @param gasLimit Gas limit\r\n     * @param payer Payer's address to pay for gas\r\n     */\r\n    makeTransferTx(\r\n        from: Address,\r\n        to: Address,\r\n        amount: string,\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: Address\r\n    ): Transaction {\r\n        const funcName = functionNames.Transfer;\r\n        const p1 = new Parameter('from', ParameterType.ByteArray, from.serialize());\r\n        const p2 = new Parameter('to', ParameterType.ByteArray, to.serialize());\r\n        const p3 = formatBigNumParameter(amount);\r\n        return makeInvokeTransaction(funcName, [p1, p2, p3], this.contractAddr, gasPrice, gasLimit, payer);\r\n    }\r\n\r\n    /**\r\n     * Make transaction for multi transfer.\r\n     * The transaction needs signatures of each sender in states and the signature of the payer.\r\n     * @param states Array of State(sender, receiver, amount)\r\n     * @param gasPrice Gas price\r\n     * @param gasLimit Gas limit\r\n     * @param payer Payer to pay for gas\r\n     */\r\n    makeTransferMultiTx(\r\n        states: Oep4State[],\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: Address\r\n    ): Transaction {\r\n        const list = [];\r\n        list.push(str2hexstr(functionNames.TransferMulti));\r\n        const temp = [];\r\n        for (const state of states) {\r\n            temp.push([\r\n                state.from,\r\n                state.to,\r\n                state.amount\r\n            ]);\r\n        }\r\n        list.push(temp);\r\n        const params = createCodeParamsScript(list);\r\n        return makeInvokeTransaction('', params, this.contractAddr, gasPrice, gasLimit, payer);\r\n    }\r\n\r\n    /**\r\n     * Make transaction for approve\r\n     * @param owner Owner's address\r\n     * @param spender Spender's address\r\n     * @param amount Amount\r\n     * @param gasPrice Gas price\r\n     * @param gasLimit Gas limit\r\n     * @param payer Payer to pay for gas\r\n     */\r\n    makeApproveTx(\r\n        owner: Address,\r\n        spender: Address,\r\n        amount: string,\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: Address\r\n    ): Transaction {\r\n        const funcName = functionNames.Approve;\r\n        const params = [\r\n            new Parameter('owner', ParameterType.ByteArray, owner.serialize()),\r\n            new Parameter('spender', ParameterType.ByteArray, spender.serialize()),\r\n            formatBigNumParameter(amount)\r\n        ];\r\n        return makeInvokeTransaction(funcName, params, this.contractAddr, gasPrice, gasLimit, payer);\r\n    }\r\n\r\n    makeTransferFromTx(\r\n        sender: Address,\r\n        from: Address,\r\n        to: Address,\r\n        amount: string,\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: Address\r\n    ): Transaction {\r\n        const funcName = functionNames.TransferFromm;\r\n        const params = [\r\n            new Parameter('owner', ParameterType.ByteArray, sender.serialize()),\r\n            new Parameter('from', ParameterType.ByteArray, from.serialize()),\r\n            new Parameter('to', ParameterType.ByteArray, to.serialize()),\r\n            formatBigNumParameter(amount)\r\n        ];\r\n        return makeInvokeTransaction(funcName, params, this.contractAddr, gasPrice, gasLimit, payer);\r\n    }\r\n\r\n    makeQueryAllowanceTx(\r\n        owner: Address,\r\n        spender: Address\r\n    ): Transaction {\r\n        const funcName = functionNames.Allowance;\r\n        const params = [\r\n            new Parameter('owner', ParameterType.ByteArray, owner.serialize()),\r\n            new Parameter('spender', ParameterType.ByteArray, spender.serialize())\r\n        ];\r\n        return makeInvokeTransaction(funcName, params, this.contractAddr);\r\n    }\r\n\r\n    /**\r\n     * Query the balance\r\n     * @param address Address to query balance\r\n     */\r\n    queryBalanceOf(address: Address): Transaction {\r\n        const funcName = functionNames.BalanceOf;\r\n        const p1 = new Parameter('from', ParameterType.ByteArray, address.serialize());\r\n\r\n        return makeInvokeTransaction(funcName, [p1], this.contractAddr);\r\n    }\r\n\r\n    /**\r\n     * Query the total supply of oep-4 contract\r\n     */\r\n    queryTotalSupply(): Transaction {\r\n        const funcName = functionNames.TotalSupply;\r\n        return makeInvokeTransaction(funcName, [], this.contractAddr);\r\n    }\r\n\r\n    /**\r\n     * Query the total supply of oep-4 contract\r\n     */\r\n    queryDecimals(): Transaction {\r\n        const funcName = functionNames.Decimals;\r\n        return makeInvokeTransaction(funcName, [], this.contractAddr);\r\n    }\r\n\r\n    /**\r\n     * Query the total supply of oep-4 contract\r\n     */\r\n    querySymbol(): Transaction {\r\n        const funcName = functionNames.Symbol;\r\n        return makeInvokeTransaction(funcName, [], this.contractAddr);\r\n    }\r\n\r\n    /**\r\n     * Query the total supply of oep-4 contract\r\n     */\r\n    queryName(): Transaction {\r\n        const funcName = functionNames.Name;\r\n        return makeInvokeTransaction(funcName, [], this.contractAddr);\r\n    }\r\n}\r\n","/*\r\n* Copyright (C) 2018 The ontology Authors\r\n* This file is part of The ontology library.\r\n*\r\n* The ontology is free software: you can redistribute it and/or modify\r\n* it under the terms of the GNU Lesser General Public License as published by\r\n* the Free Software Foundation, either version 3 of the License, or\r\n* (at your option) any later version.\r\n*\r\n* The ontology is distributed in the hope that it will be useful,\r\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n* GNU Lesser General Public License for more details.\r\n*\r\n* You should have received a copy of the GNU Lesser General Public License\r\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\n/*\r\n********************************* Notice ********************************************\r\n*************************************************************************************\r\n* All the methods in this file is only for our native app development!!!\r\n* We do not recommend you to use these methods directly.\r\n* You can refer to these methods or the test cases to implement the same methods.\r\n*************************************************************************************\r\n*************************************************************************************\r\n*/\r\nimport axios from 'axios';\r\nimport * as bip39 from 'bip39';\r\nimport { Account } from '../account';\r\nimport { Claim } from '../claim/claim';\r\nimport { HTTP_REST_PORT, HTTP_WS_PORT, ONT_BIP44_PATH, REST_API, TEST_NODE } from '../consts';\r\nimport { Address, PgpSignature, PrivateKey, PublicKey } from '../crypto';\r\nimport { ERROR_CODE } from '../error';\r\nimport { Identity } from '../identity';\r\nimport { NeoRpc } from '../neocore/NeoRpc';\r\nimport { Program } from '../neocore/Program';\r\nimport { SmartContract } from '../neocore/SmartContract';\r\nimport RestClient from '../network/rest/restClient';\r\nimport { WebsocketClient } from '../network/websocket/websocketClient';\r\nimport * as scrypt from '../scrypt';\r\nimport { ScryptParams } from '../scrypt';\r\nimport AbiInfo from '../smartcontract/abi/abiInfo';\r\nimport { Parameter } from '../smartcontract/abi/parameter';\r\nimport { makeTransferTx, makeWithdrawOngTx, ONT_CONTRACT } from '../smartcontract/nativevm/ontAssetTxBuilder';\r\nimport { buildAddAttributeTx, buildGetDDOTx, buildRegisterOntidTx\r\n} from '../smartcontract/nativevm/ontidContractTxBuilder';\r\nimport { Oep8TxBuilder } from '../smartcontract/neovm/oep8TxBuilder';\r\nimport { DDOAttribute } from '../transaction/ddo';\r\nimport { Transaction } from '../transaction/transaction';\r\nimport {\r\n    buildRestfulParam,\r\n    sendRawTxRestfulUrl,\r\n    signTransaction,\r\n    signTx\r\n} from '../transaction/transactionBuilder';\r\nimport { generateMnemonic, hexstr2str, isBase64, isHexString, now, reverseHex,\r\n    sendBackResult2Native, str2hexstr, StringReader } from '../utils';\r\nimport { Wallet } from '../wallet';\r\nimport { Ecies } from './../crypto/Ecies';\r\nimport { ParameterType } from './../smartcontract/abi/parameter';\r\nimport { Oep4TxBuilder } from './../smartcontract/neovm/oep4TxBuilder';\r\n\r\n// tslint:disable-next-line:no-var-requires\r\nconst HDKey = require('@ont-community/hdkey-secp256r1');\r\n\r\n// tslint:disable:no-unused-expression\r\n// tslint:disable:no-shadowed-variable\r\n\r\n// neo contract\r\nconst CONTRACT_HASH = 'ceab719b8baa2310f232ee0d277c061704541cfb';\r\n// neo node\r\nconst NEO_NODE = 'http://neonode1.ont.network:10332';\r\n// neo abi\r\n// tslint:disable-next-line:max-line-length\r\nconst NEP5_ABI = '{\"hash\":\"0x5bb169f915c916a5e30a3c13a5e0cd228ea26826\",\"entrypoint\":\"Main\",\"functions\":[{\"name\":\"Name\",\"parameters\":[],\"returntype\":\"String\"},{\"name\":\"Symbol\",\"parameters\":[],\"returntype\":\"String\"},{\"name\":\"Decimals\",\"parameters\":[],\"returntype\":\"Integer\"},{\"name\":\"Main\",\"parameters\":[{\"name\":\"operation\",\"type\":\"String\"},{\"name\":\"args\",\"type\":\"Array\"}],\"returntype\":\"Any\"},{\"name\":\"Init\",\"parameters\":[],\"returntype\":\"Boolean\"},{\"name\":\"TotalSupply\",\"parameters\":[],\"returntype\":\"Integer\"},{\"name\":\"Transfer\",\"parameters\":[{\"name\":\"from\",\"type\":\"ByteArray\"},{\"name\":\"to\",\"type\":\"ByteArray\"},{\"name\":\"value\",\"type\":\"Integer\"}],\"returntype\":\"Boolean\"},{\"name\":\"BalanceOf\",\"parameters\":[{\"name\":\"address\",\"type\":\"ByteArray\"}],\"returntype\":\"Integer\"}],\"events\":[{\"name\":\"transfer\",\"parameters\":[{\"name\":\"arg1\",\"type\":\"ByteArray\"},{\"name\":\"arg2\",\"type\":\"ByteArray\"},{\"name\":\"arg3\",\"type\":\"Integer\"}],\"returntype\":\"Void\"}]}';\r\n// neo swap address\r\n// const RECEIVER_ADDR = 'AFmseVrdL9f9oyCzZefL9tG6UbvhPbdYzM';\r\n\r\nconst NEO_TRAN = 100000000;\r\n\r\nexport class SDK {\r\n    static SERVER_NODE: string = TEST_NODE;\r\n    static REST_PORT: string = HTTP_REST_PORT;\r\n    static SOCKET_PORT: string = HTTP_WS_PORT;\r\n    static restClient: RestClient = new RestClient();\r\n    static socketClient: WebsocketClient = new WebsocketClient();\r\n\r\n    static setServerNode(node: string) {\r\n        if (node) {\r\n            let url = '';\r\n            if (node.indexOf('http') > -1) {\r\n                url = node.substr('http://'.length);\r\n            } else {\r\n                url = node;\r\n            }\r\n            SDK.SERVER_NODE = url;\r\n            return;\r\n        }\r\n\r\n        throw new Error('Can not set ' + node + 'as server node');\r\n    }\r\n\r\n    static setRestPort(port: string) {\r\n        if (port) {\r\n            SDK.REST_PORT = port;\r\n            SDK.restClient = new RestClient(`http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`);\r\n            return;\r\n        }\r\n\r\n        throw new Error('Can not set ' + port + ' as restful port');\r\n    }\r\n\r\n    static setSocketPort(port: string) {\r\n        if (port) {\r\n            SDK.SOCKET_PORT = port;\r\n            SDK.socketClient = new WebsocketClient(`ws://${SDK.SERVER_NODE}:${SDK.SOCKET_PORT}`);\r\n            return;\r\n        }\r\n        throw new Error('Can not set ' + port + 'as socket port');\r\n    }\r\n\r\n    static getDecryptError(err: any) {\r\n        return {\r\n            error: ERROR_CODE.Decrypto_ERROR,\r\n            result: ''\r\n        };\r\n    }\r\n\r\n    static transformPassword(password: string) {\r\n        if (isBase64(password)) {\r\n            return Buffer.from(password, 'base64').toString();\r\n        }\r\n        return password;\r\n    }\r\n\r\n    static createWallet(name: string,\r\n                        password: string, payer: string, gasPrice: string, gasLimit: string, callback?: string) {\r\n        const wallet = Wallet.create(name);\r\n        password = this.transformPassword(password);\r\n        const privateKey = PrivateKey.random();\r\n        const identity = Identity.create(privateKey, password, name);\r\n\r\n        wallet.defaultOntid = identity.ontid;\r\n        wallet.addIdentity(identity);\r\n\r\n        // let account = new Account()\r\n        // account.create(privateKey, password, name)\r\n        // wallet.addAccount(account)\r\n\r\n        const walletDataStr = wallet.toJson();\r\n        let obj: any = {\r\n            error: 0,\r\n            result: walletDataStr,\r\n            tx : ''\r\n        };\r\n\r\n        const publicKey = privateKey.getPublicKey();\r\n        const tx = buildRegisterOntidTx(identity.ontid, publicKey, gasPrice, gasLimit);\r\n        tx.payer = new Address(payer);\r\n        signTransaction(tx, privateKey);\r\n        // clear privateKey and password\r\n        privateKey.key = '';\r\n        password = '';\r\n        // add preExec\r\n        const restClient = new RestClient(`http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`);\r\n        return restClient.sendRawTransaction(tx.serialize(), true).then((res: any) => {\r\n            // preExec success, send real request\r\n            if (res.Result.Result === '01') {\r\n                // restClient.sendRawTransaction(tx.serialize(), false)\r\n                obj.tx = tx.serialize();\r\n\r\n                if (callback) {\r\n                    sendBackResult2Native(JSON.stringify(obj), callback);\r\n                }\r\n                return obj;\r\n            } else {\r\n                const errResult = {\r\n                    error: ERROR_CODE.PreExec_ERROR,\r\n                    result: ''\r\n                };\r\n\r\n                if (callback) {\r\n                    sendBackResult2Native(JSON.stringify(errResult), callback);\r\n                }\r\n                return errResult;\r\n            }\r\n        }).catch((err: any) => {\r\n            obj = {\r\n                error: ERROR_CODE.NETWORK_ERROR,\r\n                result: ''\r\n            };\r\n\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(obj), callback);\r\n            }\r\n        });\r\n    }\r\n\r\n    static importIdentityWithPrivateKey(\r\n        label: string = '',\r\n        privateKey: string,\r\n        password: string,\r\n        callback?: string\r\n    ) {\r\n        privateKey = privateKey.trim();\r\n        password = this.transformPassword(password);\r\n        if (!privateKey || privateKey.length !== 64 || !isHexString(privateKey)) {\r\n            const obj = {\r\n                error: ERROR_CODE.INVALID_PARAMS,\r\n                result: ''\r\n            };\r\n            callback && sendBackResult2Native(JSON.stringify(obj), callback);\r\n            return obj;\r\n        }\r\n        let obj: any;\r\n        const pri = new PrivateKey(privateKey);\r\n        const identity = Identity.create(pri, password, label);\r\n        obj = {\r\n            error: ERROR_CODE.SUCCESS,\r\n            result: identity.toJson()\r\n        };\r\n        const tx = buildGetDDOTx(identity.ontid);\r\n        const restClient = new RestClient(`http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`);\r\n        return restClient.sendRawTransaction(tx.serialize(), true).then((res: any) => {\r\n            const result = res.Result;\r\n            if (result.Result) {\r\n                //\r\n            } else {\r\n                obj.error = ERROR_CODE.UNKNOWN_ONTID;\r\n                obj.result = '';\r\n            }\r\n\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(obj), callback);\r\n            }\r\n            return obj;\r\n        }).catch((err) => {\r\n            obj = {\r\n                error: ERROR_CODE.NETWORK_ERROR,\r\n                result: ''\r\n            };\r\n\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(obj), callback);\r\n            }\r\n        });\r\n    }\r\n\r\n    static importIdentityWithWif(\r\n        label: string = '',\r\n        wif: string,\r\n        password: string,\r\n        callback?: string\r\n    ) {\r\n        wif = wif.trim();\r\n        password = this.transformPassword(password);\r\n        let obj: any;\r\n        let pri: PrivateKey;\r\n        try {\r\n            pri = PrivateKey.deserializeWIF(wif);\r\n        } catch (err) {\r\n            const obj = {\r\n                error: ERROR_CODE.INVALID_PARAMS,\r\n                result: ''\r\n            };\r\n            callback && sendBackResult2Native(JSON.stringify(obj), callback);\r\n            return obj;\r\n        }\r\n        const identity = Identity.create(pri, password, label);\r\n        obj = {\r\n            error: ERROR_CODE.SUCCESS,\r\n            result: identity.toJson()\r\n        };\r\n        const tx = buildGetDDOTx(identity.ontid);\r\n        const restClient = new RestClient(`http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`);\r\n        return restClient.sendRawTransaction(tx.serialize(), true).then((res: any) => {\r\n            const result = res.Result;\r\n            if (result.Result) {\r\n                //\r\n            } else {\r\n                obj.error = ERROR_CODE.UNKNOWN_ONTID;\r\n                obj.result = '';\r\n            }\r\n\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(obj), callback);\r\n            }\r\n            return obj;\r\n        }).catch((err) => {\r\n            obj = {\r\n                error: ERROR_CODE.NETWORK_ERROR,\r\n                result: ''\r\n            };\r\n\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(obj), callback);\r\n            }\r\n        });\r\n    }\r\n\r\n    static importIdentityWithWifOffChain(\r\n        label: string = '',\r\n        wif: string,\r\n        password: string,\r\n        callback?: string\r\n    ) {\r\n        wif = wif.trim();\r\n        password = this.transformPassword(password);\r\n        let obj: any;\r\n        let pri: PrivateKey;\r\n        try {\r\n            pri = PrivateKey.deserializeWIF(wif);\r\n        } catch (err) {\r\n            const obj = {\r\n                error: ERROR_CODE.INVALID_PARAMS,\r\n                result: ''\r\n            };\r\n            callback && sendBackResult2Native(JSON.stringify(obj), callback);\r\n            return obj;\r\n        }\r\n        const identity = Identity.create(pri, password, label);\r\n        obj = {\r\n            error: ERROR_CODE.SUCCESS,\r\n            result: identity.toJson()\r\n        };\r\n        if (callback) {\r\n            sendBackResult2Native(JSON.stringify(obj), callback);\r\n        }\r\n        return obj;\r\n    }\r\n\r\n    static importIdentityWithWallet(\r\n        label: string,\r\n        encryptedPrivateKey: string,\r\n        password: string,\r\n        address: string,\r\n        salt: string,\r\n        callback?: string\r\n    ) {\r\n        let obj: any;\r\n        let identity = new Identity();\r\n        try {\r\n            // TODO check ontid\r\n            const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\r\n            const addr = new Address(address);\r\n            password = this.transformPassword(password);\r\n            identity = Identity.importIdentity(label, encryptedPrivateKeyObj, password, addr, salt);\r\n        } catch (err) {\r\n            obj  = this.getDecryptError(err);\r\n\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(obj), callback);\r\n            }\r\n            return obj;\r\n        }\r\n        obj = {\r\n            error : ERROR_CODE.SUCCESS,\r\n            result : identity.toJson()\r\n        };\r\n        // check ontid on chain\r\n        const tx = buildGetDDOTx(identity.ontid);\r\n        const param = buildRestfulParam(tx);\r\n        const restUrl = `http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`;\r\n        const url = sendRawTxRestfulUrl(restUrl, true);\r\n        // clear privateKey and password\r\n        password = '';\r\n        return axios.post(url, param).then((res: any) => {\r\n            const result = res.data.Result;\r\n            if (result.Result) {\r\n                //\r\n            } else {\r\n                obj.error = ERROR_CODE.UNKNOWN_ONTID;\r\n                obj.result = '';\r\n            }\r\n\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(obj), callback);\r\n            }\r\n            return obj;\r\n        }).catch((err) => {\r\n            obj = {\r\n                error: ERROR_CODE.NETWORK_ERROR,\r\n                result : ''\r\n            };\r\n\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(obj), callback);\r\n            }\r\n        });\r\n    }\r\n\r\n    // send http post to check\r\n    static importIdentityAndCreateWallet(\r\n        label: string,\r\n        encryptedPrivateKey: string,\r\n        password: string,\r\n        address: string,\r\n        salt: string,\r\n        callback?: string\r\n    ) {\r\n        let identity = new Identity();\r\n        let error = {};\r\n        let obj: any;\r\n        try {\r\n            password = this.transformPassword(password);\r\n            const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\r\n            const addr = new Address(address);\r\n            identity = Identity.importIdentity(label, encryptedPrivateKeyObj, password, addr, salt);\r\n            const wallet = Wallet.create(identity.label);\r\n            wallet.defaultOntid = identity.ontid;\r\n            wallet.addIdentity(identity);\r\n            const walletStr = wallet.toJson();\r\n            obj = {\r\n                error: ERROR_CODE.SUCCESS,\r\n                result: walletStr\r\n            };\r\n            // check ontid on chain\r\n            const tx = buildGetDDOTx(identity.ontid);\r\n            const param = buildRestfulParam(tx);\r\n            const restUrl = `http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`;\r\n            const url = sendRawTxRestfulUrl(restUrl, true);\r\n            return axios.post(url, param).then((res: any) => {\r\n                const result = res.data.Result;\r\n                if (result.Result) {\r\n                    //\r\n                } else {\r\n                    obj.error = ERROR_CODE.UNKNOWN_ONTID;\r\n                    obj.result = '';\r\n                }\r\n                // clear privateKey and password\r\n                password = '';\r\n                if (callback) {\r\n                    sendBackResult2Native(JSON.stringify(obj), callback);\r\n                }\r\n                return obj;\r\n            }).catch((err) => {\r\n                obj = {\r\n                    error: ERROR_CODE.NETWORK_ERROR,\r\n                    result : ''\r\n                };\r\n\r\n                if (callback) {\r\n                    sendBackResult2Native(JSON.stringify(obj), callback);\r\n                }\r\n            });\r\n            // callback && sendBackResult2Native(JSON.stringify(obj), callback)\r\n            // return obj\r\n        } catch (err) {\r\n            error = this.getDecryptError(err);\r\n\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(error), callback);\r\n            }\r\n            return Promise.reject(error);\r\n        }\r\n    }\r\n\r\n    static createIdentity(label: string, password: string, payer: string,\r\n                          gasPrice: string, gasLimit: string, callback?: string) {\r\n        const privateKey = PrivateKey.random();\r\n        password = this.transformPassword(password);\r\n        const identity = Identity.create(privateKey, password, label);\r\n        const result = identity.toJson();\r\n        let obj: any = {\r\n            error: ERROR_CODE.SUCCESS,\r\n            result,\r\n            tx : ''\r\n        };\r\n        // register ontid\r\n        const publicKey = privateKey.getPublicKey();\r\n        const tx = buildRegisterOntidTx(identity.ontid, publicKey, gasPrice, gasLimit);\r\n        tx.payer = new Address(payer);\r\n        signTransaction(tx, privateKey);\r\n        password = '';\r\n        privateKey.key = '';\r\n        const restClient = new RestClient(`http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`);\r\n        return restClient.sendRawTransaction(tx.serialize(), true).then((res: any) => {\r\n            // preExec success, send real request\r\n            if (res.Result.Result === '01') {\r\n                // restClient.sendRawTransaction(tx.serialize(), false)\r\n                obj.tx = tx.serialize();\r\n\r\n                if (callback) {\r\n                    sendBackResult2Native(JSON.stringify(obj), callback);\r\n                }\r\n                // clear privateKey and password\r\n                privateKey.key = '';\r\n                password = '';\r\n                return obj;\r\n            } else {\r\n                const errResult = {\r\n                    error: ERROR_CODE.PreExec_ERROR,\r\n                    result: ''\r\n                };\r\n\r\n                if (callback) {\r\n                    sendBackResult2Native(JSON.stringify(errResult), callback);\r\n                }\r\n                return errResult;\r\n            }\r\n        }).catch((err: any) => {\r\n            obj = {\r\n                error: ERROR_CODE.NETWORK_ERROR,\r\n                result: ''\r\n            };\r\n\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(obj), callback);\r\n            }\r\n        });\r\n    }\r\n\r\n    static createAccount(label: string, password: string, callback?: string) {\r\n        // generate mnemnic\r\n        let mnemonic = generateMnemonic();\r\n        password = this.transformPassword(password);\r\n        const mnemonicHex = str2hexstr(mnemonic);\r\n        const privateKey = PrivateKey.generateFromMnemonic(mnemonic);\r\n        const account = Account.create(privateKey, password, label);\r\n        const addr = account.address;\r\n        const salt = Buffer.from(account.salt, 'base64').toString('hex');\r\n        const mnemonicEnc = scrypt.encryptWithGcm(mnemonicHex, addr, salt, password);\r\n        const result = account.toJson();\r\n        const obj = {\r\n            error : ERROR_CODE.SUCCESS,\r\n            result,\r\n            mnemonicEnc\r\n        };\r\n\r\n        if (callback) {\r\n            sendBackResult2Native(JSON.stringify(obj), callback);\r\n        }\r\n        // clear privateKey and password\r\n        privateKey.key = '';\r\n        password = '';\r\n        mnemonic = '';\r\n        return obj;\r\n    }\r\n\r\n    static decryptMnemonicEnc(mnemonicEnc: string,\r\n                              address: string, salt: string, password: string, callback?: string) {\r\n        let obj;\r\n        password = this.transformPassword(password);\r\n        const addr = new Address(address);\r\n        const saltHex = Buffer.from(salt, 'base64').toString('hex');\r\n        const decMneHex = scrypt.decryptWithGcm(mnemonicEnc, addr, saltHex, password);\r\n        const decMne = hexstr2str(decMneHex);\r\n        obj = {\r\n            error: ERROR_CODE.SUCCESS,\r\n            result: decMne\r\n        };\r\n        // tslint:disable-next-line:no-unused-expression\r\n        callback && sendBackResult2Native(JSON.stringify(obj), callback);\r\n        return obj;\r\n    }\r\n\r\n    static importAccountWithWallet(\r\n        label: string,\r\n        encryptedPrivateKey: string,\r\n        address: string,\r\n        salt: string,\r\n        password: string,\r\n        callback?: string\r\n    ) {\r\n        let account = new Account();\r\n        password = this.transformPassword(password);\r\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\r\n        try {\r\n            const addr = new Address(address);\r\n            account = Account.importAccount(label, encryptedPrivateKeyObj, password, addr, salt);\r\n        } catch (err) {\r\n            const result = this.getDecryptError(err);\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(result), callback);\r\n            }\r\n            return result;\r\n        }\r\n        const obj = {\r\n            error: ERROR_CODE.SUCCESS,\r\n            result: account.toJson()\r\n        };\r\n        // add address check\r\n        if (address !== account.address.toBase58()) {\r\n            obj.error = ERROR_CODE.INVALID_ADDR,\r\n            obj.result = '';\r\n        }\r\n\r\n        if (callback) {\r\n            sendBackResult2Native(JSON.stringify(obj), callback);\r\n        }\r\n        // clear privateKey and password\r\n        password = '';\r\n        return obj;\r\n    }\r\n\r\n    static signSelfClaim(\r\n        context: string,\r\n        claimData: string,\r\n        ontid: string,\r\n        encryptedPrivateKey: string,\r\n        password: string,\r\n        address: string,\r\n        salt: string,\r\n        callback?: string\r\n    )  {\r\n        let privateKey: PrivateKey;\r\n        password = this.transformPassword(password);\r\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\r\n        const restUrl = `http://${SDK.SERVER_NODE}:${SDK.REST_PORT}${REST_API.sendRawTx}`;\r\n        try {\r\n            const addr = new Address(address);\r\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\r\n            privateKey = encryptedPrivateKeyObj.decrypt(password, addr, saltHex);\r\n        } catch (err) {\r\n            const result = this.getDecryptError(err);\r\n\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(result), callback);\r\n            }\r\n            return result;\r\n        }\r\n\r\n        // const claimDataObj = JSON.parse(claimData);\r\n        const metadata = {\r\n            issuer: ontid,\r\n            subject: ontid,\r\n            issuedAt: now()\r\n        };\r\n\r\n        // todo: pass real public key id\r\n        const publicKeyId = ontid + '#keys-1';\r\n        const claim = new Claim(metadata, undefined, undefined);\r\n        claim.sign(restUrl, publicKeyId, privateKey);\r\n        const obj = {\r\n            error : 0,\r\n            result : claim\r\n        };\r\n        if (callback) {\r\n            sendBackResult2Native(JSON.stringify(obj), callback);\r\n        }\r\n        // clear privateKey and password\r\n        privateKey.key = '';\r\n        password = '';\r\n        return obj;\r\n    }\r\n\r\n    static decryptEncryptedPrivateKey(\r\n        encryptedPrivateKey: string,\r\n        password: string,\r\n        address: string,\r\n        salt: string,\r\n        callback?: string\r\n    ) {\r\n        password = this.transformPassword(password);\r\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\r\n        let pri;\r\n        try {\r\n            const addr = new Address(address);\r\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\r\n            pri = encryptedPrivateKeyObj.decrypt(password, addr, saltHex);\r\n        } catch (err) {\r\n            const result = this.getDecryptError(err);\r\n\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(result), callback);\r\n            }\r\n            return result;\r\n        }\r\n        const obj = {\r\n            error : 0,\r\n            result : pri.key\r\n        };\r\n        if (callback) {\r\n            sendBackResult2Native(JSON.stringify(obj), callback);\r\n        }\r\n        // clear privateKey and password\r\n        password = '';\r\n        return obj;\r\n    }\r\n\r\n    static getClaim(\r\n        claimId: string,\r\n        context: string,\r\n        issuer: string,\r\n        subject: string,\r\n        encryptedPrivateKey: string,\r\n        password: string,\r\n        address: string,\r\n        salt: string,\r\n        payer: string,\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        callback ?: string\r\n    ) {\r\n        let privateKey: PrivateKey;\r\n        password = this.transformPassword(password);\r\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\r\n        try {\r\n            const addr = new Address(address);\r\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\r\n            privateKey = encryptedPrivateKeyObj.decrypt(password, addr, saltHex);\r\n        } catch (err) {\r\n            const result = this.getDecryptError(err);\r\n\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(result), callback);\r\n            }\r\n\r\n            return result;\r\n        }\r\n        const path = 'claim' + claimId;\r\n        const valueObj = {\r\n            Type : 'JSON',\r\n            Value : {\r\n                Context: context,\r\n                Issuer: issuer\r\n            }\r\n        };\r\n        // const type = 'JSON';\r\n        const value = JSON.stringify(valueObj);\r\n        const attr = new DDOAttribute();\r\n        attr.key = path;\r\n        attr.type = 'JSON';\r\n        attr.value = value;\r\n        const publicKey = privateKey.getPublicKey();\r\n        const tx = buildAddAttributeTx(subject, [attr], publicKey, gasPrice, gasLimit);\r\n        tx.payer = new Address(payer);\r\n        signTransaction(tx, privateKey);\r\n        const restClient = new RestClient(`http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`);\r\n        return restClient.sendRawTransaction(tx.serialize(), true).then((res: any) => {\r\n            if (res.Result.Result === '01') {\r\n                // user agent will do this\r\n                // restClient.sendRawTransaction(tx.serialize(), false)\r\n                // const hash = sha256(sha256(tx.serializeUnsignedData()))\r\n                const obj = {\r\n                    error: ERROR_CODE.SUCCESS,\r\n                    result: '',\r\n                    tx: tx.serialize()\r\n                };\r\n\r\n                if (callback) {\r\n                    sendBackResult2Native(JSON.stringify(obj), callback);\r\n                }\r\n                // clear privateKey and password\r\n                privateKey.key = '';\r\n                password = '';\r\n                return obj;\r\n            } else {\r\n                const obj = {\r\n                    error: ERROR_CODE.PreExec_ERROR,\r\n                    result: ''\r\n                };\r\n\r\n                if (callback) {\r\n                    sendBackResult2Native(JSON.stringify(obj), callback);\r\n                }\r\n                return obj;\r\n            }\r\n        }\r\n        ).catch((err: any) => {\r\n            const obj = {\r\n                error: ERROR_CODE.NETWORK_ERROR,\r\n                result: ''\r\n            };\r\n\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(obj), callback);\r\n            }\r\n        });\r\n    }\r\n\r\n    static signData(\r\n        content: string, // hex string\r\n        encryptedPrivateKey: string,\r\n        password: string,\r\n        address: string,\r\n        salt: string,\r\n        callback?: string\r\n    ): PgpSignature | object {\r\n        let privateKey: PrivateKey;\r\n        password = this.transformPassword(password);\r\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\r\n        let result;\r\n        try {\r\n            const addr = new Address(address);\r\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\r\n            privateKey = encryptedPrivateKeyObj.decrypt(password, addr, saltHex);\r\n        } catch (err) {\r\n            result = this.getDecryptError(err);\r\n\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(result), callback);\r\n            }\r\n            return result;\r\n        }\r\n        const signature = privateKey.sign(content);\r\n        result = signature.serializePgp();\r\n\r\n        if (callback) {\r\n            sendBackResult2Native(JSON.stringify(result), callback);\r\n        }\r\n        // clear privateKey and password\r\n        privateKey.key = '';\r\n        password = '';\r\n        return result;\r\n    }\r\n\r\n    static getBalance(address: string, callback?: string) {\r\n        const addressObj = new Address(address);\r\n        const request = `http://${SDK.SERVER_NODE}:${SDK.REST_PORT}${REST_API.getBalance}/${addressObj.toBase58()}`;\r\n        return axios.get(request).then((res: any) => {\r\n            if (res.data.Error === 0) {\r\n                const result = res.data.Result;\r\n                const obj = {\r\n                    error : 0,\r\n                    result\r\n                };\r\n\r\n                if (callback) {\r\n                    sendBackResult2Native(JSON.stringify(obj), callback);\r\n                }\r\n                return obj;\r\n            } else {\r\n                const obj = {\r\n                    error: res.data.Error,\r\n                    result : ''\r\n                };\r\n\r\n                if (callback) {\r\n                    sendBackResult2Native(JSON.stringify(obj), callback);\r\n                }\r\n                return obj;\r\n            }\r\n        }).catch( (err: any) => {\r\n            const obj = {\r\n                error: ERROR_CODE.NETWORK_ERROR,\r\n                result: ''\r\n            };\r\n\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(obj), callback);\r\n            }\r\n            return Promise.reject(obj);\r\n        });\r\n    }\r\n\r\n    // pls check balance before transfer\r\n    static transferAssets(\r\n        token: string,\r\n        from: string,\r\n        to: string,\r\n        value: string,\r\n        encryptedPrivateKey: string,\r\n        password: string,\r\n        salt: string,\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: string,\r\n        callback?: string) {\r\n\r\n        let fromAddress: Address;\r\n        let toAddress: Address;\r\n        password = this.transformPassword(password);\r\n        try {\r\n            fromAddress = new Address(from);\r\n            toAddress = new Address(to);\r\n        } catch (err) {\r\n            const result = {\r\n                error : ERROR_CODE.INVALID_PARAMS,\r\n                result : ''\r\n            };\r\n\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(result), callback);\r\n            }\r\n            return result;\r\n        }\r\n\r\n        let privateKey: PrivateKey;\r\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\r\n        try {\r\n            const addr = new Address(from);\r\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\r\n            privateKey = encryptedPrivateKeyObj.decrypt(password, addr, saltHex);\r\n        } catch (err) {\r\n            const result = this.getDecryptError(err);\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(result), callback);\r\n            }\r\n            return result;\r\n        }\r\n\r\n        const tx = makeTransferTx(token, fromAddress, toAddress, value, gasPrice, gasLimit);\r\n        tx.payer = new Address(payer);\r\n        signTransaction(tx, privateKey);\r\n        const result = {\r\n            error: ERROR_CODE.SUCCESS,\r\n            result: '',\r\n            tx: tx.serialize(),\r\n            txHash: reverseHex(tx.getSignContent())\r\n        };\r\n        callback && sendBackResult2Native(JSON.stringify(result), callback);\r\n        // clear privateKey and password\r\n        privateKey.key = '';\r\n        password = '';\r\n        return result;\r\n    }\r\n\r\n    static claimOng(\r\n        address: string,\r\n        value: string,\r\n        encryptedPrivateKey: string,\r\n        password: string,\r\n        salt: string,\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: string,\r\n        callback?: string\r\n    ) {\r\n        let addressObj: Address;\r\n        password = this.transformPassword(password);\r\n        try {\r\n            addressObj = new Address(address);\r\n\r\n        } catch (err) {\r\n            const result = {\r\n                error: ERROR_CODE.INVALID_PARAMS,\r\n                result: ''\r\n            };\r\n\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(result), callback);\r\n            }\r\n            return result;\r\n        }\r\n\r\n        let privateKey: PrivateKey;\r\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\r\n        try {\r\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\r\n            privateKey = encryptedPrivateKeyObj.decrypt(password, addressObj, saltHex);\r\n        } catch (err) {\r\n            const result = this.getDecryptError(err);\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(result), callback);\r\n            }\r\n            return result;\r\n        }\r\n\r\n        const tx = makeWithdrawOngTx(addressObj, addressObj, value, new Address(payer), gasPrice, gasLimit);\r\n        signTransaction(tx, privateKey);\r\n        const result = {\r\n            error: ERROR_CODE.SUCCESS,\r\n            result: '',\r\n            tx: tx.serialize(),\r\n            txHash: reverseHex(tx.getSignContent())\r\n        };\r\n        callback && sendBackResult2Native(JSON.stringify(result), callback);\r\n        // clear privateKey and password\r\n        privateKey.key = '';\r\n        password = '';\r\n        return result;\r\n    }\r\n\r\n    static exportIdentityToQrcode(identityDataStr: string, callback?: string) {\r\n        const obj = Identity.parseJson(identityDataStr);\r\n        let salt = obj.controls[0].salt;\r\n        if (!isBase64(salt)) {\r\n            salt = Buffer.from(salt, 'hex').toString('base64');\r\n        }\r\n        const result = {\r\n            type : 'I',\r\n            label : obj.label,\r\n            algorithm : 'ECDSA',\r\n            scrypt : {\r\n                n : 4096,\r\n                p : 8,\r\n                r : 8,\r\n                dkLen : 64\r\n            },\r\n            key : obj.controls[0].encryptedKey.key,\r\n            salt,\r\n            address: obj.controls[0].address.toBase58(),\r\n            parameters : {\r\n                curve : 'secp256r1'\r\n            }\r\n        };\r\n\r\n        if (callback) {\r\n            sendBackResult2Native(JSON.stringify(result), callback);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    static exportIdentityToKeystring(identityDataStr: string, callback?: string) {\r\n        const obj = Identity.parseJson(identityDataStr);\r\n        const address = obj.controls[0].address.toBase58();\r\n        const salt = obj.controls[0].salt;\r\n        const key = obj.controls[0].encryptedKey.key;\r\n        const result = salt + address + key;\r\n\r\n        if (callback) {\r\n            sendBackResult2Native(JSON.stringify(result), callback);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    static exportAccountToQrcode(accountDataStr: string, callback?: string) {\r\n        const obj = Account.parseJson(accountDataStr);\r\n        const result = {\r\n            type: 'A',\r\n            label: obj.label,\r\n            algorithm: 'ECDSA',\r\n            scrypt: {\r\n                n: 4096,\r\n                p: 8,\r\n                r: 8,\r\n                dkLen: 64\r\n            },\r\n            key: obj.encryptedKey.key,\r\n            salt: obj.salt,\r\n            address: obj.address.toBase58(),\r\n            parameters: {\r\n                curve: 'secp256r1'\r\n            }\r\n        };\r\n\r\n        if (callback) {\r\n            sendBackResult2Native(JSON.stringify(result), callback);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    static exportAccountToKeystring(accountDataStr: string, callback?: string) {\r\n        const obj = Account.parseJson(accountDataStr);\r\n        const salt = obj.salt;\r\n        const address = obj.address.toBase58();\r\n        const key = obj.encryptedKey.key;\r\n        const result = salt + address + key;\r\n\r\n        if (callback) {\r\n            sendBackResult2Native(JSON.stringify(result), callback);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    static importAccountMnemonic(label: string, mnemonic: string, password: string, callback?: string) {\r\n        mnemonic = mnemonic.trim();\r\n        password = this.transformPassword(password);\r\n        if (!bip39.validateMnemonic(mnemonic)) {\r\n            // tslint:disable-next-line:no-shadowed-variable\r\n            const obj = {\r\n                error: ERROR_CODE.INVALID_PARAMS,\r\n                result: ''\r\n            };\r\n            // tslint:disable-next-line:no-unused-expression\r\n            callback && sendBackResult2Native(JSON.stringify(obj), callback);\r\n            return obj;\r\n        }\r\n        const seed = bip39.mnemonicToSeedHex(mnemonic);\r\n        const hdkey = HDKey.fromMasterSeed(Buffer.from(seed, 'hex'));\r\n        const pri = hdkey.derive(ONT_BIP44_PATH);\r\n        const key = Buffer.from(pri.privateKey).toString('hex');\r\n        const privateKey = new PrivateKey(key);\r\n        const account = Account.create(privateKey, password, label);\r\n        const result = account.toJson();\r\n        const obj = {\r\n            error: ERROR_CODE.SUCCESS,\r\n            result\r\n        };\r\n\r\n        if (callback) {\r\n            sendBackResult2Native(JSON.stringify(obj), callback);\r\n        }\r\n        // clear privateKey and password\r\n        privateKey.key = '';\r\n        password = '';\r\n        mnemonic = '';\r\n        return obj;\r\n    }\r\n\r\n    static exportWifPrivakeKey(encryptedKey: string, password: string,\r\n                               address: string, salt: string, callback?: string) {\r\n        if (address.length !== 34 && address.length !== 40) {\r\n            const obj = {\r\n                error: ERROR_CODE.INVALID_PARAMS,\r\n                result: ''\r\n            };\r\n            callback && sendBackResult2Native(JSON.stringify(obj), callback);\r\n            return obj;\r\n        }\r\n        password = this.transformPassword(password);\r\n        const encrypt = new PrivateKey(encryptedKey);\r\n        const addr = new Address(address);\r\n        const saltHex = Buffer.from(salt, 'base64').toString('hex');\r\n        const privateKey = encrypt.decrypt(password, addr, saltHex);\r\n        let wif = privateKey.serializeWIF();\r\n        const result = {\r\n            error: ERROR_CODE.SUCCESS,\r\n            result: {\r\n                wif,\r\n                privateKey: privateKey.key\r\n            }\r\n        };\r\n        callback && sendBackResult2Native(JSON.stringify(result), callback);\r\n        // clear privateKey and password\r\n        privateKey.key = '';\r\n        wif = '';\r\n        password = '';\r\n        return result;\r\n    }\r\n\r\n    static importAccountWithWif(label: string, wif: string, password: string, callback?: string) {\r\n        let privateKey;\r\n        password = this.transformPassword(password);\r\n        try {\r\n            privateKey = PrivateKey.deserializeWIF(wif);\r\n        } catch (err) {\r\n            const obj = {\r\n                error: ERROR_CODE.INVALID_PARAMS,\r\n                result: ''\r\n            };\r\n            callback && sendBackResult2Native(JSON.stringify(obj), callback);\r\n            return obj;\r\n        }\r\n        const account = Account.create(privateKey, password, label);\r\n        const result = {\r\n            error: ERROR_CODE.SUCCESS,\r\n            result: account.toJson()\r\n        };\r\n        callback && sendBackResult2Native(JSON.stringify(result), callback);\r\n        // clear privateKey and password\r\n        privateKey.key = '';\r\n        password = '';\r\n        return result;\r\n    }\r\n\r\n    static importAccountWithPrivateKey(label: string, privateKey: string, password: string, callback?: string) {\r\n        privateKey = privateKey.trim();\r\n        password = this.transformPassword(password);\r\n        if (!privateKey || privateKey.length !== 64 || !isHexString(privateKey)) {\r\n            const obj = {\r\n                error: ERROR_CODE.INVALID_PARAMS,\r\n                result: ''\r\n            };\r\n            callback && sendBackResult2Native(JSON.stringify(obj), callback);\r\n            return obj;\r\n        }\r\n        const pri = new PrivateKey(privateKey);\r\n        const account = Account.create(pri, password, label);\r\n        const result = {\r\n            error: ERROR_CODE.SUCCESS,\r\n            result: account.toJson()\r\n        };\r\n        callback && sendBackResult2Native(JSON.stringify(result), callback);\r\n        // clear privateKey and password\r\n        privateKey = '';\r\n        password = '';\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Actually import with Qrcode\r\n     */\r\n    static importAccountWithKeystore(keystore: string, password: string, callback?: string) {\r\n        let keyStoreObj;\r\n        password = this.transformPassword(password);\r\n        try {\r\n            keyStoreObj = JSON.parse(keystore);\r\n        } catch (err) {\r\n            const obj = {\r\n                error: ERROR_CODE.INVALID_PARAMS,\r\n                result: ''\r\n            };\r\n            callback && sendBackResult2Native(JSON.stringify(obj), callback);\r\n            return obj;\r\n        }\r\n        if (keyStoreObj.type !== 'A') {\r\n            const obj = {\r\n                error: ERROR_CODE.INVALID_PARAMS,\r\n                result: ''\r\n            };\r\n            callback && sendBackResult2Native(JSON.stringify(obj), callback);\r\n            return obj;\r\n        } else {\r\n            let account = new Account();\r\n            const encryptedPrivateKeyObj = new PrivateKey(keyStoreObj.key);\r\n            try {\r\n                const params = {\r\n                    cost: keyStoreObj.scrypt.n || 4096,\r\n                    blockSize: keyStoreObj.scrypt.p || 8,\r\n                    parallel: keyStoreObj.scrypt.r || 8,\r\n                    size: keyStoreObj.scrypt.dkLen || 64\r\n                };\r\n                const addr = new Address(keyStoreObj.address);\r\n                account = Account.importAccount(\r\n                    keyStoreObj.label, encryptedPrivateKeyObj, password, addr, keyStoreObj.salt, params);\r\n                const obj = {\r\n                    error: ERROR_CODE.SUCCESS,\r\n                    result: account.toJson()\r\n                };\r\n                if (callback) {\r\n                    sendBackResult2Native(JSON.stringify(obj), callback);\r\n                }\r\n                // clear privateKey and password\r\n                password = '';\r\n                return obj;\r\n            } catch (err) {\r\n                const result = this.getDecryptError(err);\r\n                if (callback) {\r\n                    sendBackResult2Native(JSON.stringify(result), callback);\r\n                }\r\n                return result;\r\n            }\r\n        }\r\n    }\r\n\r\n    static getUnclaimedOng(address: string, callback?: string) {\r\n        const restClient = new RestClient(`http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`);\r\n        return restClient.getAllowance('ong', new Address(ONT_CONTRACT), new Address(address)).then((res) => {\r\n            const result = {\r\n                error: ERROR_CODE.SUCCESS,\r\n                result: res.Result\r\n            };\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(result), callback);\r\n            }\r\n            return result;\r\n        }).catch((err) => {\r\n            const result = {\r\n                error: err.Error,\r\n                result: ''\r\n            };\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(result), callback);\r\n            }\r\n            return result;\r\n        });\r\n    }\r\n\r\n    static querySmartCodeEventByTxhash(txHash: string, callback?: string) {\r\n        const restClient = new RestClient(`http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`);\r\n        return restClient.getSmartCodeEvent(txHash).then((res) => {\r\n            const obj = {\r\n                error: ERROR_CODE.SUCCESS,\r\n                result: res\r\n            };\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(obj), callback);\r\n            }\r\n            return obj;\r\n        }).catch((err) => {\r\n            const result = {\r\n                error: err.Error,\r\n                result: ''\r\n            };\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(result), callback);\r\n            }\r\n            return result;\r\n        });\r\n    }\r\n\r\n    static createSharedWallet(requiredSignatureNum: string, allRelatedPks: string, callback?: string) {\r\n        const M  = parseInt(requiredSignatureNum, 10);\r\n        let pks = [];\r\n        let pubs = [];\r\n        let error = ERROR_CODE.SUCCESS;\r\n        try {\r\n            pks = JSON.parse(allRelatedPks);\r\n            pubs = pks.map((p: string) => PublicKey.deserializeHex(new StringReader(p)));\r\n        } catch (err) {\r\n            error = ERROR_CODE.INVALID_PARAMS;\r\n        }\r\n        if (M < 2 || pks.length < M || pks.length > 12) {\r\n            error = ERROR_CODE.INVALID_PARAMS;\r\n        }\r\n        let address = '';\r\n        try {\r\n            address = Address.fromMultiPubKeys(M, pubs).toBase58();\r\n        } catch (err) {\r\n            error = ERROR_CODE.INVALID_PARAMS;\r\n        }\r\n        if (callback) {\r\n            const result = {\r\n                error,\r\n                result: address\r\n            };\r\n            sendBackResult2Native(JSON.stringify(result), callback);\r\n        }\r\n        return address;\r\n    }\r\n\r\n    static adderssFromPublicKey(publicKey: string, callback?: string) {\r\n        const pk = PublicKey.deserializeHex(new StringReader(publicKey));\r\n        const address = Address.fromPubKey(pk).toBase58();\r\n        const result = {\r\n            error : ERROR_CODE.SUCCESS,\r\n            result: address\r\n        };\r\n        if (callback) {\r\n            sendBackResult2Native(JSON.stringify(result), callback);\r\n        }\r\n        return address;\r\n    }\r\n\r\n    static makeMultiSignTransaction(asset: string, from: string, to: string, amount: string, gasPrice: string,\r\n                                    gasLimit: string, callback?: string) {\r\n        let fromAddress: Address;\r\n        let toAddress: Address;\r\n        try {\r\n            fromAddress = new Address(from);\r\n            toAddress = new Address(to);\r\n        } catch (err) {\r\n            const result = {\r\n                error: ERROR_CODE.INVALID_PARAMS,\r\n                result: ''\r\n            };\r\n\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(result), callback);\r\n            }\r\n            return result;\r\n        }\r\n        const tx = makeTransferTx(asset, fromAddress, toAddress, amount, gasPrice, gasLimit);\r\n        tx.payer = fromAddress;\r\n        const result = {\r\n            error: ERROR_CODE.SUCCESS,\r\n            txHash: reverseHex(tx.getSignContent()),\r\n            txData: tx.serialize()\r\n        };\r\n        callback && sendBackResult2Native(JSON.stringify(result), callback);\r\n        return result;\r\n    }\r\n\r\n    static signMultiAddrTransaction(\r\n        encryptedPrivateKey: string,\r\n        address: string,\r\n        salt: string,\r\n        password: string,\r\n        allRelatedPks: string,\r\n        requiredSignatureNum: string,\r\n        txDada: string,\r\n        callback?: string) {\r\n        password = this.transformPassword(password);\r\n        let privateKey: PrivateKey;\r\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\r\n        try {\r\n            const addr = new Address(address);\r\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\r\n            privateKey = encryptedPrivateKeyObj.decrypt(password, addr, saltHex);\r\n        } catch (err) {\r\n            const result = this.getDecryptError(err);\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(result), callback);\r\n            }\r\n            return result;\r\n        }\r\n        const M = parseInt(requiredSignatureNum, 10);\r\n        const tx = Transaction.deserialize(txDada);\r\n        const pubs = JSON.parse(allRelatedPks);\r\n        const pks = pubs.map((p: string) => new PublicKey(p));\r\n        signTx(tx, M, pks, privateKey);\r\n        const result = {\r\n            error: ERROR_CODE.SUCCESS,\r\n            signedHash: tx.serialize()\r\n        };\r\n        callback && sendBackResult2Native(JSON.stringify(result), callback);\r\n        return tx;\r\n    }\r\n\r\n    /**\r\n     * Neo transfer\r\n     */\r\n    static neoTransfer(\r\n        from: string,\r\n        to: string,\r\n        value: string,\r\n        encryptedPrivateKey: string,\r\n        password: string,\r\n        salt: string,\r\n        callback?: string,\r\n        params ?: ScryptParams\r\n    ) {\r\n        password = this.transformPassword(password);\r\n        const recv = new Address(to);\r\n        const addr = new Address(from);\r\n        const abiInfo = AbiInfo.parseJson(NEP5_ABI);\r\n        const contractAddr = new Address(reverseHex(CONTRACT_HASH));\r\n        const amount = parseInt(value, 10);\r\n        const func = abiInfo.getFunction('Transfer');\r\n        func.name = func.name.toLowerCase();\r\n        let privateKey: PrivateKey;\r\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\r\n        try {\r\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\r\n            privateKey = encryptedPrivateKeyObj.decrypt(password, addr, saltHex, params);\r\n        } catch (err) {\r\n            const result = this.getDecryptError(err);\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(result), callback);\r\n            }\r\n            return result;\r\n        }\r\n        const p1 = new Parameter('from', ParameterType.ByteArray, addr.serialize());\r\n        const p2 = new Parameter('to', ParameterType.ByteArray, recv.serialize());\r\n        const p3 = new Parameter('value', ParameterType.Integer, amount * NEO_TRAN);\r\n        func.setParamsValue(p1, p2, p3);\r\n        const tx = SmartContract.makeInvokeTransaction(contractAddr, addr, func);\r\n        const p = new Program();\r\n        p.parameter = Program.programFromParams([tx.sign(privateKey)]);\r\n        p.code = Program.programFromPubKey(privateKey.getPublicKey());\r\n        tx.scripts = [p];\r\n\r\n        return NeoRpc.sendRawTransaction(NEO_NODE, tx.serialize()).then((res: any) => {\r\n            const result = {\r\n                error: ERROR_CODE.SUCCESS,\r\n                result: ''\r\n            };\r\n            if (res.result) {\r\n                result.result = reverseHex(tx.getHash());\r\n                callback && sendBackResult2Native(JSON.stringify(result), callback);\r\n            } else {\r\n                result.error = ERROR_CODE.NETWORK_ERROR;\r\n                callback && sendBackResult2Native(JSON.stringify(result), callback);\r\n            }\r\n            return result;\r\n        });\r\n    }\r\n\r\n    static getNeoBalance(address: string, callback?: string) {\r\n        const contractAddr = new Address(reverseHex(CONTRACT_HASH));\r\n        const addr = new Address(address);\r\n        return NeoRpc.getBalance(NEO_NODE, contractAddr, addr).then((res: any) => {\r\n            const result = {\r\n                error: ERROR_CODE.SUCCESS,\r\n                result: 0\r\n            };\r\n            if (res.result) {\r\n                const balance = parseInt(reverseHex(res.result), 16);\r\n                result.result = balance;\r\n            }\r\n            callback && sendBackResult2Native(JSON.stringify(result), callback);\r\n            return result;\r\n        });\r\n    }\r\n\r\n    static sendTransaction(txData: string, callback?: string) {\r\n        const restClient = new RestClient(`http://${SDK.SERVER_NODE}:${SDK.REST_PORT}`);\r\n        return restClient.sendRawTransaction(txData).then((res) => {\r\n            const obj = {\r\n                error: ERROR_CODE.SUCCESS,\r\n                result: res\r\n            };\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(obj), callback);\r\n            }\r\n            return obj;\r\n        }).catch((err) => {\r\n            const result = {\r\n                error: err.Error,\r\n                result: ''\r\n            };\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(result), callback);\r\n            }\r\n            return result;\r\n        });\r\n    }\r\n\r\n    static sendTransactionWithWebsocket(txData: string, callback?: string) {\r\n        const socketClient = new WebsocketClient(`ws://${SDK.SERVER_NODE}:${SDK.SOCKET_PORT}`);\r\n        return socketClient.sendRawTransaction(txData, false, true).then((res) => {\r\n            const obj = {\r\n                error: ERROR_CODE.SUCCESS,\r\n                result: res\r\n            };\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(obj), callback);\r\n            }\r\n            return obj;\r\n        }).catch((err) => {\r\n            const result = {\r\n                error: err.Error,\r\n                result: ''\r\n            };\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(result), callback);\r\n            }\r\n            return result;\r\n        });\r\n    }\r\n\r\n    // ope8 apis for ONTO\r\n    static queryOep8Balance(\r\n        contractHash: string,\r\n        account: string,\r\n        tokenId: number,\r\n        callback?: string\r\n    ) {\r\n        const contractAddr = new Address(reverseHex(contractHash));\r\n        const oep8 = new Oep8TxBuilder(contractAddr);\r\n        const addr = new Address(account);\r\n        const tx = oep8.makeQueryBalanceOfTx(addr, tokenId);\r\n        return SDK.restClient.sendRawTransaction(tx.serialize(), true).then((res: any) => {\r\n            const result = {\r\n                error: ERROR_CODE.SUCCESS,\r\n                result: 0\r\n            };\r\n            if (res.Result.Result) {\r\n                result.result = parseInt(reverseHex(res.Result.Result), 16);\r\n            }\r\n            callback && sendBackResult2Native(JSON.stringify(result), callback);\r\n            return result;\r\n        });\r\n    }\r\n\r\n    static queryOep8Balances(\r\n        contractHash: string,\r\n        account: string,\r\n        callback?: string\r\n    ) {\r\n        const contractAddr = new Address(reverseHex(contractHash));\r\n        const oep8 = new Oep8TxBuilder(contractAddr);\r\n        const addr = new Address(account);\r\n        const tx = oep8.makeQueryBalancesTx(addr);\r\n        return SDK.restClient.sendRawTransaction(tx.serialize(), true).then((res: any) => {\r\n            const result = {\r\n                error: ERROR_CODE.SUCCESS,\r\n                result: [0, 0, 0, 0, 0, 0, 0, 0]\r\n            };\r\n            if (res.Result.Result) {\r\n                const vals = res.Result.Result.map((v: string) => v ? parseInt(reverseHex(v), 16) : 0);\r\n                result.result = vals;\r\n            }\r\n            callback && sendBackResult2Native(JSON.stringify(result), callback);\r\n            return result;\r\n        });\r\n    }\r\n\r\n    static queryOep8TotalBalance(\r\n        contractHash: string,\r\n        account: string,\r\n        callback?: string\r\n    ) {\r\n        const contractAddr = new Address(reverseHex(contractHash));\r\n        const oep8 = new Oep8TxBuilder(contractAddr);\r\n        const addr = new Address(account);\r\n        const tx = oep8.makeQueryTotalBalanceTx(addr);\r\n        return SDK.restClient.sendRawTransaction(tx.serialize(), true).then((res: any) => {\r\n            const result = {\r\n                error: ERROR_CODE.SUCCESS,\r\n                result: 0\r\n            };\r\n            if (res.Result.Result) {\r\n                result.result = parseInt(reverseHex(res.Result.Result), 16);\r\n            }\r\n            callback && sendBackResult2Native(JSON.stringify(result), callback);\r\n            return result;\r\n        });\r\n    }\r\n\r\n    static transferOep8(\r\n        contractHash: string,\r\n        from: string,\r\n        to: string,\r\n        value: string,\r\n        tokenId: number,\r\n        encryptedPrivateKey: string,\r\n        password: string,\r\n        salt: string,\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: string,\r\n        callback?: string\r\n    ) {\r\n        let fromAddress: Address;\r\n        let toAddress: Address;\r\n        let payerAddress: Address;\r\n        password = this.transformPassword(password);\r\n        try {\r\n            fromAddress = new Address(from);\r\n            toAddress = new Address(to);\r\n            payerAddress = new Address(payer);\r\n        } catch (err) {\r\n            const result = {\r\n                error: ERROR_CODE.INVALID_PARAMS,\r\n                result: ''\r\n            };\r\n            return result;\r\n        }\r\n\r\n        let privateKey: PrivateKey;\r\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\r\n        try {\r\n            const addr = new Address(from);\r\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\r\n            privateKey = encryptedPrivateKeyObj.decrypt(password, addr, saltHex);\r\n        } catch (err) {\r\n            const result = this.getDecryptError(err);\r\n            return result;\r\n        }\r\n        const contractAddr = new Address(reverseHex(contractHash));\r\n        const oep8 = new Oep8TxBuilder(contractAddr);\r\n        const tx = oep8.makeTransferTx(fromAddress, toAddress, tokenId, value, gasPrice, gasLimit, payerAddress);\r\n        signTransaction(tx, privateKey);\r\n        const result = {\r\n            error: ERROR_CODE.SUCCESS,\r\n            result: '',\r\n            tx: tx.serialize(),\r\n            txHash: reverseHex(tx.getSignContent())\r\n        };\r\n        callback && sendBackResult2Native(JSON.stringify(result), callback);\r\n        // clear privateKey and password\r\n        privateKey.key = '';\r\n        password = '';\r\n        return result;\r\n    }\r\n\r\n    static compoundOep8(\r\n        contractHash: string,\r\n        account: string,\r\n        compoundNum: number,\r\n        encryptedPrivateKey: string,\r\n        password: string,\r\n        salt: string,\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: string,\r\n        callback: string\r\n    ) {\r\n        let addr: Address;\r\n        password = this.transformPassword(password);\r\n        try {\r\n            addr = new Address(account);\r\n        } catch (err) {\r\n            const result = {\r\n                error: ERROR_CODE.INVALID_PARAMS,\r\n                result: ''\r\n            };\r\n            return result;\r\n        }\r\n\r\n        let privateKey: PrivateKey;\r\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\r\n        try {\r\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\r\n            privateKey = encryptedPrivateKeyObj.decrypt(password, addr, saltHex);\r\n        } catch (err) {\r\n            const result = this.getDecryptError(err);\r\n            return result;\r\n        }\r\n        const contractAddr = new Address(reverseHex(contractHash));\r\n        const oep8 = new Oep8TxBuilder(contractAddr);\r\n        const tx = oep8.makeCompoundTx(addr, compoundNum, gasPrice, gasLimit, addr);\r\n        signTransaction(tx, privateKey);\r\n        const result = {\r\n            error: ERROR_CODE.SUCCESS,\r\n            result: '',\r\n            tx: tx.serialize(),\r\n            txHash: reverseHex(tx.getSignContent())\r\n        };\r\n        callback && sendBackResult2Native(JSON.stringify(result), callback);\r\n        // clear privateKey and password\r\n        privateKey.key = '';\r\n        password = '';\r\n        return result;\r\n    }\r\n\r\n    // ope4 apis for ONTO\r\n    static queryOep4Balance(\r\n        contractHash: string,\r\n        account: string,\r\n        callback?: string\r\n    ) {\r\n        const contractAddr = new Address(reverseHex(contractHash));\r\n        const oep4 = new Oep4TxBuilder(contractAddr);\r\n        const addr = new Address(account);\r\n        const tx = oep4.queryBalanceOf(addr);\r\n        return SDK.restClient.sendRawTransaction(tx.serialize(), true).then((res: any) => {\r\n            const result = {\r\n                error: ERROR_CODE.SUCCESS,\r\n                result: 0\r\n            };\r\n            if (res.Result.Result) {\r\n                result.result = parseInt(reverseHex(res.Result.Result), 16);\r\n            }\r\n            callback && sendBackResult2Native(JSON.stringify(result), callback);\r\n            return result;\r\n        });\r\n    }\r\n\r\n    static transferOep4(\r\n        contractHash: string,\r\n        from: string,\r\n        to: string,\r\n        value: string,\r\n        encryptedPrivateKey: string,\r\n        password: string,\r\n        salt: string,\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        callback?: string\r\n    ) {\r\n        let fromAddress: Address;\r\n        let toAddress: Address;\r\n        password = this.transformPassword(password);\r\n        try {\r\n            fromAddress = new Address(from);\r\n            toAddress = new Address(to);\r\n        } catch (err) {\r\n            const result = {\r\n                error: ERROR_CODE.INVALID_PARAMS,\r\n                result: ''\r\n            };\r\n            return result;\r\n        }\r\n\r\n        let privateKey: PrivateKey;\r\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\r\n        try {\r\n            const addr = new Address(from);\r\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\r\n            privateKey = encryptedPrivateKeyObj.decrypt(password, addr, saltHex);\r\n        } catch (err) {\r\n            const result = this.getDecryptError(err);\r\n            return result;\r\n        }\r\n        const contractAddr = new Address(reverseHex(contractHash));\r\n        const oep4 = new Oep4TxBuilder(contractAddr);\r\n        const tx = oep4.makeTransferTx(fromAddress, toAddress, value, gasPrice, gasLimit, fromAddress);\r\n        signTransaction(tx, privateKey);\r\n        const result = {\r\n            error: ERROR_CODE.SUCCESS,\r\n            result: '',\r\n            tx: tx.serialize(),\r\n            txHash: reverseHex(tx.getSignContent())\r\n        };\r\n        callback && sendBackResult2Native(JSON.stringify(result), callback);\r\n        // clear privateKey and password\r\n        privateKey.key = '';\r\n        password = '';\r\n        return result;\r\n    }\r\n\r\n    static eciesDecrypt(\r\n        encryptedPrivateKey: string,\r\n        password: string,\r\n        address: string,\r\n        salt: string,\r\n        cipher: string,\r\n        callback?: string\r\n    ) {\r\n        password = this.transformPassword(password);\r\n        const encryptedPrivateKeyObj = new PrivateKey(encryptedPrivateKey);\r\n        let pri;\r\n        try {\r\n            const addr = new Address(address);\r\n            const saltHex = Buffer.from(salt, 'base64').toString('hex');\r\n            pri = encryptedPrivateKeyObj.decrypt(password, addr, saltHex);\r\n        } catch (err) {\r\n            const result = this.getDecryptError(err);\r\n\r\n            if (callback) {\r\n                sendBackResult2Native(JSON.stringify(result), callback);\r\n            }\r\n            return result;\r\n        }\r\n        const ins = new Ecies();\r\n        const cipherContent = cipher.split('.');\r\n        ins.setKeyPair(pri.key);\r\n        const plainBuffer = ins.dec(\r\n            cipherContent[0],\r\n            cipherContent[1],\r\n            cipherContent[2],\r\n            32\r\n        );\r\n\r\n        const plain = plainBuffer.toString('utf8');\r\n        const obj = {\r\n            error: 0,\r\n            result: plain\r\n        };\r\n        if (callback) {\r\n            sendBackResult2Native(JSON.stringify(obj), callback);\r\n        }\r\n        return obj;\r\n    }\r\n\r\n}\r\n","/*\r\n* Copyright (C) 2018 The ontology Authors\r\n* This file is part of The ontology library.\r\n*\r\n* The ontology is free software: you can redistribute it and/or modify\r\n* it under the terms of the GNU Lesser General Public License as published by\r\n* the Free Software Foundation, either version 3 of the License, or\r\n* (at your option) any later version.\r\n*\r\n* The ontology is distributed in the hope that it will be useful,\r\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n* GNU Lesser General Public License for more details.\r\n*\r\n* You should have received a copy of the GNU Lesser General Public License\r\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\nimport BigInt from '../../common/bigInt';\r\nimport { GENESIS_BLOCK_TIMESTAMP } from '../../consts';\r\nimport { Address } from '../../crypto';\r\nimport { ERROR_CODE } from '../../error';\r\nimport RestClient from '../../network/rest/restClient';\r\nimport { Transaction } from '../../transaction/transaction';\r\nimport { makeNativeContractTx } from '../../transaction/transactionUtils';\r\nimport { bigIntFromBytes, calcUnboundOng, hex2VarBytes, hexstr2str,\r\n    num2hexstring, str2hexstr, str2VarBytes, StringReader, varifyPositiveInt } from '../../utils';\r\nimport { buildNativeCodeScript } from '../abi/nativeVmParamsBuilder';\r\nimport Struct from '../abi/struct';\r\n\r\nconst GOVERNANCE_CONTRACT = '0000000000000000000000000000000000000007';\r\nconst PEER_ATTRIBUTES = 'peerAttributes';\r\nconst SPLIT_FEE_ADDRESS = 'splitFeeAddress';\r\nconst AUTHORIZE_INFO_POOL = 'voteInfoPool';\r\nconst GLOBAL_PARAM = 'globalParam';\r\nconst TOTAL_STAKE = 'totalStake';\r\nconst VBFT_CONFIG = 'vbftConfig';\r\nconst contractAddress = new Address(GOVERNANCE_CONTRACT);\r\n\r\n/* TODO: Test */\r\n\r\n// tslint:disable:no-console\r\n\r\n/**\r\n * Register to be candidate node.\r\n * This tx needs signatures from userAddr and payer if these two address are not the same.\r\n * @param ontid user's ONT ID, must be assigned with the role.\r\n * @param peerPubKey public key of user's peer\r\n * @param userAddr user's address to pledge ONT&ONG. This address must have enough ONT & ONG.\r\n * @param keyNo user's pk id\r\n * @param initPos Initial state\r\n * @param payer Address to pay for the gas.\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n */\r\nexport function makeRegisterCandidateTx(\r\n    ontid: string,\r\n    peerPubKey: string,\r\n    keyNo: number,\r\n    userAddr: Address,\r\n    initPos: number,\r\n    payer: Address,\r\n    gasPrice: string,\r\n    gasLimit: string\r\n): Transaction {\r\n    if (typeof initPos !== 'number') {\r\n        throw new Error('Parameter initPos must be number!');\r\n    }\r\n    varifyPositiveInt(initPos);\r\n    if (ontid.substr(0, 3) === 'did') {\r\n        ontid = str2hexstr(ontid);\r\n    }\r\n    const struct = new Struct();\r\n    struct.add(str2hexstr(peerPubKey), userAddr.serialize(), initPos, ontid, keyNo);\r\n    const params = buildNativeCodeScript([struct]);\r\n    return makeNativeContractTx('registerCandidate', params, contractAddress,\r\n                                     gasPrice, gasLimit, payer);\r\n}\r\n\r\n/**\r\n *\r\n * @param userAddr User's address to pledge ONT&ONG.\r\n * @param peerPubKey Public key of user's peer\r\n * @param payer Address to pay for the gas.\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n */\r\nexport function makeUnregisterCandidateTx(\r\n    userAddr: Address,\r\n    peerPubKey: string,\r\n    payer: Address,\r\n    gasPrice: string,\r\n    gasLimit: string\r\n): Transaction {\r\n    const struct = new Struct();\r\n    struct.add(str2hexstr(peerPubKey), userAddr.serialize());\r\n    const params = buildNativeCodeScript([struct]);\r\n    return makeNativeContractTx('unRegisterCandidate', params, contractAddress, gasPrice, gasLimit, payer);\r\n}\r\n\r\n/**\r\n * Creates transaction to approve candidate\r\n * @param peerPubKey Public key of user's peer\r\n * @param payer Address to pay for the gas.\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n */\r\nexport function makeApproveCandidateTx(\r\n    peerPubKey: string,\r\n    payer: Address,\r\n    gasPrice: string,\r\n    gasLimit: string\r\n): Transaction {\r\n    const struct = new Struct();\r\n    struct.add(str2hexstr(peerPubKey));\r\n    const params = buildNativeCodeScript([struct]);\r\n    return makeNativeContractTx('approveCandidate', params, contractAddress,\r\n                                     gasPrice, gasLimit, payer);\r\n}\r\n\r\n/**\r\n * Creates transaction to reject candidate\r\n * @param peerPubKey Public key of user's peer\r\n * @param payer Address to pay for the gas.\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n */\r\nexport function makeRejectCandidateTx(\r\n    peerPubKey: string,\r\n    payer: Address,\r\n    gasPrice: string,\r\n    gasLimit: string\r\n): Transaction {\r\n    const struct = new Struct();\r\n    struct.add(str2hexstr(peerPubKey));\r\n    const params = buildNativeCodeScript([struct]);\r\n    return makeNativeContractTx('rejectCandidate', params, contractAddress,\r\n        gasPrice, gasLimit, payer);\r\n}\r\n\r\n/**\r\n * Creates transaction to vote for some peers.\r\n * Can only vote for peers that with status 1 or 2\r\n * This tx needs signatures from userAddr and payer if these two address are not the same.\r\n * @param userAddr User's address\r\n * @param peerPubKeys Public keys of peers that to be voted\r\n * @param posList Array of token that to vote\r\n * @param payer Address to pay for transaction's gas.\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n */\r\nexport function makeVoteForPeerTx(\r\n    userAddr: Address,\r\n    peerPubKeys: string[],\r\n    posList: number[],\r\n    payer: Address,\r\n    gasPrice: string,\r\n    gasLimit: string\r\n): Transaction {\r\n    if (peerPubKeys.length !== posList.length) {\r\n        throw ERROR_CODE.INVALID_PARAMS;\r\n    }\r\n    const struct = new Struct();\r\n    struct.add(userAddr.serialize());\r\n    struct.add(peerPubKeys.length);\r\n    for (const p of peerPubKeys) {\r\n        struct.add(str2hexstr(p));\r\n    }\r\n    struct.add(posList.length);\r\n    for (const n of posList) {\r\n        struct.add(n);\r\n    }\r\n    const params = buildNativeCodeScript([struct]);\r\n    return makeNativeContractTx('voteForPeer', params, contractAddress,\r\n       gasPrice, gasLimit, payer);\r\n}\r\n\r\n/**\r\n * User unvotes peer nodes\r\n * @param userAddr user's address\r\n * @param peerPubKeys peer's pks\r\n * @param posList amount of ONT to unvote\r\n * @param payer Address to pay for the gas.\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n */\r\nexport function makeUnvoteForPeerTx(\r\n    userAddr: Address,\r\n    peerPubKeys: string[],\r\n    posList: number[],\r\n    payer: Address,\r\n    gasPrice: string,\r\n    gasLimit: string\r\n): Transaction {\r\n    if (peerPubKeys.length !== posList.length) {\r\n        throw ERROR_CODE.INVALID_PARAMS;\r\n    }\r\n    const struct = new Struct();\r\n    struct.add(userAddr.serialize());\r\n    struct.add(peerPubKeys.length);\r\n    for (const p of peerPubKeys) {\r\n        struct.add(str2hexstr(p));\r\n    }\r\n    struct.add(posList.length);\r\n    for (const n of posList) {\r\n        struct.add(n);\r\n    }\r\n    const params = buildNativeCodeScript([struct]);\r\n    return makeNativeContractTx('unVoteForPeer', params, contractAddress,\r\n         gasPrice, gasLimit, payer);\r\n}\r\n\r\n/**\r\n * Withdraw the unvote ONT\r\n * Need two signatures if userAddr and payer are not the same\r\n * @param userAddr\r\n * @param peerPubKeys\r\n * @param withdrawList\r\n */\r\nexport function makeWithdrawTx(\r\n    userAddr: Address,\r\n    peerPubKeys: string[],\r\n    withdrawList: number[],\r\n    payer: Address,\r\n    gasPrice: string,\r\n    gasLimit: string\r\n): Transaction {\r\n    if (peerPubKeys.length !== withdrawList.length) {\r\n        throw ERROR_CODE.INVALID_PARAMS;\r\n    }\r\n    const struct = new Struct();\r\n    struct.add(userAddr.serialize());\r\n    struct.add(peerPubKeys.length);\r\n    for (const p of peerPubKeys) {\r\n        struct.add(str2hexstr(p));\r\n    }\r\n    struct.add(withdrawList.length);\r\n    for (const w of withdrawList) {\r\n        struct.add(w);\r\n    }\r\n    const params = buildNativeCodeScript([struct]);\r\n    return makeNativeContractTx('withdraw', params, contractAddress,\r\n        gasPrice, gasLimit, payer);\r\n}\r\n\r\n/** Quit node register\r\n * Need two signatures if userAddr and payer are not the same\r\n */\r\nexport function makeQuitNodeTx(\r\n    userAddr: Address,\r\n    peerPubKey: string,\r\n    payer: Address,\r\n    gasPrice: string,\r\n    gasLimit: string\r\n): Transaction {\r\n    const struct = new Struct();\r\n    struct.add(str2hexstr(peerPubKey), userAddr.serialize());\r\n    const params = buildNativeCodeScript([struct]);\r\n    return makeNativeContractTx('quitNode', params, contractAddress, gasPrice, gasLimit, payer);\r\n}\r\n\r\n/**\r\n * Peer change the status of authorization\r\n * @param peerPubKey Peer's public key\r\n * @param userAddr User's address\r\n * @param maxAuthorize Allowed max amount of stake authorization\r\n * @param payer Payer of the transaction fee\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n */\r\nexport function makeChangeAuthorizationTx(\r\n    peerPubKey: string,\r\n    userAddr: Address,\r\n    maxAuthorize: number,\r\n    payer: Address,\r\n    gasPrice: string,\r\n    gasLimit: string\r\n): Transaction {\r\n    const struct = new Struct();\r\n    struct.add(str2hexstr(peerPubKey), userAddr.serialize(), maxAuthorize);\r\n    const params = buildNativeCodeScript([struct]);\r\n    return makeNativeContractTx('changeMaxAuthorization', params, contractAddress, gasPrice, gasLimit, payer);\r\n}\r\n\r\n/**\r\n * Update allocation proportion of peer\r\n * @param peerPubKey\r\n * @param userAddr\r\n * @param peerCost\r\n * @param payer\r\n * @param gasPrice\r\n * @param gasLimit\r\n */\r\nexport function makeSetPeerCostTx(\r\n    peerPubKey: string,\r\n    userAddr: Address,\r\n    peerCost: number,\r\n    payer: Address,\r\n    gasPrice: string,\r\n    gasLimit: string\r\n): Transaction {\r\n    const struct = new Struct();\r\n    struct.add(str2hexstr(peerPubKey), userAddr.serialize(), peerCost);\r\n    const params = buildNativeCodeScript([struct]);\r\n    return makeNativeContractTx('setPeerCost', params, contractAddress, gasPrice, gasLimit, payer);\r\n}\r\n\r\n/**\r\n * Withdraw fee to user's address\r\n * @param userAddr User's address\r\n * @param payer\r\n * @param gasPrice\r\n * @param gasLimit\r\n */\r\nexport function makeWithdrawFeeTx(\r\n    userAddr: Address,\r\n    payer: Address,\r\n    gasPrice: string,\r\n    gasLimit: string\r\n): Transaction {\r\n    const struct = new Struct();\r\n    struct.add(userAddr.serialize());\r\n    const params = buildNativeCodeScript([struct]);\r\n    return makeNativeContractTx('withdrawFee', params, contractAddress, gasPrice, gasLimit, payer);\r\n}\r\n\r\n/**\r\n * User authorize some peers\r\n * @param userAddr\r\n * @param peerPubKeyList\r\n * @param posList\r\n * @param payer\r\n * @param gasPrice\r\n * @param gasLimit\r\n */\r\nexport function makeAuthorizeForPeerTx(\r\n    userAddr: Address,\r\n    peerPubKeyList: string[],\r\n    posList: number[],\r\n    payer: Address,\r\n    gasPrice: string,\r\n    gasLimit: string\r\n): Transaction {\r\n    const struct = new Struct();\r\n    struct.add(userAddr.serialize());\r\n    struct.add(peerPubKeyList.length);\r\n    for (const p of peerPubKeyList) {\r\n        struct.add(str2hexstr(p));\r\n    }\r\n    struct.add(posList.length);\r\n    for (const w of posList) {\r\n        struct.add(w);\r\n    }\r\n    const params = buildNativeCodeScript([struct]);\r\n    return makeNativeContractTx('authorizeForPeer', params, contractAddress, gasPrice, gasLimit, payer);\r\n}\r\n\r\n/**\r\n * User cancels the authorization of peer\r\n */\r\nexport function makeUnauthorizeForPeerTx(\r\n    userAddr: Address,\r\n    peerPubKeyList: string[],\r\n    posList: number[],\r\n    payer: Address,\r\n    gasPrice: string,\r\n    gasLimit: string\r\n): Transaction {\r\n    const struct = new Struct();\r\n    struct.add(userAddr.serialize());\r\n    struct.add(peerPubKeyList.length);\r\n    for (const p of peerPubKeyList) {\r\n        struct.add(str2hexstr(p));\r\n    }\r\n    struct.add(posList.length);\r\n    for (const w of posList) {\r\n        struct.add(w);\r\n    }\r\n    const params = buildNativeCodeScript([struct]);\r\n    return makeNativeContractTx('unAuthorizeForPeer', params, contractAddress, gasPrice, gasLimit, payer);\r\n}\r\n\r\n/**\r\n * Peer add the init pos\r\n * @param peerPubkey Peer's public key\r\n * @param userAddr Stake wallet address\r\n * @param pos Amount of pos to add\r\n * @param payer Payer of the transaction\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n */\r\nexport function makeAddInitPosTx(\r\n    peerPubkey: string,\r\n    userAddr: Address,\r\n    pos: number,\r\n    payer: Address,\r\n    gasPrice: string,\r\n    gasLimit: string\r\n): Transaction {\r\n    const struct = new Struct();\r\n    struct.add(str2hexstr(peerPubkey), userAddr.serialize(), pos);\r\n    const params = buildNativeCodeScript([struct]);\r\n    return makeNativeContractTx('addInitPos', params, contractAddress, gasPrice, gasLimit, payer);\r\n}\r\n\r\n/**\r\n * Peer reduce the init pos\r\n * @param peerPubkey Peer's public key\r\n * @param userAddr Stake wallet address\r\n * @param pos Amount of pos to reduce\r\n * @param payer Payer of the transaction\r\n * @param gasPrice Gas price\r\n * @param gasLimit Gas limit\r\n */\r\nexport function makeReduceInitPosTx(\r\n    peerPubkey: string,\r\n    userAddr: Address,\r\n    pos: number,\r\n    payer: Address,\r\n    gasPrice: string,\r\n    gasLimit: string\r\n): Transaction {\r\n    const struct = new Struct();\r\n    struct.add(str2hexstr(peerPubkey), userAddr.serialize(), pos);\r\n    const params = buildNativeCodeScript([struct]);\r\n    return makeNativeContractTx('reduceInitPos', params, contractAddress, gasPrice, gasLimit, payer);\r\n}\r\n\r\nexport function makeWithdrawPeerUnboundOngTx(\r\n    userAddr: Address,\r\n    payer: Address,\r\n    gasPrice: string,\r\n    gasLimit: string\r\n) {\r\n    const struct = new Struct();\r\n    struct.add(userAddr.serialize());\r\n    const params = buildNativeCodeScript([struct]);\r\n    return makeNativeContractTx('withdrawOng', params, contractAddress, gasPrice, gasLimit, payer);\r\n}\r\n\r\n/**\r\n * If not set ifAuthorize or cost before, query result will be empty.\r\n * @param peerPubKey\r\n * @param url\r\n */\r\nexport async function getAttributes(peerPubKey: string, url?: string) {\r\n    const restClient = new RestClient(url);\r\n    const codeHash = contractAddress.toHexString();\r\n    const key = str2hexstr(PEER_ATTRIBUTES) + peerPubKey;\r\n    const res = await restClient.getStorage(codeHash, key);\r\n    const result = res.Result;\r\n    if (result) {\r\n        return PeerAttributes.deserialize(new StringReader(result));\r\n    } else {\r\n        return new PeerAttributes();\r\n    }\r\n}\r\n\r\n/**\r\n * Get the reward fee of address\r\n * @param address User's address\r\n * @param url Node's restfull url\r\n */\r\nexport async function getSplitFeeAddress(address: Address, url?: string) {\r\n    const restClient = new RestClient(url);\r\n    const codeHash = contractAddress.toHexString();\r\n    const key = str2hexstr(SPLIT_FEE_ADDRESS) + address.serialize();\r\n    const res = await restClient.getStorage(codeHash, key);\r\n    const result = res.Result;\r\n    if (result) {\r\n        return SplitFeeAddress.deserialize(new StringReader(result));\r\n    } else {\r\n        return new SplitFeeAddress();\r\n    }\r\n}\r\n\r\n/**\r\n * Get authorization of user's address\r\n * @param peerPubKey Peer's public key\r\n * @param address User's address\r\n * @param url Node's restful url\r\n */\r\nexport async function getAuthorizeInfo(peerPubKey: string, address: Address, url?: string) {\r\n    const restClient = new RestClient(url);\r\n    const codeHash = contractAddress.toHexString();\r\n    const key = str2hexstr(AUTHORIZE_INFO_POOL) + peerPubKey + address.serialize();\r\n    const res = await restClient.getStorage(codeHash, key);\r\n    const result = res.Result;\r\n    if (result) {\r\n        return AuthorizeInfo.deserialize(new StringReader(result));\r\n    } else {\r\n        return new AuthorizeInfo();\r\n    }\r\n}\r\n\r\n/**\r\n * Query the governance view\r\n * @param url Url of restful api\r\n */\r\nexport async function getGovernanceView(url?: string) {\r\n    const restClient = new RestClient(url);\r\n    const codeHash = contractAddress.toHexString();\r\n    const key = str2hexstr('governanceView');\r\n    const viewRes = await restClient.getStorage(codeHash, key);\r\n    const view = viewRes.Result;\r\n    const governanceView = GovernanceView.deserialize(new StringReader(view));\r\n    return governanceView;\r\n}\r\n\r\n/**\r\n * Query all the peer's state. The result is a map.\r\n * @param url Url of blockchain node\r\n */\r\nexport async function getPeerPoolMap(url?: string) {\r\n    const restClient = new RestClient(url);\r\n    const codeHash = contractAddress.toHexString();\r\n    const governanceView = await getGovernanceView(url);\r\n    const key1 = str2hexstr('peerPool');\r\n    const key2 = num2hexstring(governanceView.view, 4, true);\r\n    const keyP = key1 + key2;\r\n    const res = await restClient.getStorage(codeHash, keyP);\r\n    const sr = new StringReader(res.Result);\r\n    const length = sr.readInt();\r\n    const result: any = {};\r\n    for (let i = 0; i < length; i++) {\r\n        const p = PeerPoolItem.deserialize(sr);\r\n        result[p.peerPubkey] = p;\r\n    }\r\n    return result;\r\n}\r\n\r\nexport async function getGlobalParam(url?: string) {\r\n    const restClient = new RestClient(url);\r\n    const codeHash = contractAddress.toHexString();\r\n    const key = str2hexstr(GLOBAL_PARAM);\r\n    const res = await restClient.getStorage(codeHash, key);\r\n    if (res.Result) {\r\n        return GlobalParam.deserialize(new StringReader(res.Result));\r\n    } else {\r\n        return new GlobalParam();\r\n    }\r\n\r\n}\r\n\r\nexport async function getTotalStake(userAddr: Address, url?: string) {\r\n    const restClient = new RestClient(url);\r\n    const codeHash = contractAddress.toHexString();\r\n    const key = str2hexstr(TOTAL_STAKE) + userAddr.serialize();\r\n    const res = await restClient.getStorage(codeHash, key);\r\n    if (res.Result) {\r\n        return TotalStake.deserialize(new StringReader(res.Result));\r\n    } else {\r\n        return new TotalStake();\r\n    }\r\n}\r\n\r\nexport async function getPeerUnboundOng(userAddr: Address, url?: string) {\r\n    const totalStake = await getTotalStake(userAddr, url);\r\n    if (!totalStake.address) {\r\n        return 0;\r\n    }\r\n    const restClient = new RestClient(url);\r\n    const blockHeight = (await restClient.getBlockHeight()).Result;\r\n    const block = (await restClient.getBlockJson(blockHeight)).Result;\r\n    const timeStamp = block.Header.Timestamp - GENESIS_BLOCK_TIMESTAMP;\r\n    return calcUnboundOng(totalStake.stake, totalStake.timeOffset, timeStamp);\r\n}\r\n\r\nexport async function getConfiguration(url?: string) {\r\n    const restClient = new RestClient(url);\r\n    const codeHash = contractAddress.toHexString();\r\n    const key = str2hexstr(VBFT_CONFIG);\r\n    const res = await restClient.getStorage(codeHash, key);\r\n    if (res.Result) {\r\n        return Configuration.deserialize(new StringReader(res.Result));\r\n    } else {\r\n        return new Configuration();\r\n    }\r\n}\r\n\r\n/**\r\n * Use to store governance state.\r\n */\r\nexport class GovernanceView {\r\n    static deserialize(sr: StringReader): GovernanceView {\r\n        const g = new GovernanceView();\r\n        g.view = sr.readUint32();\r\n        g.height = sr.readUint32();\r\n        g.txhash = sr.read(64); // uint256\r\n        return g;\r\n    }\r\n    view: number = 0;\r\n    height: number = 0;\r\n    txhash: string = '';\r\n\r\n    serialize(): string {\r\n        let result = '';\r\n        result += num2hexstring(this.view, 4, true);\r\n        result += num2hexstring(this.height, 4, true);\r\n        result += hex2VarBytes(this.txhash);\r\n        return result;\r\n    }\r\n}\r\n\r\n/**\r\n * Describs the peer's state in the pool.\r\n */\r\nexport class PeerPoolItem {\r\n    static deserialize(sr: StringReader): PeerPoolItem {\r\n        const p = new PeerPoolItem();\r\n        p.index = sr.readInt();\r\n        p.peerPubkey = hexstr2str(sr.readNextBytes());\r\n        p.address = Address.deserialize(sr);\r\n        p.status = parseInt(sr.read(1), 16);\r\n        p.initPos = sr.readLong();\r\n        p.totalPos = sr.readLong();\r\n        return p;\r\n    }\r\n\r\n    index: number = 0;\r\n    peerPubkey: string = '';\r\n    address: Address;\r\n    status: number = 0;\r\n    initPos: number = 0;\r\n    totalPos: number = 0;\r\n\r\n    serialize(): string {\r\n        let result = '';\r\n        result += num2hexstring(this.index, 4, true);\r\n        result += str2VarBytes(this.peerPubkey);\r\n        result += this.address.serialize();\r\n        result += num2hexstring(this.status);\r\n        result += num2hexstring(this.initPos, 8, true);\r\n        result += num2hexstring(this.totalPos, 8, true);\r\n        return result;\r\n    }\r\n}\r\n\r\nexport class PeerAttributes {\r\n    static deserialize(sr: StringReader): PeerAttributes {\r\n        const pr = new PeerAttributes();\r\n        pr.peerPubkey = hexstr2str(sr.readNextBytes());\r\n\r\n        pr.maxAuthorize = sr.readLong();\r\n\r\n        pr.t2PeerCost = sr.readLong();\r\n        pr.t1PeerCost = sr.readLong();\r\n        pr.tPeerCost = sr.readLong();\r\n\r\n        if (sr.isEmpty) {\r\n            return pr;\r\n        }\r\n        pr.field1 = sr.readNextBytes();\r\n        pr.field2 = sr.readNextBytes();\r\n        pr.field3 = sr.readNextBytes();\r\n        pr.field4 = sr.readNextBytes();\r\n\r\n        return pr;\r\n    }\r\n    peerPubkey: string = '';\r\n    maxAuthorize: number = 0;\r\n    t2PeerCost: number = 100; // peer cost, active in view T + 2\r\n    t1PeerCost: number = 100; // peer cost, active in view T + 1\r\n    tPeerCost: number = 0; // peer cost, active in view T\r\n    field1: string = '';\r\n    field2: string = '';\r\n    field3: string = '';\r\n    field4: string = '';\r\n\r\n    serialize(): string {\r\n        return '';\r\n    }\r\n}\r\n\r\nexport class SplitFeeAddress {\r\n    static deserialize(sr: StringReader) {\r\n        const sfa = new SplitFeeAddress();\r\n        sfa.address = Address.deserialize(sr);\r\n        sfa.amount = sr.readLong();\r\n        return sfa;\r\n    }\r\n\r\n    address: Address;\r\n    amount: number = 0;\r\n}\r\n\r\nexport class AuthorizeInfo {\r\n    static deserialize(sr: StringReader) {\r\n        const ai = new AuthorizeInfo();\r\n        ai.peerPubkey = hexstr2str(sr.readNextBytes());\r\n        ai.address = Address.deserialize(sr);\r\n        ai.consensusPos = sr.readLong();\r\n        ai.freezePos = sr.readLong();\r\n        ai.newPos = sr.readLong();\r\n        ai.withdrawPos = sr.readLong();\r\n        ai.withdrawFreezePos = sr.readLong();\r\n        ai.withdrawUnfreezePos = sr.readLong();\r\n        return ai;\r\n    }\r\n\r\n    peerPubkey: string = '';\r\n    address: Address;\r\n    consensusPos: number = 0;\r\n    freezePos: number = 0;\r\n    newPos: number = 0;\r\n    withdrawPos: number = 0;\r\n    withdrawFreezePos: number = 0;\r\n    withdrawUnfreezePos: number = 0;\r\n}\r\n\r\nexport class GlobalParam {\r\n    static deserialize(sr: StringReader) {\r\n        const gp = new GlobalParam();\r\n        const feeHexStr = sr.readNextBytes();\r\n        const candidateFeeStr = BigInt.fromHexstr(feeHexStr).value;\r\n        gp.candidateFee = Number(candidateFeeStr);\r\n        const minStr = BigInt.fromHexstr(sr.readNextBytes()).value;\r\n        gp.minInitState = Number(minStr);\r\n        const candidateNumStr = BigInt.fromHexstr(sr.readNextBytes()).value;\r\n        const candidateNum = Number(candidateNumStr);\r\n        gp.candidateNum = candidateNum;\r\n        const posLimitStr = BigInt.fromHexstr(sr.readNextBytes()).value;\r\n        gp.posLimit = Number(posLimitStr);\r\n        const aStr = BigInt.fromHexstr(sr.readNextBytes()).value;\r\n        const a = Number(aStr);\r\n        const bStr = BigInt.fromHexstr(sr.readNextBytes()).value;\r\n        const b = Number(bStr);\r\n        const yStr = BigInt.fromHexstr(sr.readNextBytes()).value;\r\n        const yita = Number(yStr);\r\n        const pStr = BigInt.fromHexstr(sr.readNextBytes()).value;\r\n        const penalty = Number(pStr);\r\n        gp.A = a;\r\n        gp.B = b;\r\n        gp.yita = yita;\r\n        gp.penalty = penalty;\r\n        return gp;\r\n    }\r\n\r\n    candidateFee: number;\r\n    candidateNum: number;\r\n    minInitState: number;\r\n    posLimit: number;\r\n    A: number;\r\n    B: number;\r\n    yita: number;\r\n    penalty: number;\r\n}\r\n\r\nexport class TotalStake {\r\n    static deserialize(sr: StringReader): TotalStake {\r\n        const ts = new TotalStake();\r\n        ts.address = Address.deserialize(sr);\r\n        ts.stake = sr.readLong();\r\n        ts.timeOffset = sr.readUint32();\r\n        return ts;\r\n    }\r\n    address: Address;\r\n    stake: number;\r\n    timeOffset: number;\r\n}\r\n\r\nexport class Configuration {\r\n\r\n    static deserialize(sr: StringReader): Configuration {\r\n        const config = new Configuration();\r\n        config.N = bigIntFromBytes(sr.readNextBytes()).toInt();\r\n        config.C = bigIntFromBytes(sr.readNextBytes()).toInt();\r\n        config.K = bigIntFromBytes(sr.readNextBytes()).toInt();\r\n        config.L = bigIntFromBytes(sr.readNextBytes()).toInt();\r\n        config.BlockMsgDelay = bigIntFromBytes(sr.readNextBytes()).toInt();\r\n        config.HashMsgDelay = bigIntFromBytes(sr.readNextBytes()).toInt();\r\n        config.PeerHandShakeTimeout = bigIntFromBytes(sr.readNextBytes()).toInt();\r\n        config.MaxBlockChangeView = bigIntFromBytes(sr.readNextBytes()).toInt();\r\n        return config;\r\n    }\r\n    N: number;\r\n    C: number;\r\n    K: number;\r\n    L: number;\r\n    BlockMsgDelay: number;\r\n    HashMsgDelay: number;\r\n    PeerHandShakeTimeout: number;\r\n    MaxBlockChangeView: number;\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\nimport { BigNumber } from 'bignumber.js';\r\nimport BigInt from '../../common/bigInt';\r\nimport { Address } from '../../crypto/address';\r\nimport { ERROR_CODE } from '../../error';\r\nimport { hex2VarBytes, hexstr2str, num2hexstring, str2VarBytes, StringReader } from '../../utils';\r\n\r\nexport class Transfers {\r\n    static deserialize(sr: StringReader) {\r\n        const t = new Transfers();\r\n        // const version = sr.read(1);\r\n        // t.version = version;\r\n        const states = [];\r\n        const stateLen = sr.readNextLen();\r\n        for (let i = 0; i < stateLen; i++) {\r\n            const state = State.deserialize(sr);\r\n            states.push(state);\r\n        }\r\n        t.states = states;\r\n        return t;\r\n    }\r\n\r\n    // byte\r\n    // version : string\r\n    states: State[] = [];\r\n\r\n    constructor() {\r\n        // this.version = '00';\r\n    }\r\n\r\n    serialize() {\r\n        let result = '';\r\n        // result += this.version\r\n        result += num2hexstring(this.states.length);\r\n        // tslint:disable-next-line:prefer-for-of\r\n        for (let i = 0; i < this.states.length; i++) {\r\n            result += this.states[i].serialize();\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nexport class TokenTransfer {\r\n    static deserialize(sr: StringReader) {\r\n        const tf = new TokenTransfer();\r\n        tf.states = [];\r\n        const contract = sr.read(20);\r\n        tf.contract = contract;\r\n\r\n        const len = sr.readNextLen();\r\n        for (let i = 0; i < len; i++) {\r\n            const state = State.deserialize(sr);\r\n            tf.states.push(state);\r\n        }\r\n        return tf;\r\n    }\r\n\r\n    // 20 bytes\r\n    contract: string;\r\n    states: State[];\r\n\r\n    serialize() {\r\n        let result = '';\r\n        result += this.contract;\r\n        const len = num2hexstring(this.states.length);\r\n        result += len;\r\n        // tslint:disable-next-line:prefer-for-of\r\n        for (let i = 0 ; i < this.states.length; i++) {\r\n            result += this.states[i].serialize();\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nexport class State {\r\n    static deserialize(sr: StringReader) {\r\n        // const version = sr.read(1);\r\n        const from = new Address(sr.readNextBytes());\r\n        const to   = new Address(sr.readNextBytes());\r\n        // const value = (new BigNumber(sr.readNextBytes(), 16)).toString();\r\n        // const value = sr.read(8);\r\n        const value = BigInt.fromHexstr(sr.readNextBytes()).value;\r\n\r\n        return new State(from, to, value.toString());\r\n    }\r\n\r\n    // byte\r\n    // version : string\r\n    // 20 bytes address\r\n    from: Address;\r\n    to: Address;\r\n    value: string | number;\r\n\r\n    constructor(from: Address, to: Address, value: string | number) {\r\n        const bi = new BigNumber(value);\r\n        if (!bi.isInteger() || bi.isNegative()) {\r\n            throw ERROR_CODE.INVALID_PARAMS;\r\n        }\r\n        this.from = from;\r\n        this.to = to;\r\n        this.value = value;\r\n    }\r\n\r\n    serialize() {\r\n        let result = '';\r\n        // result += this.version\r\n        result += hex2VarBytes(this.from.serialize());\r\n        result += hex2VarBytes(this.to.serialize());\r\n        const bi = new BigInt(this.value).toHexstr();\r\n        result += hex2VarBytes(bi);\r\n        return result;\r\n    }\r\n}\r\n\r\nexport class Contract {\r\n    static deserialize(sr: StringReader) {\r\n        const c = new Contract();\r\n        const version = sr.read(1);\r\n        const address = Address.deserialize(sr);\r\n        const method = sr.readNextBytes();\r\n        const args = sr.readNextBytes();\r\n        c.version = version;\r\n        c.address = address;\r\n        c.method = hexstr2str(method);\r\n        c.args = args;\r\n        return c;\r\n    }\r\n\r\n    // byte\r\n    version: string;\r\n\r\n    // 20 bytes\r\n    address: Address;\r\n\r\n    method: string;\r\n\r\n    // byte\r\n    args: string;\r\n\r\n    constructor() {\r\n        this.version = '00';\r\n    }\r\n\r\n    serialize() {\r\n        let result = '';\r\n        result += this.version;\r\n\r\n        result += this.address.serialize();\r\n\r\n        result += str2VarBytes(this.method);\r\n\r\n        result += hex2VarBytes(this.args);\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\nexport class TransferFrom {\r\n    static deserialize(sr: StringReader): TransferFrom {\r\n        // const version = sr.read(1);\r\n        const sender = new Address(sr.readNextBytes());\r\n        const from = new Address(sr.readNextBytes());\r\n        const to = new Address(sr.readNextBytes());\r\n        const value = BigInt.fromHexstr(sr.readNextBytes()).value;\r\n        const tf = new TransferFrom(sender, from, to, value.toString());\r\n        return tf;\r\n    }\r\n\r\n    // version : string = '00'\r\n\r\n    sender: Address;\r\n\r\n    from: Address;\r\n\r\n    to: Address;\r\n\r\n    value: string;\r\n\r\n    constructor(sender: Address, from: Address, to: Address, value: string) {\r\n        const bi = new BigNumber(value);\r\n        if (!bi.isInteger() || !bi.isNegative()) {\r\n            throw ERROR_CODE.INVALID_PARAMS;\r\n        }\r\n        this.sender = sender;\r\n        this.from = from;\r\n        this.to = to;\r\n        this.value = value;\r\n    }\r\n\r\n    serialize(): string {\r\n        let result = '';\r\n        // result += this.version\r\n        result += hex2VarBytes(this.sender.serialize());\r\n        result += hex2VarBytes(this.from.serialize());\r\n        result += hex2VarBytes(this.to.serialize());\r\n        const biHex = new BigInt(this.value).toHexstr();\r\n        result += hex2VarBytes(biHex);\r\n        return result;\r\n    }\r\n}\r\n","/*\r\n* Copyright (C) 2018 The ontology Authors\r\n* This file is part of The ontology library.\r\n*\r\n* The ontology is free software: you can redistribute it and/or modify\r\n* it under the terms of the GNU Lesser General Public License as published by\r\n* the Free Software Foundation, either version 3 of the License, or\r\n* (at your option) any later version.\r\n*\r\n* The ontology is distributed in the hope that it will be useful,\r\n* but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n* GNU Lesser General Public License for more details.\r\n*\r\n* You should have received a copy of the GNU Lesser General Public License\r\n* along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\nimport { createCodeParamsScript } from '../../transaction/scriptBuilder';\r\nimport { Transaction } from '../../transaction/transaction';\r\nimport { str2hexstr } from '../../utils';\r\nimport { Address } from './../../crypto/address';\r\nimport { makeInvokeTransaction } from './../../transaction/transactionBuilder';\r\nimport { Parameter, ParameterType } from './../abi/parameter';\r\n\r\nexport class Oep5Param {\r\n    public toAcct: string; // hex string\r\n    public tokenId: string; // hex string\r\n\r\n    public constructor(toAcct: Address, tokenId: string ) {\r\n        this.toAcct = toAcct.serialize();\r\n        this.tokenId = tokenId;\r\n    }\r\n}\r\n\r\nconst FunctionNames = {\r\n    Init: 'init',\r\n    Name: 'name',\r\n    Symbol: 'symbol',\r\n    TotalSupply: 'totalSupply',\r\n    BalanceOf: 'balanceOf',\r\n    OwnerOf: 'ownerOf',\r\n    Transfer: 'transfer',\r\n    TransferMulti: 'transferMulti',\r\n    Approve: 'approve',\r\n    ApproveMulti: 'approveMulti',\r\n    TakeOwnership: 'takeOwnership',\r\n    QueryTokenIDByIndex: 'queryTokenIDByIndex',\r\n    QueryTokenByID: 'queryTokenByID',\r\n    GetApproved: 'getApproved',\r\n    CreateMultiTokens: 'createMultiTokens',\r\n    CreateOneToken: 'createOneToken'\r\n};\r\n\r\nexport class Oep5TxBuilder {\r\n    contractAddr: Address;\r\n\r\n    constructor(contractAddr: Address) {\r\n        this.contractAddr = contractAddr;\r\n    }\r\n\r\n    makeInitTx(\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: Address\r\n    ): Transaction {\r\n        const func = FunctionNames.Init;\r\n        return makeInvokeTransaction(func, [], this.contractAddr, gasPrice, gasLimit, payer);\r\n    }\r\n\r\n    makeOwnerOfTx(\r\n        tokenId: string\r\n    ): Transaction {\r\n        const func = FunctionNames.OwnerOf;\r\n        const params = [\r\n            new Parameter('tokenId', ParameterType.ByteArray, tokenId)\r\n        ];\r\n        return makeInvokeTransaction(func, params, this.contractAddr);\r\n    }\r\n\r\n    /**\r\n     * Transfer the control to someone else\r\n     * @param oep5Param\r\n     * @param gasPrice\r\n     * @param gasLimit\r\n     * @param payer\r\n     */\r\n    makeTransferTx(\r\n        oep5Param: Oep5Param,\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: Address\r\n    ): Transaction {\r\n        const func = FunctionNames.Transfer;\r\n        const params = [\r\n            new Parameter('toAcct', ParameterType.ByteArray, oep5Param.toAcct),\r\n            new Parameter('tokenId', ParameterType.ByteArray, oep5Param.tokenId)\r\n        ];\r\n        return makeInvokeTransaction(func, params, this.contractAddr, gasPrice, gasLimit, payer);\r\n    }\r\n\r\n    /**\r\n     * Transfer the control to multi people\r\n     */\r\n    makeTransferMultiTx(\r\n        oep5Params: Oep5Param[],\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: Address\r\n    ): Transaction {\r\n        const list = [];\r\n        list.push(str2hexstr(FunctionNames.TransferMulti));\r\n        const temp = [];\r\n        for (const param of oep5Params) {\r\n            temp.push([\r\n                param.toAcct,\r\n                param.tokenId\r\n            ]);\r\n        }\r\n        list.push(temp);\r\n        const params = createCodeParamsScript(list);\r\n        return makeInvokeTransaction('', params, this.contractAddr, gasPrice, gasLimit, payer);\r\n    }\r\n\r\n    /**\r\n     * Approve the token to toAcct address, it can overwrite older approved address\r\n     * @param oep5Param\r\n     * @param gasPrice\r\n     * @param gasLimit\r\n     * @param payer\r\n     */\r\n    makeApproveTx(\r\n        oep5Param: Oep5Param,\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: Address\r\n    ): Transaction {\r\n        const func = FunctionNames.Approve;\r\n        const params = [\r\n            new Parameter('toAcct', ParameterType.ByteArray, oep5Param.toAcct),\r\n            new Parameter('tokenId', ParameterType.ByteArray, oep5Param.tokenId)\r\n        ];\r\n        return makeInvokeTransaction(func, params, this.contractAddr, gasPrice, gasLimit, payer);\r\n    }\r\n\r\n    /**\r\n     * Take the approved token.\r\n     * @param oep5Param\r\n     * @param gasPrice\r\n     * @param gasLimit\r\n     * @param payer\r\n     */\r\n    makeTakeOwnershipTx(\r\n        oep5Param: Oep5Param,\r\n        gasPrice: string,\r\n        gasLimit: string,\r\n        payer: Address\r\n    ): Transaction {\r\n        const func = FunctionNames.TakeOwnership;\r\n        const params = [\r\n            new Parameter('toAcct', ParameterType.ByteArray, oep5Param.toAcct),\r\n            new Parameter('tokenId', ParameterType.ByteArray, oep5Param.tokenId)\r\n        ];\r\n        return makeInvokeTransaction(func, params, this.contractAddr, gasPrice, gasLimit, payer);\r\n    }\r\n\r\n    makeQueryBalanceOfTx(\r\n        addr: Address\r\n    ): Transaction {\r\n        const func = FunctionNames.BalanceOf;\r\n        const params = [\r\n            new Parameter('addr', ParameterType.ByteArray, addr.serialize())\r\n        ];\r\n        return makeInvokeTransaction(func, params, this.contractAddr);\r\n    }\r\n\r\n    makeQueryTotalSupplyTx(): Transaction {\r\n        const func = FunctionNames.TotalSupply;\r\n        return makeInvokeTransaction(func, [], this.contractAddr);\r\n    }\r\n\r\n    makeQueryTokenIDByIndexTx(\r\n        index: number\r\n    ): Transaction {\r\n        const func = FunctionNames.QueryTokenIDByIndex;\r\n        const params = [\r\n            new Parameter('index', ParameterType.Long, index)\r\n        ];\r\n        return makeInvokeTransaction(func, params, this.contractAddr);\r\n    }\r\n\r\n    makeQueryTokenByIDTx(\r\n        tokenId: string\r\n    ): Transaction {\r\n        const func = FunctionNames.QueryTokenByID;\r\n        const params = [\r\n            new Parameter('tokenId', ParameterType.ByteArray, tokenId)\r\n        ];\r\n        return makeInvokeTransaction(func, params, this.contractAddr);\r\n    }\r\n\r\n    makeGetApprovedTx(\r\n        tokenId: string\r\n    ): Transaction {\r\n        const func = FunctionNames.GetApproved;\r\n        const params = [\r\n            new Parameter('tokenId', ParameterType.ByteArray, tokenId)\r\n        ];\r\n        return makeInvokeTransaction(func, params, this.contractAddr);\r\n    }\r\n\r\n    makeQueryNameTx(): Transaction {\r\n        const func = FunctionNames.Name;\r\n        return makeInvokeTransaction(func, [], this.contractAddr);\r\n    }\r\n\r\n    makeQuerySymbolTx(): Transaction {\r\n        const func = FunctionNames.Symbol;\r\n        return makeInvokeTransaction(func, [], this.contractAddr);\r\n    }\r\n\r\n}\r\n","/*\r\n * Copyright (C) 2018 The ontology Authors\r\n * This file is part of The ontology library.\r\n *\r\n * The ontology is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * The ontology is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\nimport { Account } from './account';\r\nimport { Claim } from './claim';\r\nimport * as CONST from './consts';\r\nimport * as Crypto from './crypto';\r\nimport { Identity } from './identity';\r\nimport * as NeoCore from './neocore';\r\nimport RestClient from './network/rest/restClient';\r\nimport RpcClient from './network/rpc/rpcClient';\r\nimport { WebsocketClient } from './network/websocket/websocketClient';\r\nimport * as scrypt from './scrypt';\r\nimport { SDK } from './sdk/index';\r\nimport AbiFunction from './smartcontract/abi/abiFunction';\r\nimport AbiInfo from './smartcontract/abi/abiInfo';\r\nimport { Parameter, ParameterType } from './smartcontract/abi/parameter';\r\nimport Struct from './smartcontract/abi/struct';\r\nimport * as GovernanceTxBuilder from './smartcontract/nativevm/governanceContractTxBuilder';\r\nimport * as OntAssetTxBuilder from './smartcontract/nativevm/ontAssetTxBuilder';\r\nimport * as OntidContract from './smartcontract/nativevm/ontidContractTxBuilder';\r\nimport * as Token from './smartcontract/nativevm/token';\r\nimport * as Oep4 from './smartcontract/neovm/oep4TxBuilder';\r\nimport * as Oep5 from './smartcontract/neovm/oep5TxBuilder';\r\nimport * as Oep8 from './smartcontract/neovm/oep8TxBuilder';\r\nimport { DDO, DDOAttribute } from './transaction/ddo';\r\nimport * as ScriptBuilder from './transaction/scriptBuilder';\r\nimport { Transaction } from './transaction/transaction';\r\nimport * as TransactionBuilder from './transaction/transactionBuilder';\r\nimport { Transfer } from './transaction/transfer';\r\nimport { TxSignature } from './transaction/txSignature';\r\nimport * as utils from './utils';\r\nimport { Wallet } from './wallet';\r\nimport {\r\n    makeNativeContractTx\r\n} from './transaction/transactionUtils';\r\n\r\nclass ONT {\r\n    Account: any;\r\n    Identity: any;\r\n    Claim: any;\r\n    DDO: any;\r\n    DDOAttribute: any;\r\n    Transaction: any;\r\n    Transfer: any;\r\n    TxSignature: any;\r\n    TransactionBuilder: any;\r\n    OntAssetTxBuilder: any;\r\n    Parameter: any;\r\n    ParameterType: any;\r\n    AbiFunction: any;\r\n    AbiInfo: any;\r\n    utils: any;\r\n    scrypt: any;\r\n    CONST: any;\r\n    Wallet: any;\r\n    SDK: any;\r\n    Token: any;\r\n    OntidContract: any;\r\n    GovernanceTxBuilder: any;\r\n    RestClient: any;\r\n    RpcClient: any;\r\n    WebsocketClient: any;\r\n    Crypto: any;\r\n    Struct: any;\r\n    ScriptBuilder: any;\r\n    NeoCore: any;\r\n    Oep4: any;\r\n    Oep8: any;\r\n    Oep5: any;\r\n    makeNativeContractTx: any\r\n\r\n    constructor() {\r\n        this.Account = Account;\r\n        this.Identity = Identity;\r\n        this.Claim = Claim;\r\n        this.DDO = DDO;\r\n        this.DDOAttribute = DDOAttribute;\r\n        this.Transaction = Transaction;\r\n        this.Transfer = Transfer;\r\n        this.TxSignature = TxSignature;\r\n        this.TransactionBuilder = TransactionBuilder;\r\n        this.OntAssetTxBuilder = OntAssetTxBuilder;\r\n        this.GovernanceTxBuilder = GovernanceTxBuilder;\r\n        this.Parameter = Parameter;\r\n        this.ParameterType = ParameterType;\r\n        this.AbiFunction = AbiFunction;\r\n        this.AbiInfo = AbiInfo;\r\n        this.utils = utils;\r\n        this.scrypt = scrypt;\r\n        this.CONST = CONST;\r\n        this.Wallet = Wallet;\r\n        this.SDK = SDK;\r\n        this.Token = Token;\r\n        this.OntidContract = OntidContract;\r\n        this.RestClient = RestClient;\r\n        this.RpcClient = RpcClient;\r\n        this.WebsocketClient = WebsocketClient;\r\n        this.Crypto = Crypto;\r\n        this.Struct = Struct;\r\n        this.ScriptBuilder = ScriptBuilder;\r\n        this.NeoCore = NeoCore;\r\n        this.Oep4 = Oep4;\r\n        this.Oep8 = Oep8;\r\n        this.Oep5 = Oep5;\r\n        this.makeNativeContractTx = makeNativeContractTx;\r\n    }\r\n    setNode(url: string) {\r\n        this.CONST.TEST_NODE = url;\r\n    }\r\n\r\n    setRpcPort(port: string) {\r\n        this.CONST.HTTP_JSON_PORT = port;\r\n    }\r\n\r\n    setRestPort(port: string) {\r\n        this.CONST.HTTP_REST_PORT = port;\r\n    }\r\n\r\n    setSocketPort(port: string) {\r\n        this.CONST.HTTP_WS_PORT = port;\r\n    }\r\n}\r\n\r\nexport default ONT;\r\n\r\nexport {\r\n    Account,\r\n    Identity,\r\n    Claim,\r\n    DDO,\r\n    DDOAttribute,\r\n    Transaction,\r\n    Transfer,\r\n    TxSignature,\r\n    Parameter,\r\n    ParameterType,\r\n    AbiFunction,\r\n    AbiInfo,\r\n    TransactionBuilder,\r\n    OntAssetTxBuilder,\r\n    GovernanceTxBuilder,\r\n    utils,\r\n    scrypt,\r\n    CONST,\r\n    Wallet,\r\n    SDK,\r\n    Token,\r\n    OntidContract,\r\n    RestClient,\r\n    RpcClient,\r\n    WebsocketClient,\r\n    Crypto,\r\n    Struct,\r\n    ScriptBuilder,\r\n    NeoCore,\r\n    Oep4,\r\n    Oep8,\r\n    Oep5,\r\n    makeNativeContractTx\r\n};\r\n"],"sourceRoot":""}